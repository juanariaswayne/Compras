 ' Generated by SOLAR Generation Studio .
 ' Plugin Version: 1.0.0.0
Imports System.Collections.Generic
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient
Imports Solar.DataHelper

Namespace Joins 


Public Class TBL_PERFILESPERMISOS
    Public Enum ExceptionHandlingEnum
        ThrowExceptionHandling
        RaiseExceptionHandling
    End Enum
        Public Enum ColumnEnum
            Id_PerfilPermisos
            Id_Perfil
            Id_Menu
            Lectura
            Escritura
            Eliminacion
        End Enum

    Private _commandText As String = Nothing
    Private _sqlErr As String = Nothing
    Private _sql As String = Nothing
    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    Private _connectionstring As String = Nothing
    Protected _connection As System.Data.SqlClient.SqlConnection
    Private _transaction As Data.SqlClient.SqlTransaction
    Protected _whereParameterObject As New WhereParameterObject
    Protected _orderByParameterObject As New OrderByParameterObject
    Protected _aggregateParameterObject As New AggregateParameterObject
    Protected _itemList As New List(Of Entities.Joins.TBL_PERFILESPERMISOS)
    Protected _aggregateItemList As New ArrayList
  Private result as boolean

    Public Property Transaction() As Data.SqlClient.SqlTransaction
        Get
            Return _transaction
        End Get
        Set(ByVal value As Data.SqlClient.SqlTransaction)
            _transaction = value
        End Set
    End Property
    Public Sub New()
        MyBase.New()
        Try
            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
        Catch ex As Exception
            Select Case Me.ExceptionHandling
                Case ExceptionHandlingEnum.RaiseExceptionHandling
                    RaiseEvent OnError(ex)
                Case ExceptionHandlingEnum.ThrowExceptionHandling
                    Throw (ex)
            End Select
        End Try
    End Sub

    ''' <summary>
    ''' Constructor para manipular la Transaction
    ''' </summary>
    ''' <remarks></remarks>
    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
        MyBase.New()
        Try
        _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
        _transaction = Transaction
        Catch ex As Exception
            Select Case Me.ExceptionHandling
                Case ExceptionHandlingEnum.RaiseExceptionHandling
                    RaiseEvent OnError(ex)
                Case ExceptionHandlingEnum.ThrowExceptionHandling
                    Throw (ex)
            End Select
        End Try
    End Sub
    Public Event OnError(ByVal ex As Exception)
    Public Property ExceptionHandling() As ExceptionHandlingEnum
        Get
            Return _ExceptionHandling
        End Get
        Set(ByVal value As ExceptionHandlingEnum)
            _ExceptionHandling = value
        End Set
    End Property


    ''' <summary>
    ''' Constructor para manipular la Transaction por Reflexión
    ''' </summary>
    ''' <remarks></remarks>
    Sub New(ByVal TransactionOwner As Object)
        MyBase.New()
        Try
        _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
        Try
             transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
        Catch ex As Exception
             RaiseEvent OnError(New Exception("Error al asignar transacción"))
        End Try
        Catch ex As Exception
            Select Case Me.ExceptionHandling
                Case ExceptionHandlingEnum.RaiseExceptionHandling
                    RaiseEvent OnError(ex)
                Case ExceptionHandlingEnum.ThrowExceptionHandling
                    Throw (ex)
            End Select
        End Try
    End Sub
    ''' <summary>
    ''' Adds a row in database
    ''' </summary>
    ''' <param name="ITEM"></param>
    ''' <remarks> </remarks>
    Public Overridable Function Add(ByVal Item As Entities.Joins.TBL_PERFILESPERMISOS) As Entities.Joins.TBL_PERFILESPERMISOS

        Try
            _commandText = "_TBL_PERFILESPERMISOS_ADD"
			Dim vPKId_PerfilPermisos As New SQLParameter("@Id_PerfilPermisos", SqlDbType.Int, 10 , ParameterDirection.Output, False, 0, 0, nothing, DataRowVersion.Default, Nothing)
			Dim VPKId_Perfil As New SQLParameter("@Id_Perfil", SqlDbType.Int, 10 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Id_Perfil.Id_Perfil)
			Dim VPKId_Menu As New SQLParameter("@Id_Menu", SqlDbType.Int, 10 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Id_Menu.Id_Menu)
			Dim VLectura As New SQLParameter("@Lectura", SqlDbType.Bit, 0 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Lectura)
			Dim VEscritura As New SQLParameter("@Escritura", SqlDbType.Bit, 0 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Escritura)
			Dim VEliminacion As New SQLParameter("@Eliminacion", SqlDbType.Bit, 0 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Eliminacion)
            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

            Dim params() As SQLParameter = {vPKId_PerfilPermisos,VPKId_Perfil,VPKId_Menu,VLectura,VEscritura,VEliminacion,Verr}
         If _transaction is nothing Then
                 result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
         Else
                 result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
         End If
         If Result Then
	           Item.Id_PerfilPermisos = vPKId_PerfilPermisos.Value
                    Item.ID_PERFIL = VPKId_Perfil.Value
                    Item.ID_MENU = VPKId_Menu.Value
               Return Item
          Else
               Return Nothing
          End If
        Catch ex As System.Exception
            Select Case Me.ExceptionHandling
                Case ExceptionHandlingEnum.RaiseExceptionHandling
                    RaiseEvent OnError(ex)
                Case ExceptionHandlingEnum.ThrowExceptionHandling
                    Throw (ex)
            End Select
            Return nothing
        End Try
    End Function


    ''' <summary>
    ''' Returns a resultset
    ''' </summary>
    ''' <remarks> </remarks>
    Public Overridable Function Items() As List(Of Entities.Joins.TBL_PERFILESPERMISOS)
        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
        Try
            _commandText = "_TBL_PerfilesPermisos_ITEMS"
            _itemList.Clear
            _sql = GetSQL()

            Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
            Dim params() As SqlParameter = {Vsql, Verr}

            If _transaction Is Nothing Then
                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
            Else
                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
            End If

            While dr.Read
                Dim NewItem As New ITEM
				NewItem.Id_PerfilPermisos = IIf(Convert.IsDBNull(dr("Id_PerfilPermisos")), nothing,dr("Id_PerfilPermisos"))
                Try
                    Dim result As New DAL.Tables.TBL_PERFILES
                    result.WhereParameter.Add(DAL.Tables.TBL_PERFILES.ColumnEnum.ID_PERFIL, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil")))
                    NewItem.ID_PERFIL = CType(result.Items(0), Entities.Tables.TBL_PERFILES)
                Catch ex As Exception
                    RaiseEvent OnError(ex)
                End Try
                Try
                    Dim result As New DAL.Tables.TBL_MENUS
                    result.WhereParameter.Add(DAL.Tables.TBL_MENUS.ColumnEnum.ID_MENU, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu")))
                    NewItem.ID_MENU = CType(result.Items(0), Entities.Tables.TBL_MENUS)
                Catch ex As Exception
                    RaiseEvent OnError(ex)
                End Try
				NewItem.Lectura = IIf(Convert.IsDBNull(dr("Lectura")), nothing,dr("Lectura"))
				NewItem.Escritura = IIf(Convert.IsDBNull(dr("Escritura")), nothing,dr("Escritura"))
				NewItem.Eliminacion = IIf(Convert.IsDBNull(dr("Eliminacion")), nothing,dr("Eliminacion"))
                _itemList.Add(NewItem)
            End While
            Return _itemList
        Catch ex As System.Exception
            Select Case Me.ExceptionHandling
                Case ExceptionHandlingEnum.RaiseExceptionHandling
                    RaiseEvent OnError(ex)
                Case ExceptionHandlingEnum.ThrowExceptionHandling
                    Throw (ex)
            End Select
            Return nothing
        Finally
            _sqlErr = Nothing
            If dr IsNot Nothing Then dr.Close()
        End Try
    End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_PERFILESPERMISOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return nothing
            Finally
              _sqlErr = Nothing
              If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_PERFILESPERMISOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
           Finally
             _sqlErr = Nothing
             End Try
        End Function

    ''' <summary>
    ''' Removes ITEM single instance form Datasource
    ''' </summary>
    ''' <param name="Item"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Overridable  Function Remove(ByVal Item As Entities.Joins.TBL_PERFILESPERMISOS) As Boolean

        Try
            _commandText = "_TBL_PerfilesPermisos_REMOVE"
			Dim VId_PerfilPermisos As New SQLParameter("@Id_PerfilPermisos", SqlDbType.Int, 10 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Id_PerfilPermisos)
			Dim VId_Perfil As New SQLParameter("@Id_Perfil", SqlDbType.Int, 10 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Id_Perfil.ID_PERFIL)
			Dim VId_Menu As New SQLParameter("@Id_Menu", SqlDbType.Int, 10 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Id_Menu.ID_MENU)

            Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
				Dim params() As SQLParameter = {VId_PerfilPermisos,VSqlErr}
            If _transaction Is Nothing Then
                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
            Else
                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
            End If

        Catch ex As System.Exception
            Select Case Me.ExceptionHandling
                Case ExceptionHandlingEnum.RaiseExceptionHandling
                    RaiseEvent OnError(ex)
                Case ExceptionHandlingEnum.ThrowExceptionHandling
                    Throw (ex)
            End Select
            Return False
        End Try
    End Function

    Public Overridable  Function Clear(ByVal Truncate As Boolean) As Boolean

        Try
            _commandText = "_TBL_PerfilesPermisos_CLEAR"
            Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

            Dim params() As SqlParameter = {VTRUNCATE, Verr}
            If _transaction Is Nothing Then
                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
            Else
                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
            End If

        Catch ex As System.Exception
            Select Case Me.ExceptionHandling
                Case ExceptionHandlingEnum.RaiseExceptionHandling
                    RaiseEvent OnError(ex)
                Case ExceptionHandlingEnum.ThrowExceptionHandling
                    Throw (ex)
            End Select
            Return False
        End Try
    End Function


    Public Overridable Function Update(ByVal Item As Entities.Joins.TBL_PERFILESPERMISOS) As Boolean

        Try
            _commandText = "_TBL_PerfilesPermisos_UPDATE"

			Dim VId_PerfilPermisos As New SQLParameter("@Id_PerfilPermisos", SqlDbType.Int, 10 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Id_PerfilPermisos)
			Dim VId_Perfil As New SQLParameter("@Id_Perfil", SqlDbType.Int, 10 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Id_Perfil.Id_Perfil)
			Dim VId_Menu As New SQLParameter("@Id_Menu", SqlDbType.Int, 10 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Id_Menu.Id_Menu)
			Dim VLectura As New SQLParameter("@Lectura", SqlDbType.Bit, 0 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Lectura)
			Dim VEscritura As New SQLParameter("@Escritura", SqlDbType.Bit, 0 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Escritura)
			Dim VEliminacion As New SQLParameter("@Eliminacion", SqlDbType.Bit, 0 , ParameterDirection.Input, False, 0, 0, nothing, DataRowVersion.Default, Item.Eliminacion)
	            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

				Dim params() As SQLParameter = {VId_PerfilPermisos,VId_Perfil,VId_Menu,VLectura,VEscritura,VEliminacion,Verr}
            If _transaction Is Nothing Then
                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
            Else
                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
            End If

        Catch ex As System.Exception
            Select Case Me.ExceptionHandling
                Case ExceptionHandlingEnum.RaiseExceptionHandling
                    RaiseEvent OnError(ex)
                Case ExceptionHandlingEnum.ThrowExceptionHandling
                    Throw (ex)
            End Select
            Return False
        End Try
    End Function


    Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
        Try
            If _connection Is Nothing Then
                _connection = New SqlConnection(_connectionstring)
                _connection.Open()
                _transaction = _connection.BeginTransaction()
                Return _transaction
            Else
                RaiseEvent OnError(New Exception("Transaction already opened"))
                Return Nothing 
            End If
        Catch ex As System.Exception
            Select Case Me.ExceptionHandling
                Case ExceptionHandlingEnum.RaiseExceptionHandling
                    RaiseEvent OnError(ex)
                Case ExceptionHandlingEnum.ThrowExceptionHandling
                    Throw (ex)
            End Select
            Return Nothing 
        End Try
    End Function
    Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
        Try
            If _connection Is Nothing Then
                RaiseEvent OnError(New Exception("Transaction not opened yet"))
            Else
                If Commit Then
                    _transaction.Commit()
                Else
                    _transaction.Rollback()
                End If
                _connection.Close()
                _connection = Nothing
                _transaction = Nothing
                Return True
            End If
        Catch ex As System.Exception
            Select Case Me.ExceptionHandling
                Case ExceptionHandlingEnum.RaiseExceptionHandling
                    RaiseEvent OnError(ex)
                Case ExceptionHandlingEnum.ThrowExceptionHandling
                    Throw (ex)
            End Select
        End Try
        Return True
    End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.TBL_PERFILESPERMISOS)
            Get
                Return _itemList
            End Get
 
        End Property

    Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add( [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
        Private Function FormatValue(ByVal Value As Object) As String
            Try
                Select Case Value.GetType.FullName
                    Case "System.String", "System.DateTime"
                        Return "'" & Value & "'"
                    Case Else
                        Return Value
                End Select
            Catch ex As Exception
                Throw New Exception("Error Converting value")
            End Try
        End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter
 
            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
    ''' <summary>
    ''' Class Name    : ITEM 
    ''' Description   :  (Single instance)  
    ''' Creation Date : sábado, 16 de mayo de 2015
    ''' </summary>
    ''' <remarks> Represents TBL_PERFILESPERMISOS single record instance. </remarks>
    Public Class ITEM
        Inherits Entities.Joins.TBL_PERFILESPERMISOS
    End Class 'ITEM

''' Clase         : ColumnNames 
''' Descripción   : Nombres de Columnas de la tabla TBL_PERFILESPERMISOS
''' Fecha de Creación  : sábado, 16 de mayo de 2015
''' <remarks> Representa los Nombres de Columnas de la tabla TBL_PERFILESPERMISOS. </remarks>
Public Class ColumnNames
	Public Const ID_PERFILPERMISOS As String = "ID_PERFILPERMISOS"
	Public Const ID_PERFIL As String = "ID_PERFIL"
	Public Const ID_MENU As String = "ID_MENU"
	Public Const LECTURA As String = "LECTURA"
	Public Const ESCRITURA As String = "ESCRITURA"
	Public Const ELIMINACION As String = "ELIMINACION"
End Class ' ColumnNames
End Class ' TBL_PERFILESPERMISOS

    Public Class TBL_USUARIOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Usuario
            Id_Perfil
            IdentificadorUsuario
            ContraseniaUsuario
            NombreUsuario
            Inactivo
            Sector_id
            Email
            Empresa
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.TBL_USUARIOS)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.TBL_USUARIOS) As Entities.Joins.TBL_USUARIOS

            Try
                _commandText = "_TBL_USUARIOS_ADD"
                Dim VPKId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim VPKId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL.ID_PERFIL)
                Dim VIdentificadorUsuario As New SqlParameter("@IdentificadorUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IDENTIFICADORUSUARIO)
                Dim VContraseniaUsuario As New SqlParameter("@ContraseniaUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTRASENIAUSUARIO)
                Dim VNombreUsuario As New SqlParameter("@NombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREUSUARIO)
                Dim VInactivo As New SqlParameter("@Inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim VPKSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID.SECTORREQUERIMIENTO_ID)
                Dim VEmail As New SqlParameter("@Email", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMAIL)
                Dim VEmpresa As New SqlParameter("@Empresa", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMPRESA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKId_Usuario, VPKId_Perfil, VIdentificadorUsuario, VContraseniaUsuario, VNombreUsuario, VInactivo, VPKSector_id, VEmail, VEmpresa, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_USUARIO = VPKId_Usuario.Value
                    Item.ID_PERFIL = VPKId_Perfil.Value
                    Item.SECTOR_ID = VPKSector_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.TBL_USUARIOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TBL_Usuarios_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    NewItem.ID_USUARIO = IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario"))
                    Try
                        Dim result As New DAL.Tables.TBL_PERFILES
                        result.WhereParameter.Add(DAL.Tables.TBL_PERFILES.ColumnEnum.Id_Perfil, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil")))
                        NewItem.ID_PERFIL = CType(result.Items(0), Entities.Tables.TBL_PERFILES)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.IDENTIFICADORUSUARIO = IIf(Convert.IsDBNull(dr("IdentificadorUsuario")), Nothing, dr("IdentificadorUsuario"))
                    NewItem.CONTRASENIAUSUARIO = IIf(Convert.IsDBNull(dr("ContraseniaUsuario")), Nothing, dr("ContraseniaUsuario"))
                    NewItem.NOMBREUSUARIO = IIf(Convert.IsDBNull(dr("NombreUsuario")), Nothing, dr("NombreUsuario"))
                    NewItem.INACTIVO = IIf(Convert.IsDBNull(dr("Inactivo")), Nothing, dr("Inactivo"))
                    Try
                        Dim result As New DAL.Tables.COMSECTORREQUERIMIENTO
                        result.WhereParameter.Add(DAL.Tables.COMSECTORREQUERIMIENTO.ColumnEnum.sectorRequerimiento_id, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("Sector_id")), Nothing, dr("Sector_id")))
                        NewItem.SECTOR_ID = CType(result.Items(0), Entities.Tables.COMSECTORREQUERIMIENTO)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.EMAIL = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
                    NewItem.EMPRESA = IIf(Convert.IsDBNull(dr("Empresa")), Nothing, dr("Empresa"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_USUARIOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_USUARIOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.TBL_USUARIOS) As Boolean

            Try
                _commandText = "_TBL_Usuarios_REMOVE"
                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL.ID_PERFIL)
                Dim VSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID.SECTORREQUERIMIENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TBL_Usuarios_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.TBL_USUARIOS) As Boolean

            Try
                _commandText = "_TBL_Usuarios_UPDATE"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL.ID_PERFIL)
                Dim VIdentificadorUsuario As New SqlParameter("@IdentificadorUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IDENTIFICADORUSUARIO)
                Dim VContraseniaUsuario As New SqlParameter("@ContraseniaUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTRASENIAUSUARIO)
                Dim VNombreUsuario As New SqlParameter("@NombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREUSUARIO)
                Dim VInactivo As New SqlParameter("@Inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim VSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID.SECTORREQUERIMIENTO_ID)
                Dim VEmail As New SqlParameter("@Email", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMAIL)
                Dim VEmpresa As New SqlParameter("@Empresa", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMPRESA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_Usuario, VId_Perfil, VIdentificadorUsuario, VContraseniaUsuario, VNombreUsuario, VInactivo, VSector_id, VEmail, VEmpresa, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.TBL_USUARIOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : lunes, 12 de septiembre de 2016
        ''' </summary>
        ''' <remarks> Represents TBL_USUARIOS single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.TBL_USUARIOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TBL_USUARIOS
        ''' Fecha de Creación  : lunes, 12 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TBL_USUARIOS. </remarks>
        Public Class ColumnNames
            Public Const ID_USUARIO As String = "ID_USUARIO"
            Public Const ID_PERFIL As String = "ID_PERFIL"
            Public Const IDENTIFICADORUSUARIO As String = "IDENTIFICADORUSUARIO"
            Public Const CONTRASENIAUSUARIO As String = "CONTRASENIAUSUARIO"
            Public Const NOMBREUSUARIO As String = "NOMBREUSUARIO"
            Public Const INACTIVO As String = "INACTIVO"
            Public Const SECTOR_ID As String = "SECTOR_ID"
            Public Const EMAIL As String = "EMAIL"
            Public Const EMPRESA As String = "EMPRESA"
        End Class ' ColumnNames
    End Class ' TBL_USUARIOS

    Public Class COMORDENCOMPRA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            ordenCompra_id
            codEmpRequerimiento
            requerimiento_id
            fecha
            proveed_id
            sectorRequerimiento_id
            estado_id
            tipoOc_id
            modificaCosto
            condicionPago_id
            obs
            usuario
            usuarioAutoriza
            PDC
            fechaAutorizacion
            motivoFinaliz_Anulacion
            fechaFinaliz_Anulacion
            pedidoDiario
            proveed_Original
            sectorEntrega_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.COMORDENCOMPRA)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.COMORDENCOMPRA) As Entities.Joins.COMORDENCOMPRA

            Try
                _commandText = "_COMORDENCOMPRA_ADD"
                Dim VPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VPKordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VcodEmpRequerimiento As New SqlParameter("@codEmpRequerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPREQUERIMIENTO)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
                Dim VPKestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID.ESTADO_ID)
                Dim VPKtipoOc_id As New SqlParameter("@tipoOc_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOOC_ID.TIPOOC_ID)
                Dim VmodificaCosto As New SqlParameter("@modificaCosto", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MODIFICACOSTO)
                Dim VcondicionPago_id As New SqlParameter("@condicionPago_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONDICIONPAGO_ID)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
                Dim VPDC As New SqlParameter("@PDC", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PDC)
                Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
                Dim VmotivoFinaliz_Anulacion As New SqlParameter("@motivoFinaliz_Anulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOFINALIZ_ANULACION)
                Dim VfechaFinaliz_Anulacion As New SqlParameter("@fechaFinaliz_Anulacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAFINALIZ_ANULACION = Date.MinValue, Nothing, Item.FECHAFINALIZ_ANULACION))
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
                Dim Vproveed_Original As New SqlParameter("@proveed_Original", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ORIGINAL)
                Dim VsectorEntrega_id As New SqlParameter("@sectorEntrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORENTREGA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKcodEmp, VPKordenCompra_id, VcodEmpRequerimiento, Vrequerimiento_id, Vfecha, Vproveed_id, VsectorRequerimiento_id, VPKestado_id, VPKtipoOc_id, VmodificaCosto, VcondicionPago_id, Vobs, Vusuario, VusuarioAutoriza, VPDC, VfechaAutorizacion, VmotivoFinaliz_Anulacion, VfechaFinaliz_Anulacion, VpedidoDiario, Vproveed_Original, VsectorEntrega_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = VPKcodEmp.Value
                    Item.ORDENCOMPRA_ID = VPKordenCompra_id.Value
                    Item.ESTADO_ID = VPKestado_id.Value
                    Item.TIPOOC_ID = VPKtipoOc_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.COMORDENCOMPRA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comOrdenCompra_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ORDENCOMPRA_ID = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.CODEMPREQUERIMIENTO = IIf(Convert.IsDBNull(dr("codEmpRequerimiento")), Nothing, dr("codEmpRequerimiento"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.FECHA = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.PROVEED_ID = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.SECTORREQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    Try
                        Dim result As New DAL.Tables.COMESTADO
                        result.WhereParameter.Add(DAL.Tables.COMESTADO.ColumnEnum.estado_id, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id")))
                        NewItem.ESTADO_ID = CType(result.Items(0), Entities.Tables.COMESTADO)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Tables.COMTIPOOC
                        result.WhereParameter.Add(DAL.Tables.COMTIPOOC.ColumnEnum.tipoOC_id, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("tipoOc_id")), Nothing, dr("tipoOc_id")))
                        NewItem.TIPOOC_ID = CType(result.Items(0), Entities.Tables.COMTIPOOC)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.MODIFICACOSTO = IIf(Convert.IsDBNull(dr("modificaCosto")), Nothing, dr("modificaCosto"))
                    NewItem.CONDICIONPAGO_ID = IIf(Convert.IsDBNull(dr("condicionPago_id")), Nothing, dr("condicionPago_id"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.USUARIO = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.USUARIOAUTORIZA = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.PDC = IIf(Convert.IsDBNull(dr("PDC")), Nothing, dr("PDC"))
                    NewItem.FECHAAUTORIZACION = IIf(Convert.IsDBNull(dr("fechaAutorizacion")), Nothing, dr("fechaAutorizacion"))
                    NewItem.MOTIVOFINALIZ_ANULACION = IIf(Convert.IsDBNull(dr("motivoFinaliz_Anulacion")), Nothing, dr("motivoFinaliz_Anulacion"))
                    NewItem.FECHAFINALIZ_ANULACION = IIf(Convert.IsDBNull(dr("fechaFinaliz_Anulacion")), Nothing, dr("fechaFinaliz_Anulacion"))
                    NewItem.PEDIDODIARIO = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    NewItem.PROVEED_ORIGINAL = IIf(Convert.IsDBNull(dr("proveed_Original")), Nothing, dr("proveed_Original"))
                    NewItem.SECTORENTREGA_ID = IIf(Convert.IsDBNull(dr("sectorEntrega_id")), Nothing, dr("sectorEntrega_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.COMORDENCOMPRA) As Boolean

            Try
                _commandText = "_comOrdenCompra_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID.ESTADO_ID)
                Dim VtipoOc_id As New SqlParameter("@tipoOc_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOOC_ID.TIPOOC_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comOrdenCompra_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.COMORDENCOMPRA) As Boolean

            Try
                _commandText = "_comOrdenCompra_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VcodEmpRequerimiento As New SqlParameter("@codEmpRequerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPREQUERIMIENTO)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID.ESTADO_ID)
                Dim VtipoOc_id As New SqlParameter("@tipoOc_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOOC_ID.TIPOOC_ID)
                Dim VmodificaCosto As New SqlParameter("@modificaCosto", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MODIFICACOSTO)
                Dim VcondicionPago_id As New SqlParameter("@condicionPago_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONDICIONPAGO_ID)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
                Dim VPDC As New SqlParameter("@PDC", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PDC)
                Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
                Dim VmotivoFinaliz_Anulacion As New SqlParameter("@motivoFinaliz_Anulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOFINALIZ_ANULACION)
                Dim VfechaFinaliz_Anulacion As New SqlParameter("@fechaFinaliz_Anulacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAFINALIZ_ANULACION = Date.MinValue, Nothing, Item.FECHAFINALIZ_ANULACION))
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
                Dim Vproveed_Original As New SqlParameter("@proveed_Original", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ORIGINAL)
                Dim VsectorEntrega_id As New SqlParameter("@sectorEntrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORENTREGA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VcodEmpRequerimiento, Vrequerimiento_id, Vfecha, Vproveed_id, VsectorRequerimiento_id, Vestado_id, VtipoOc_id, VmodificaCosto, VcondicionPago_id, Vobs, Vusuario, VusuarioAutoriza, VPDC, VfechaAutorizacion, VmotivoFinaliz_Anulacion, VfechaFinaliz_Anulacion, VpedidoDiario, Vproveed_Original, VsectorEntrega_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.COMORDENCOMPRA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : miércoles, 9 de noviembre de 2016
        ''' </summary>
        ''' <remarks> Represents COMORDENCOMPRA single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.COMORDENCOMPRA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMORDENCOMPRA
        ''' Fecha de Creación  : miércoles, 9 de noviembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMORDENCOMPRA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const CODEMPREQUERIMIENTO As String = "CODEMPREQUERIMIENTO"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const TIPOOC_ID As String = "TIPOOC_ID"
            Public Const MODIFICACOSTO As String = "MODIFICACOSTO"
            Public Const CONDICIONPAGO_ID As String = "CONDICIONPAGO_ID"
            Public Const OBS As String = "OBS"
            Public Const USUARIO As String = "USUARIO"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const PDC As String = "PDC"
            Public Const FECHAAUTORIZACION As String = "FECHAAUTORIZACION"
            Public Const MOTIVOFINALIZ_ANULACION As String = "MOTIVOFINALIZ_ANULACION"
            Public Const FECHAFINALIZ_ANULACION As String = "FECHAFINALIZ_ANULACION"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
            Public Const PROVEED_ORIGINAL As String = "PROVEED_ORIGINAL"
            Public Const SECTORENTREGA_ID As String = "SECTORENTREGA_ID"
        End Class ' ColumnNames
    End Class ' COMORDENCOMPRA


    Public Class COMORDENCOMPRAITEM
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            ordenCompra_id
            nroItem
            articulo_id
            uniMed
            cantidad
            precio
            nivelAut_id
            fechaEntrega
            fechaEntrega1
            cantidad1
            embalaje
            marca
            codEmpRequerimiento
            Requerimiento_id
            cantidadOriginal
            precioOriginal

        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.COMORDENCOMPRAITEM)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.COMORDENCOMPRAITEM) As Entities.Joins.COMORDENCOMPRAITEM

            Try
                _commandText = "_COMORDENCOMPRAITEM_ADD"
                Dim VPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VPKordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Vprecio As New SqlParameter("@precio", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRECIO)
                Dim VPKnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID.NIVEL_ID)
                Dim VfechaEntrega As New SqlParameter("@fechaEntrega", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA = Date.MinValue, Nothing, Item.FECHAENTREGA))
                Dim VfechaEntrega1 As New SqlParameter("@fechaEntrega1", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA1 = Date.MinValue, Nothing, Item.FECHAENTREGA1))
                Dim Vcantidad1 As New SqlParameter("@cantidad1", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD1)
                Dim Vembalaje As New SqlParameter("@embalaje", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMBALAJE)
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim VcodEmpRequerimiento As New SqlParameter("@codEmpRequerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPREQUERIMIENTO)
                Dim VRequerimiento_id As New SqlParameter("@Requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VcantidadOriginal As New SqlParameter("@cantidadOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDADORIGINAL)
                Dim VprecioOriginal As New SqlParameter("@precioOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRECIOORIGINAL)

                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKcodEmp, VPKordenCompra_id, VPKnroItem, Varticulo_id, VuniMed, Vcantidad, Vprecio, VPKnivelAut_id, VfechaEntrega, VfechaEntrega1, Vcantidad1, Vembalaje, Vmarca, VcodEmpRequerimiento, VRequerimiento_id, VcantidadOriginal, VprecioOriginal, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = VPKcodEmp.Value
                    Item.ORDENCOMPRA_ID = VPKordenCompra_id.Value
                    Item.NROITEM = VPKnroItem.Value
                    Item.NIVELAUT_ID = VPKnivelAut_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.COMORDENCOMPRAITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comOrdenCompraItem_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ORDENCOMPRA_ID = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.PRECIO = IIf(Convert.IsDBNull(dr("precio")), Nothing, dr("precio"))
                    Try
                        Dim result As New DAL.Tables.COMAUTORIZACION
                        result.WhereParameter.Add(DAL.Tables.COMAUTORIZACION.ColumnEnum.nivel_id, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id")))
                        NewItem.NIVELAUT_ID = CType(result.Items(0), Entities.Tables.COMAUTORIZACION)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.FECHAENTREGA = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.FECHAENTREGA1 = IIf(Convert.IsDBNull(dr("fechaEntrega1")), Nothing, dr("fechaEntrega1"))
                    NewItem.CANTIDAD1 = IIf(Convert.IsDBNull(dr("cantidad1")), Nothing, dr("cantidad1"))
                    NewItem.EMBALAJE = IIf(Convert.IsDBNull(dr("embalaje")), Nothing, dr("embalaje"))
                    NewItem.MARCA = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    NewItem.CODEMPREQUERIMIENTO = IIf(Convert.IsDBNull(dr("codEmpRequerimiento")), Nothing, dr("codEmpRequerimiento"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("Requerimiento_id")), Nothing, dr("Requerimiento_id"))
                    NewItem.CANTIDADORIGINAL = IIf(Convert.IsDBNull(dr("cantidadOriginal")), Nothing, dr("cantidadOriginal"))
                    NewItem.PRECIOORIGINAL = IIf(Convert.IsDBNull(dr("precioOriginal")), Nothing, dr("precioOriginal"))

                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRAITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRAITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.COMORDENCOMPRAITEM) As Boolean

            Try
                _commandText = "_comOrdenCompraItem_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID.NIVEL_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comOrdenCompraItem_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.COMORDENCOMPRAITEM) As Boolean

            Try
                _commandText = "_comOrdenCompraItem_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Vprecio As New SqlParameter("@precio", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRECIO)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID.NIVEL_ID)
                Dim VfechaEntrega As New SqlParameter("@fechaEntrega", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA = Date.MinValue, Nothing, Item.FECHAENTREGA))
                Dim VfechaEntrega1 As New SqlParameter("@fechaEntrega1", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA1 = Date.MinValue, Nothing, Item.FECHAENTREGA1))
                Dim Vcantidad1 As New SqlParameter("@cantidad1", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD1)
                Dim Vembalaje As New SqlParameter("@embalaje", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMBALAJE)
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim VcodEmpRequerimiento As New SqlParameter("@codEmpRequerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPREQUERIMIENTO)
                Dim VRequerimiento_id As New SqlParameter("@Requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VcantidadOriginal As New SqlParameter("@cantidadOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDADORIGINAL)
                Dim VprecioOriginal As New SqlParameter("@precioOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRECIOORIGINAL)

                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VnroItem, Varticulo_id, VuniMed, Vcantidad, Vprecio, VnivelAut_id, VfechaEntrega, VfechaEntrega1, Vcantidad1, Vembalaje, Vmarca, VcodEmpRequerimiento, VRequerimiento_id, VcantidadOriginal, VprecioOriginal, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.COMORDENCOMPRAITEM)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : lunes, 3 de octubre de 2016
        ''' </summary>
        ''' <remarks> Represents COMORDENCOMPRAITEM single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.COMORDENCOMPRAITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMORDENCOMPRAITEM
        ''' Fecha de Creación  : lunes, 3 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMORDENCOMPRAITEM. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const PRECIO As String = "PRECIO"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const FECHAENTREGA1 As String = "FECHAENTREGA1"
            Public Const CANTIDAD1 As String = "CANTIDAD1"
            Public Const EMBALAJE As String = "EMBALAJE"
            Public Const MARCA As String = "MARCA"
            Public Const CODEMPREQUERIMIENTO As String = "CODEMPREQUERIMIENTO"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const CANTIDADORIGINAL As String = "CANTIDADORIGINAL"
            Public Const PRECIOORIGINAL As String = "PRECIOORIGINAL"

        End Class ' ColumnNames
    End Class ' COMORDENCOMPRAITEM

    Public Class COMREQUERIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            requerimiento_id
            fecha
            sectorRequerimiento_id
            proveed_id
            estado_id
            obs
            usuario
            usuarioAutoriza
            fechaAutorizacion
            motivoAnulacion
            pedidoDiario
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.COMREQUERIMIENTO)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.COMREQUERIMIENTO) As Entities.Joins.COMREQUERIMIENTO

            Try
                _commandText = "_COMREQUERIMIENTO_ADD"
                Dim VPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VPKrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim VPKsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID.SECTORREQUERIMIENTO_ID)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim VPKestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID.ESTADO_ID)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
                Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
                Dim VmotivoAnulacion As New SqlParameter("@motivoAnulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOANULACION)
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKcodEmp, VPKrequerimiento_id, Vfecha, VPKsectorRequerimiento_id, Vproveed_id, VPKestado_id, Vobs, Vusuario, VusuarioAutoriza, VfechaAutorizacion, VmotivoAnulacion, VpedidoDiario, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = VPKcodEmp.Value
                    Item.REQUERIMIENTO_ID = VPKrequerimiento_id.Value
                    Item.SECTORREQUERIMIENTO_ID = VPKsectorRequerimiento_id.Value
                    Item.ESTADO_ID = VPKestado_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.COMREQUERIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comRequerimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.FECHA = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    Try
                        Dim result As New DAL.Tables.COMSECTORREQUERIMIENTO
                        result.WhereParameter.Add(DAL.Tables.COMSECTORREQUERIMIENTO.ColumnEnum.sectorRequerimiento_id, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id")))
                        NewItem.SECTORREQUERIMIENTO_ID = CType(result.Items(0), Entities.Tables.COMSECTORREQUERIMIENTO)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.PROVEED_ID = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    Try
                        Dim result As New DAL.Tables.COMESTADO
                        result.WhereParameter.Add(DAL.Tables.COMESTADO.ColumnEnum.estado_id, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id")))
                        NewItem.ESTADO_ID = CType(result.Items(0), Entities.Tables.COMESTADO)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.USUARIO = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.USUARIOAUTORIZA = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.FECHAAUTORIZACION = IIf(Convert.IsDBNull(dr("fechaAutorizacion")), Nothing, dr("fechaAutorizacion"))
                    NewItem.MOTIVOANULACION = IIf(Convert.IsDBNull(dr("motivoAnulacion")), Nothing, dr("motivoAnulacion"))
                    NewItem.PEDIDODIARIO = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.COMREQUERIMIENTO) As Boolean

            Try
                _commandText = "_comRequerimiento_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID.SECTORREQUERIMIENTO_ID)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID.ESTADO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comRequerimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.COMREQUERIMIENTO) As Boolean

            Try
                _commandText = "_comRequerimiento_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID.SECTORREQUERIMIENTO_ID)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID.ESTADO_ID)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
                Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
                Dim VmotivoAnulacion As New SqlParameter("@motivoAnulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOANULACION)
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, Vfecha, VsectorRequerimiento_id, Vproveed_id, Vestado_id, Vobs, Vusuario, VusuarioAutoriza, VfechaAutorizacion, VmotivoAnulacion, VpedidoDiario, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.COMREQUERIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : lunes, 3 de octubre de 2016
        ''' </summary>
        ''' <remarks> Represents COMREQUERIMIENTO single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.COMREQUERIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMREQUERIMIENTO
        ''' Fecha de Creación  : lunes, 3 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMREQUERIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const OBS As String = "OBS"
            Public Const USUARIO As String = "USUARIO"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const FECHAAUTORIZACION As String = "FECHAAUTORIZACION"
            Public Const MOTIVOANULACION As String = "MOTIVOANULACION"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
        End Class ' ColumnNames
    End Class ' COMREQUERIMIENTO

    Public Class COMREQUERIMIENTOITEM
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            requerimiento_id
            nroItem
            articulo_id
            uniMed
            cantidad
            nivelAut_id
            fechaEntrega
            marca
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.COMREQUERIMIENTOITEM)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.COMREQUERIMIENTOITEM) As Entities.Joins.COMREQUERIMIENTOITEM

            Try
                _commandText = "_COMREQUERIMIENTOITEM_ADD"
                Dim VPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VPKrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VPKnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID.NIVEL_ID)
                Dim VfechaEntrega As New SqlParameter("@fechaEntrega", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA = Date.MinValue, Nothing, Item.FECHAENTREGA))
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKcodEmp, VPKrequerimiento_id, VPKnroItem, Varticulo_id, VuniMed, Vcantidad, VPKnivelAut_id, VfechaEntrega, Vmarca, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = VPKcodEmp.Value
                    Item.REQUERIMIENTO_ID = VPKrequerimiento_id.Value
                    Item.NROITEM = VPKnroItem.Value
                    Item.NIVELAUT_ID = VPKnivelAut_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.COMREQUERIMIENTOITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comRequerimientoItem_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    Try
                        Dim result As New DAL.Tables.COMAUTORIZACION
                        result.WhereParameter.Add(DAL.Tables.COMAUTORIZACION.ColumnEnum.nivel_id, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id")))
                        NewItem.NIVELAUT_ID = CType(result.Items(0), Entities.Tables.COMAUTORIZACION)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.FECHAENTREGA = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.MARCA = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.COMREQUERIMIENTOITEM) As Boolean

            Try
                _commandText = "_comRequerimientoItem_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID.NIVEL_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comRequerimientoItem_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.COMREQUERIMIENTOITEM) As Boolean

            Try
                _commandText = "_comRequerimientoItem_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID.NIVEL_ID)
                Dim VfechaEntrega As New SqlParameter("@fechaEntrega", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA = Date.MinValue, Nothing, Item.FECHAENTREGA))
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnroItem, Varticulo_id, VuniMed, Vcantidad, VnivelAut_id, VfechaEntrega, Vmarca, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.COMREQUERIMIENTOITEM)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : miércoles, 24 de agosto de 2016
        ''' </summary>
        ''' <remarks> Represents COMREQUERIMIENTOITEM single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.COMREQUERIMIENTOITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMREQUERIMIENTOITEM
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMREQUERIMIENTOITEM. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const MARCA As String = "MARCA"
        End Class ' ColumnNames
    End Class ' COMREQUERIMIENTOITEM

    Public Class COMREQUERIMIENTOORDENCOMPRA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            requerimiento_id
            nroItem
            codEmpOC
            ordenCompra_id
            nroItemOC
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.COMREQUERIMIENTOORDENCOMPRA)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.COMREQUERIMIENTOORDENCOMPRA) As Entities.Joins.COMREQUERIMIENTOORDENCOMPRA

            Try
                _commandText = "_COMREQUERIMIENTOORDENCOMPRA_ADD"
                Dim VPKcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp.codEmp)
                Dim VPKrequerimiento_id As New SQLParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.requerimiento_id.codEmp)
                Dim VPKnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem.codEmp)
                Dim VPKcodEmpOC As New SQLParameter("@codEmpOC", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpOC.codEmp)
                Dim VPKordenCompra_id As New SQLParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ordenCompra_id.codEmp)
                Dim VPKnroItemOC As New SQLParameter("@nroItemOC", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItemOC.codEmp)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKcodEmp, vPKrequerimiento_id, vPKnroItem, vPKcodEmpOC, vPKordenCompra_id, vPKnroItemOC, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.codEmp = vPKcodEmp.Value
                    Item.requerimiento_id = vPKrequerimiento_id.Value
                    Item.nroItem = vPKnroItem.Value
                    Item.codEmpOC = vPKcodEmpOC.Value
                    Item.ordenCompra_id = vPKordenCompra_id.Value
                    Item.nroItemOC = vPKnroItemOC.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.COMREQUERIMIENTOORDENCOMPRA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comRequerimientoOrdenCompra_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    Try
                        Dim result As New DAL.Joins.COMREQUERIMIENTOITEM
                        result.WhereParameter.Add(DAL.Joins.COMREQUERIMIENTOITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp")))
                        NewItem.CODEMP = CType(result.Items(0), Entities.Joins.COMREQUERIMIENTOITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.COMREQUERIMIENTOITEM
                        result.WhereParameter.Add(DAL.Joins.COMREQUERIMIENTOITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id")))
                        NewItem.REQUERIMIENTO_ID = CType(result.Items(0), Entities.Joins.COMREQUERIMIENTOITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.COMREQUERIMIENTOITEM
                        result.WhereParameter.Add(DAL.Joins.COMREQUERIMIENTOITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem")))
                        NewItem.NROITEM = CType(result.Items(0), Entities.Joins.COMREQUERIMIENTOITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.COMORDENCOMPRAITEM
                        result.WhereParameter.Add(DAL.Joins.COMORDENCOMPRAITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("codEmpOC")), Nothing, dr("codEmpOC")))
                        NewItem.CODEMPOC = CType(result.Items(0), Entities.Joins.COMORDENCOMPRAITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.COMORDENCOMPRAITEM
                        result.WhereParameter.Add(DAL.Joins.COMORDENCOMPRAITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id")))
                        NewItem.ORDENCOMPRA_ID = CType(result.Items(0), Entities.Joins.COMORDENCOMPRAITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.COMORDENCOMPRAITEM
                        result.WhereParameter.Add(DAL.Joins.COMORDENCOMPRAITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("nroItemOC")), Nothing, dr("nroItemOC")))
                        NewItem.NROITEMOC = CType(result.Items(0), Entities.Joins.COMORDENCOMPRAITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOORDENCOMPRA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOORDENCOMPRA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.COMREQUERIMIENTOORDENCOMPRA) As Boolean

            Try
                _commandText = "_comRequerimientoOrdenCompra_REMOVE"
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp.CODEMP)
                Dim Vrequerimiento_id As New SQLParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.requerimiento_id.CODEMP)
                Dim VnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem.CODEMP)
                Dim VcodEmpOC As New SQLParameter("@codEmpOC", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpOC.CODEMP)
                Dim VordenCompra_id As New SQLParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ordenCompra_id.CODEMP)
                Dim VnroItemOC As New SQLParameter("@nroItemOC", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItemOC.CODEMP)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comRequerimientoOrdenCompra_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.COMREQUERIMIENTOORDENCOMPRA) As Boolean

            Try
                _commandText = "_comRequerimientoOrdenCompra_UPDATE"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp.codEmp)
                Dim Vrequerimiento_id As New SQLParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.requerimiento_id.codEmp)
                Dim VnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem.codEmp)
                Dim VcodEmpOC As New SQLParameter("@codEmpOC", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpOC.codEmp)
                Dim VordenCompra_id As New SQLParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ordenCompra_id.codEmp)
                Dim VnroItemOC As New SQLParameter("@nroItemOC", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItemOC.codEmp)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {VcodEmp, Vrequerimiento_id, VnroItem, VcodEmpOC, VordenCompra_id, VnroItemOC, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.COMREQUERIMIENTOORDENCOMPRA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : jueves, 08 de octubre de 2015
        ''' </summary>
        ''' <remarks> Represents COMREQUERIMIENTOORDENCOMPRA single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.COMREQUERIMIENTOORDENCOMPRA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMREQUERIMIENTOORDENCOMPRA
        ''' Fecha de Creación  : jueves, 08 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMREQUERIMIENTOORDENCOMPRA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const CODEMPOC As String = "CODEMPOC"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const NROITEMOC As String = "NROITEMOC"
        End Class ' ColumnNames
    End Class ' COMREQUERIMIENTOORDENCOMPRA


    Public Class STKENTRANSITO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            comprobante
            nroItem
            cantOriginal
            cantRecibida
            uniMed
            estado_id
            usuarioGenera
            usuarioRecibe
            fechaRecepcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.STKENTRANSITO)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.STKENTRANSITO) As Entities.Joins.STKENTRANSITO

            Try
                _commandText = "_STKENTRANSITO_ADD"
                Dim VPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP.CODEMP)
                Dim VPKcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE.CODEMP)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VcantOriginal As New SqlParameter("@cantOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTORIGINAL)
                Dim VcantRecibida As New SqlParameter("@cantRecibida", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTRECIBIDA)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VusuarioGenera As New SqlParameter("@usuarioGenera", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOGENERA)
                Dim VusuarioRecibe As New SqlParameter("@usuarioRecibe", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIORECIBE)
                Dim VfechaRecepcion As New SqlParameter("@fechaRecepcion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHARECEPCION = Date.MinValue, Nothing, Item.FECHARECEPCION))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKcodEmp, VPKcomprobante, vPKnroItem, VcantOriginal, VcantRecibida, VuniMed, Vestado_id, VusuarioGenera, VusuarioRecibe, VfechaRecepcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = VPKcodEmp.Value
                    Item.COMPROBANTE = VPKcomprobante.Value
                    Item.NROITEM = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.STKENTRANSITO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkEnTransito_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    Try
                        Dim result As New DAL.Joins.STKMOVIMIENTO
                        result.WhereParameter.Add(DAL.Joins.STKMOVIMIENTO.ColumnEnum.codEmp, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp")))
                        NewItem.CODEMP = CType(result.Items(0), Entities.Joins.STKMOVIMIENTO)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.STKMOVIMIENTO
                        result.WhereParameter.Add(DAL.Joins.STKMOVIMIENTO.ColumnEnum.codEmp, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante")))
                        NewItem.COMPROBANTE = CType(result.Items(0), Entities.Joins.STKMOVIMIENTO)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.CANTORIGINAL = IIf(Convert.IsDBNull(dr("cantOriginal")), Nothing, dr("cantOriginal"))
                    NewItem.CANTRECIBIDA = IIf(Convert.IsDBNull(dr("cantRecibida")), Nothing, dr("cantRecibida"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.USUARIOGENERA = IIf(Convert.IsDBNull(dr("usuarioGenera")), Nothing, dr("usuarioGenera"))
                    NewItem.USUARIORECIBE = IIf(Convert.IsDBNull(dr("usuarioRecibe")), Nothing, dr("usuarioRecibe"))
                    NewItem.FECHARECEPCION = IIf(Convert.IsDBNull(dr("fechaRecepcion")), Nothing, dr("fechaRecepcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKENTRANSITO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKENTRANSITO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.STKENTRANSITO) As Boolean

            Try
                _commandText = "_stkEnTransito_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE.CODEMP)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkEnTransito_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.STKENTRANSITO) As Boolean

            Try
                _commandText = "_stkEnTransito_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE.CODEMP)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VcantOriginal As New SqlParameter("@cantOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTORIGINAL)
                Dim VcantRecibida As New SqlParameter("@cantRecibida", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTRECIBIDA)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VusuarioGenera As New SqlParameter("@usuarioGenera", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOGENERA)
                Dim VusuarioRecibe As New SqlParameter("@usuarioRecibe", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIORECIBE)
                Dim VfechaRecepcion As New SqlParameter("@fechaRecepcion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHARECEPCION = Date.MinValue, Nothing, Item.FECHARECEPCION))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vcomprobante, VnroItem, VcantOriginal, VcantRecibida, VuniMed, Vestado_id, VusuarioGenera, VusuarioRecibe, VfechaRecepcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.STKENTRANSITO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : lunes, 31 de octubre de 2016
        ''' </summary>
        ''' <remarks> Represents STKENTRANSITO single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.STKENTRANSITO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKENTRANSITO
        ''' Fecha de Creación  : lunes, 31 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKENTRANSITO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const NROITEM As String = "NROITEM"
            Public Const CANTORIGINAL As String = "CANTORIGINAL"
            Public Const CANTRECIBIDA As String = "CANTRECIBIDA"
            Public Const UNIMED As String = "UNIMED"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const USUARIOGENERA As String = "USUARIOGENERA"
            Public Const USUARIORECIBE As String = "USUARIORECIBE"
            Public Const FECHARECEPCION As String = "FECHARECEPCION"
        End Class ' ColumnNames
    End Class ' STKENTRANSITO


    Public Class STKINVENTARIO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum

            articulo_id
            deposito_id
            sector_id
            uniMed
            cantidad
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.STKINVENTARIO)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.STKINVENTARIO) As Entities.Joins.STKINVENTARIO

            Try
                _commandText = "_STKINVENTARIO_ADD"

                Dim vPKarticulo_id As New SQLParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.articulo_id)
                Dim VPKdeposito_id As New SQLParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.deposito_id.codEmp)
                Dim VPKsector_id As New SQLParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sector_id.codEmp)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim Vcantidad As New SQLParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidad)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKarticulo_id, VPKdeposito_id, VPKsector_id, VuniMed, Vcantidad, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then

                    Item.articulo_id = vPKarticulo_id.Value
                    Item.deposito_id = vPKdeposito_id.Value
                    Item.sector_id = vPKsector_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.STKINVENTARIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkInventario_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    Try

                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    Try
                        Dim result As New DAL.Tables.STKSECTOR
                        result.WhereParameter.Add(DAL.Tables.STKSECTOR.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("deposito_id")), Nothing, dr("deposito_id")))
                        NewItem.DEPOSITO_ID = CType(result.Items(0), Entities.Tables.STKSECTOR)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Tables.STKSECTOR
                        result.WhereParameter.Add(DAL.Tables.STKSECTOR.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("sector_id")), Nothing, dr("sector_id")))
                        NewItem.SECTOR_ID = CType(result.Items(0), Entities.Tables.STKSECTOR)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKINVENTARIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKINVENTARIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.STKINVENTARIO) As Boolean

            Try
                _commandText = "_stkInventario_REMOVE"

                Dim Varticulo_id As New SQLParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.articulo_id)
                Dim Vdeposito_id As New SQLParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.deposito_id.CODEMP)
                Dim Vsector_id As New SQLParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sector_id.CODEMP)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {Varticulo_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkInventario_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.STKINVENTARIO) As Boolean

            Try
                _commandText = "_stkInventario_UPDATE"


                Dim Varticulo_id As New SQLParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.articulo_id)
                Dim Vdeposito_id As New SQLParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.deposito_id.codEmp)
                Dim Vsector_id As New SQLParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sector_id.codEmp)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim Vcantidad As New SQLParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidad)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Varticulo_id, Vdeposito_id, Vsector_id, VuniMed, Vcantidad, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.STKINVENTARIO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : viernes, 25 de septiembre de 2015
        ''' </summary>
        ''' <remarks> Represents STKINVENTARIO single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.STKINVENTARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKINVENTARIO
        ''' Fecha de Creación  : viernes, 25 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKINVENTARIO. </remarks>
        Public Class ColumnNames

            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const DEPOSITO_ID As String = "DEPOSITO_ID"
            Public Const SECTOR_ID As String = "SECTOR_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
        End Class ' ColumnNames
    End Class ' STKINVENTARIO


    Public Class STKMOVIOC
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmpStk
            comprobanteStk
            nroItemStk
            codEmp
            ordenCompra_id
            nroItem
            uniMed
            cantOriginal
            cantIngresada
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.STKMOVIOC)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.STKMOVIOC) As Entities.Joins.STKMOVIOC

            Try
                _commandText = "_STKMOVIOC_ADD"
                Dim VPKcodEmpStk As New SQLParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpStk.codEmp)
                Dim VPKcomprobanteStk As New SQLParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobanteStk.codEmp)
                Dim VPKnroItemStk As New SQLParameter("@nroItemStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItemStk.codEmp)
                Dim VPKcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp.codEmp)
                Dim VPKordenCompra_id As New SQLParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ordenCompra_id.codEmp)
                Dim VPKnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem.codEmp)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim VcantOriginal As New SQLParameter("@cantOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantOriginal)
                Dim VcantIngresada As New SQLParameter("@cantIngresada", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantIngresada)
                Dim VremSucursal As New SqlParameter("@remSucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RemSucursal)
                Dim VremComprobante As New SqlParameter("@remComprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RemComprobante)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKcodEmpStk, VPKcomprobanteStk, VPKnroItemStk, VPKcodEmp, VPKordenCompra_id, VPKnroItem, VuniMed, VcantOriginal, VcantIngresada, VremSucursal, VremComprobante, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.codEmpStk = vPKcodEmpStk.Value
                    Item.comprobanteStk = vPKcomprobanteStk.Value
                    Item.nroItemStk = vPKnroItemStk.Value
                    Item.codEmp = vPKcodEmp.Value
                    Item.ordenCompra_id = vPKordenCompra_id.Value
                    Item.nroItem = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.STKMOVIOC)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkMoviOC_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    Try
                        Dim result As New DAL.Joins.STKMOVIMIENTOITEM
                        result.WhereParameter.Add(DAL.Joins.STKMOVIMIENTOITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("codEmpStk")), Nothing, dr("codEmpStk")))
                        NewItem.CODEMPSTK = CType(result.Items(0), Entities.Joins.STKMOVIMIENTOITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.STKMOVIMIENTOITEM
                        result.WhereParameter.Add(DAL.Joins.STKMOVIMIENTOITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("comprobanteStk")), Nothing, dr("comprobanteStk")))
                        NewItem.COMPROBANTESTK = CType(result.Items(0), Entities.Joins.STKMOVIMIENTOITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.STKMOVIMIENTOITEM
                        result.WhereParameter.Add(DAL.Joins.STKMOVIMIENTOITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("nroItemStk")), Nothing, dr("nroItemStk")))
                        NewItem.NROITEMSTK = CType(result.Items(0), Entities.Joins.STKMOVIMIENTOITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.COMORDENCOMPRAITEM
                        result.WhereParameter.Add(DAL.Joins.COMORDENCOMPRAITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp")))
                        NewItem.CODEMP = CType(result.Items(0), Entities.Joins.COMORDENCOMPRAITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.COMORDENCOMPRAITEM
                        result.WhereParameter.Add(DAL.Joins.COMORDENCOMPRAITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id")))
                        NewItem.ORDENCOMPRA_ID = CType(result.Items(0), Entities.Joins.COMORDENCOMPRAITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.COMORDENCOMPRAITEM
                        result.WhereParameter.Add(DAL.Joins.COMORDENCOMPRAITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem")))
                        NewItem.NROITEM = CType(result.Items(0), Entities.Joins.COMORDENCOMPRAITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantOriginal = IIf(Convert.IsDBNull(dr("cantOriginal")), Nothing, dr("cantOriginal"))
                    NewItem.cantIngresada = IIf(Convert.IsDBNull(dr("cantIngresada")), Nothing, dr("cantIngresada"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIOC")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIOC")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.STKMOVIOC) As Boolean

            Try
                _commandText = "_stkMoviOC_REMOVE"
                Dim VcodEmpStk As New SQLParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpStk.CODEMP)
                Dim VcomprobanteStk As New SQLParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobanteStk.CODEMP)
                Dim VnroItemStk As New SQLParameter("@nroItemStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItemStk.CODEMP)
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp.CODEMP)
                Dim VordenCompra_id As New SQLParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ordenCompra_id.CODEMP)
                Dim VnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem.CODEMP)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkMoviOC_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.STKMOVIOC) As Boolean

            Try
                _commandText = "_stkMoviOC_UPDATE"

                Dim VcodEmpStk As New SQLParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpStk.codEmp)
                Dim VcomprobanteStk As New SQLParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobanteStk.codEmp)
                Dim VnroItemStk As New SQLParameter("@nroItemStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItemStk.codEmp)
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp.codEmp)
                Dim VordenCompra_id As New SQLParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ordenCompra_id.codEmp)
                Dim VnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem.codEmp)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim VcantOriginal As New SQLParameter("@cantOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantOriginal)
                Dim VcantIngresada As New SQLParameter("@cantIngresada", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantIngresada)
                Dim VremSucursal As New SqlParameter("@remSucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RemSucursal)
                Dim VremComprobante As New SqlParameter("@remComprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RemComprobante)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmpStk, VcomprobanteStk, VnroItemStk, VcodEmp, VordenCompra_id, VnroItem, VuniMed, VcantOriginal, VcantIngresada, VremSucursal, VremComprobante, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.STKMOVIOC)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : lunes, 19 de octubre de 2015
        ''' </summary>
        ''' <remarks> Represents STKMOVIOC single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.STKMOVIOC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKMOVIOC
        ''' Fecha de Creación  : lunes, 19 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKMOVIOC. </remarks>
        Public Class ColumnNames
            Public Const CODEMPSTK As String = "CODEMPSTK"
            Public Const COMPROBANTESTK As String = "COMPROBANTESTK"
            Public Const NROITEMSTK As String = "NROITEMSTK"
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTORIGINAL As String = "CANTORIGINAL"
            Public Const CANTINGRESADA As String = "CANTINGRESADA"
            Public Const REMSUCURSAL As String = "REMSUCURSAL"
            Public Const REMCOMPROBANTE As String = "REMCOMPROBANTE"
        End Class ' ColumnNames
    End Class ' STKMOVIOC


    Public Class STKREMITO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            sucursal
            comprobante
            letra
            fecha
            codEmpStk
            comprobanteStk
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.STKREMITO)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.STKREMITO) As Entities.Joins.STKREMITO

            Try
                _commandText = "_STKREMITO_ADD"
                Dim vPKcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim vPKsucursal As New SQLParameter("@sucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sucursal)
                Dim vPKcomprobante As New SQLParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobante)
                Dim vPKletra As New SQLParameter("@letra", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.letra)
                Dim Vfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.minvalue, Nothing, Item.fecha))
                Dim VPKcodEmpStk As New SQLParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpStk.codEmp)
                Dim VPKcomprobanteStk As New SQLParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobanteStk.codEmp)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKcodEmp, vPKsucursal, vPKcomprobante, vPKletra, Vfecha, VPKcodEmpStk, VPKcomprobanteStk, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.codEmp = vPKcodEmp.Value
                    Item.sucursal = vPKsucursal.Value
                    Item.comprobante = vPKcomprobante.Value
                    Item.letra = vPKletra.Value
                    Item.CODEMPSTK = VPKcodEmpStk.Value
                    Item.COMPROBANTESTK = VPKcomprobanteStk.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.STKREMITO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkRemito_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.sucursal = IIf(Convert.IsDBNull(dr("sucursal")), Nothing, dr("sucursal"))
                    NewItem.comprobante = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    NewItem.letra = IIf(Convert.IsDBNull(dr("letra")), Nothing, dr("letra"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    Try
                        Dim result As New DAL.Joins.STKMOVIMIENTO
                        result.WhereParameter.Add(DAL.Joins.STKMOVIMIENTO.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("codEmpStk")), Nothing, dr("codEmpStk")))
                        NewItem.CODEMPSTK = CType(result.Items(0), Entities.Joins.STKMOVIMIENTO)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.STKMOVIMIENTO
                        result.WhereParameter.Add(DAL.Joins.STKMOVIMIENTO.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("comprobanteStk")), Nothing, dr("comprobanteStk")))
                        NewItem.COMPROBANTESTK = CType(result.Items(0), Entities.Joins.STKMOVIMIENTO)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKREMITO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKREMITO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.STKREMITO) As Boolean

            Try
                _commandText = "_stkRemito_REMOVE"
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim Vsucursal As New SQLParameter("@sucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sucursal)
                Dim Vcomprobante As New SQLParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobante)
                Dim Vletra As New SQLParameter("@letra", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.letra)
                Dim VcodEmpStk As New SQLParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpStk.CODEMP)
                Dim VcomprobanteStk As New SQLParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobanteStk.CODEMP)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VcodEmp, Vsucursal, Vcomprobante, Vletra, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkRemito_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.STKREMITO) As Boolean

            Try
                _commandText = "_stkRemito_UPDATE"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim Vsucursal As New SQLParameter("@sucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sucursal)
                Dim Vcomprobante As New SQLParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobante)
                Dim Vletra As New SQLParameter("@letra", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.letra)
                Dim Vfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.minvalue, Nothing, Item.fecha))
                Dim VcodEmpStk As New SQLParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpStk.codEmp)
                Dim VcomprobanteStk As New SQLParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobanteStk.codEmp)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {VcodEmp, Vsucursal, Vcomprobante, Vletra, Vfecha, VcodEmpStk, VcomprobanteStk, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.STKREMITO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : miércoles, 02 de septiembre de 2015
        ''' </summary>
        ''' <remarks> Represents STKREMITO single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.STKREMITO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKREMITO
        ''' Fecha de Creación  : miércoles, 02 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKREMITO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const SUCURSAL As String = "SUCURSAL"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const LETRA As String = "LETRA"
            Public Const FECHA As String = "FECHA"
            Public Const CODEMPSTK As String = "CODEMPSTK"
            Public Const COMPROBANTESTK As String = "COMPROBANTESTK"
        End Class ' ColumnNames
    End Class ' STKREMITO

    Public Class STKMOVIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            comprobante
            tipoMov_id
            subTipoMov_id
            fechaMov
            depositoOrigen_id
            sectorOrigen_id
            depositoDestino_id
            sectorDestino_id
            usuario
            anulado
            obs
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.STKMOVIMIENTO)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.STKMOVIMIENTO) As Entities.Joins.STKMOVIMIENTO

            Try
                _commandText = "_STKMOVIMIENTO_ADD"
                Dim VPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VPKcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim VPKtipoMov_id As New SqlParameter("@tipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOMOV_ID.TIPOMOV_ID)
                Dim VPKsubTipoMov_id As New SqlParameter("@subTipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUBTIPOMOV_ID.SUBTIPOMOV_ID)
                Dim VfechaMov As New SqlParameter("@fechaMov", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMOV = Date.MinValue, Nothing, Item.FECHAMOV))
                Dim VdepositoOrigen_id As New SqlParameter("@depositoOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITOORIGEN_ID)
                Dim VsectorOrigen_id As New SqlParameter("@sectorOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORORIGEN_ID)
                Dim VdepositoDestino_id As New SqlParameter("@depositoDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITODESTINO_ID)
                Dim VsectorDestino_id As New SqlParameter("@sectorDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORDESTINO_ID)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim Vanulado As New SqlParameter("@anulado", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ANULADO)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKcodEmp, VPKcomprobante, VPKtipoMov_id, VPKsubTipoMov_id, VfechaMov, VdepositoOrigen_id, VsectorOrigen_id, VdepositoDestino_id, VsectorDestino_id, Vusuario, Vanulado, Vobs, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = VPKcodEmp.Value
                    Item.COMPROBANTE = VPKcomprobante.Value
                    Item.TIPOMOV_ID = VPKtipoMov_id.Value
                    Item.SUBTIPOMOV_ID = VPKsubTipoMov_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.STKMOVIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkMovimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.COMPROBANTE = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    Try
                        Dim result As New DAL.Tables.STKTIPOMOV
                        result.WhereParameter.Add(DAL.Tables.STKTIPOMOV.ColumnEnum.tipoMov_id, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("tipoMov_id")), Nothing, dr("tipoMov_id")))
                        NewItem.TIPOMOV_ID = CType(result.Items(0), Entities.Tables.STKTIPOMOV)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Tables.STKSUBTIPOMOV
                        result.WhereParameter.Add(DAL.Tables.STKSUBTIPOMOV.ColumnEnum.subTipoMov_id, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("subTipoMov_id")), Nothing, dr("subTipoMov_id")))
                        NewItem.SUBTIPOMOV_ID = CType(result.Items(0), Entities.Tables.STKSUBTIPOMOV)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.FECHAMOV = IIf(Convert.IsDBNull(dr("fechaMov")), Nothing, dr("fechaMov"))
                    NewItem.DEPOSITOORIGEN_ID = IIf(Convert.IsDBNull(dr("depositoOrigen_id")), Nothing, dr("depositoOrigen_id"))
                    NewItem.SECTORORIGEN_ID = IIf(Convert.IsDBNull(dr("sectorOrigen_id")), Nothing, dr("sectorOrigen_id"))
                    NewItem.DEPOSITODESTINO_ID = IIf(Convert.IsDBNull(dr("depositoDestino_id")), Nothing, dr("depositoDestino_id"))
                    NewItem.SECTORDESTINO_ID = IIf(Convert.IsDBNull(dr("sectorDestino_id")), Nothing, dr("sectorDestino_id"))
                    NewItem.USUARIO = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.ANULADO = IIf(Convert.IsDBNull(dr("anulado")), Nothing, dr("anulado"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.STKMOVIMIENTO) As Boolean

            Try
                _commandText = "_stkMovimiento_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim VtipoMov_id As New SqlParameter("@tipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOMOV_ID.TIPOMOV_ID)
                Dim VsubTipoMov_id As New SqlParameter("@subTipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUBTIPOMOV_ID.SUBTIPOMOV_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkMovimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.STKMOVIMIENTO) As Boolean

            Try
                _commandText = "_stkMovimiento_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim VtipoMov_id As New SqlParameter("@tipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOMOV_ID.TIPOMOV_ID)
                Dim VsubTipoMov_id As New SqlParameter("@subTipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUBTIPOMOV_ID.SUBTIPOMOV_ID)
                Dim VfechaMov As New SqlParameter("@fechaMov", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMOV = Date.MinValue, Nothing, Item.FECHAMOV))
                Dim VdepositoOrigen_id As New SqlParameter("@depositoOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITOORIGEN_ID)
                Dim VsectorOrigen_id As New SqlParameter("@sectorOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORORIGEN_ID)
                Dim VdepositoDestino_id As New SqlParameter("@depositoDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITODESTINO_ID)
                Dim VsectorDestino_id As New SqlParameter("@sectorDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORDESTINO_ID)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim Vanulado As New SqlParameter("@anulado", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ANULADO)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vcomprobante, VtipoMov_id, VsubTipoMov_id, VfechaMov, VdepositoOrigen_id, VsectorOrigen_id, VdepositoDestino_id, VsectorDestino_id, Vusuario, Vanulado, Vobs, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.STKMOVIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : lunes, 31 de octubre de 2016
        ''' </summary>
        ''' <remarks> Represents STKMOVIMIENTO single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.STKMOVIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKMOVIMIENTO
        ''' Fecha de Creación  : lunes, 31 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKMOVIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const TIPOMOV_ID As String = "TIPOMOV_ID"
            Public Const SUBTIPOMOV_ID As String = "SUBTIPOMOV_ID"
            Public Const FECHAMOV As String = "FECHAMOV"
            Public Const DEPOSITOORIGEN_ID As String = "DEPOSITOORIGEN_ID"
            Public Const SECTORORIGEN_ID As String = "SECTORORIGEN_ID"
            Public Const DEPOSITODESTINO_ID As String = "DEPOSITODESTINO_ID"
            Public Const SECTORDESTINO_ID As String = "SECTORDESTINO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const ANULADO As String = "ANULADO"
            Public Const OBS As String = "OBS"
        End Class ' ColumnNames
    End Class ' STKMOVIMIENTO
    Public Class STKMOVIMIENTOITEM
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            comprobante
            nroItem
            articulo_id
            uniMed
            cantidad
            costoUni
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.STKMOVIMIENTOITEM)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.STKMOVIMIENTOITEM) As Entities.Joins.STKMOVIMIENTOITEM

            Try
                _commandText = "_STKMOVIMIENTOITEM_ADD"
                Dim VPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP.CODEMP)
                Dim VPKcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE.CODEMP)
                Dim VPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VcostoUni As New SqlParameter("@costoUni", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COSTOUNI)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKcodEmp, VPKcomprobante, VPKnroItem, Varticulo_id, VuniMed, Vcantidad, VcostoUni, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = VPKcodEmp.Value
                    Item.COMPROBANTE = VPKcomprobante.Value
                    Item.NROITEM = VPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.STKMOVIMIENTOITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkMovimientoItem_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    Try
                        Dim result As New DAL.Joins.STKMOVIMIENTO
                        result.WhereParameter.Add(DAL.Joins.STKMOVIMIENTO.ColumnEnum.codEmp, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp")))
                        NewItem.CODEMP = CType(result.Items(0), Entities.Joins.STKMOVIMIENTO)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.STKMOVIMIENTO
                        result.WhereParameter.Add(DAL.Joins.STKMOVIMIENTO.ColumnEnum.codEmp, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante")))
                        NewItem.COMPROBANTE = CType(result.Items(0), Entities.Joins.STKMOVIMIENTO)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.COSTOUNI = IIf(Convert.IsDBNull(dr("costoUni")), Nothing, dr("costoUni"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIMIENTOITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIMIENTOITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.STKMOVIMIENTOITEM) As Boolean

            Try
                _commandText = "_stkMovimientoItem_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE.CODEMP)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkMovimientoItem_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.STKMOVIMIENTOITEM) As Boolean

            Try
                _commandText = "_stkMovimientoItem_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE.CODEMP)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VcostoUni As New SqlParameter("@costoUni", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COSTOUNI)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vcomprobante, VnroItem, Varticulo_id, VuniMed, Vcantidad, VcostoUni, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.STKMOVIMIENTOITEM)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : lunes, 31 de octubre de 2016
        ''' </summary>
        ''' <remarks> Represents STKMOVIMIENTOITEM single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.STKMOVIMIENTOITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKMOVIMIENTOITEM
        ''' Fecha de Creación  : lunes, 31 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKMOVIMIENTOITEM. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const NROITEM As String = "NROITEM"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const COSTOUNI As String = "COSTOUNI"
        End Class ' ColumnNames
    End Class ' STKMOVIMIENTOITEM

    Public Class COMREQUERIMIENTOBIONEXO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            requerimiento_id
            nroItem
            nroSolicitud
            cantidad
            fecha
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.COMREQUERIMIENTOBIONEXO)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.COMREQUERIMIENTOBIONEXO) As Entities.Joins.COMREQUERIMIENTOBIONEXO

            Try
                _commandText = "_COMREQUERIMIENTOBIONEXO_ADD"
                Dim VPKcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp.codEmp)
                Dim VPKrequerimiento_id As New SQLParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.requerimiento_id.codEmp)
                Dim VPKnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem.codEmp)
                Dim vPKnroSolicitud As New SQLParameter("@nroSolicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroSolicitud)
                Dim Vcantidad As New SQLParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidad)
                Dim Vfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.minvalue, Nothing, Item.fecha))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKcodEmp, vPKrequerimiento_id, vPKnroItem, vPKnroSolicitud, Vcantidad, Vfecha, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.codEmp = vPKcodEmp.Value
                    Item.requerimiento_id = vPKrequerimiento_id.Value
                    Item.nroItem = vPKnroItem.Value
                    Item.nroSolicitud = vPKnroSolicitud.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.COMREQUERIMIENTOBIONEXO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comRequerimientoBionexo_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    Try
                        Dim result As New DAL.Joins.COMREQUERIMIENTOITEM
                        result.WhereParameter.Add(DAL.Joins.COMREQUERIMIENTOITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp")))
                        NewItem.CODEMP = CType(result.Items(0), Entities.Joins.COMREQUERIMIENTOITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.COMREQUERIMIENTOITEM
                        result.WhereParameter.Add(DAL.Joins.COMREQUERIMIENTOITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id")))
                        NewItem.REQUERIMIENTO_ID = CType(result.Items(0), Entities.Joins.COMREQUERIMIENTOITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    Try
                        Dim result As New DAL.Joins.COMREQUERIMIENTOITEM
                        result.WhereParameter.Add(DAL.Joins.COMREQUERIMIENTOITEM.ColumnEnum.CODEMP, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem")))
                        NewItem.NROITEM = CType(result.Items(0), Entities.Joins.COMREQUERIMIENTOITEM)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.nroSolicitud = IIf(Convert.IsDBNull(dr("nroSolicitud")), Nothing, dr("nroSolicitud"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOBIONEXO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOBIONEXO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.COMREQUERIMIENTOBIONEXO) As Boolean

            Try
                _commandText = "_comRequerimientoBionexo_REMOVE"
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp.CODEMP)
                Dim Vrequerimiento_id As New SQLParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.requerimiento_id.CODEMP)
                Dim VnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem.CODEMP)
                Dim VnroSolicitud As New SQLParameter("@nroSolicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroSolicitud)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VnroSolicitud, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comRequerimientoBionexo_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.COMREQUERIMIENTOBIONEXO) As Boolean

            Try
                _commandText = "_comRequerimientoBionexo_UPDATE"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp.codEmp)
                Dim Vrequerimiento_id As New SQLParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.requerimiento_id.codEmp)
                Dim VnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem.codEmp)
                Dim VnroSolicitud As New SQLParameter("@nroSolicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroSolicitud)
                Dim Vcantidad As New SQLParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidad)
                Dim Vfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.minvalue, Nothing, Item.fecha))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {VcodEmp, Vrequerimiento_id, VnroItem, VnroSolicitud, Vcantidad, Vfecha, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.COMREQUERIMIENTOBIONEXO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : miércoles, 28 de octubre de 2015
        ''' </summary>
        ''' <remarks> Represents COMREQUERIMIENTOBIONEXO single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.COMREQUERIMIENTOBIONEXO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMREQUERIMIENTOBIONEXO
        ''' Fecha de Creación  : miércoles, 28 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMREQUERIMIENTOBIONEXO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const NROSOLICITUD As String = "NROSOLICITUD"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const FECHA As String = "FECHA"
        End Class ' ColumnNames
    End Class ' COMREQUERIMIENTOBIONEXO

    Public Class COMCUENTAUSUARIO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Usuario
            agr_codigo
            com_valor
            cta_nrocta
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.COMCUENTAUSUARIO)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.COMCUENTAUSUARIO) As Entities.Joins.COMCUENTAUSUARIO

            Try
                _commandText = "_COMCUENTAUSUARIO_ADD"
                Dim VPKId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO.ID_USUARIO)
                Dim vPKagr_codigo As New SqlParameter("@agr_codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.AGR_CODIGO)
                Dim vPKcom_valor As New SqlParameter("@com_valor", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COM_VALOR)
                Dim vPKcta_nrocta As New SqlParameter("@cta_nrocta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CTA_NROCTA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKId_Usuario, vPKagr_codigo, vPKcom_valor, vPKcta_nrocta, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_USUARIO = VPKId_Usuario.Value
                    Item.AGR_CODIGO = vPKagr_codigo.Value
                    Item.COM_VALOR = vPKcom_valor.Value
                    Item.CTA_NROCTA = vPKcta_nrocta.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.COMCUENTAUSUARIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comCuentaUsuario_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    Try
                        Dim result As New DAL.Joins.TBL_USUARIOS
                        result.WhereParameter.Add(DAL.Joins.TBL_USUARIOS.ColumnEnum.Id_Usuario, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario")))
                        NewItem.ID_USUARIO = CType(result.Items(0), Entities.Joins.TBL_USUARIOS)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.AGR_CODIGO = IIf(Convert.IsDBNull(dr("agr_codigo")), Nothing, dr("agr_codigo"))
                    NewItem.COM_VALOR = IIf(Convert.IsDBNull(dr("com_valor")), Nothing, dr("com_valor"))
                    NewItem.CTA_NROCTA = IIf(Convert.IsDBNull(dr("cta_nrocta")), Nothing, dr("cta_nrocta"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMCUENTAUSUARIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMCUENTAUSUARIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.COMCUENTAUSUARIO) As Boolean

            Try
                _commandText = "_comCuentaUsuario_REMOVE"
                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO.ID_USUARIO)
                Dim Vagr_codigo As New SqlParameter("@agr_codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.AGR_CODIGO)
                Dim Vcom_valor As New SqlParameter("@com_valor", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COM_VALOR)
                Dim Vcta_nrocta As New SqlParameter("@cta_nrocta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CTA_NROCTA)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vagr_codigo, Vcom_valor, Vcta_nrocta, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comCuentaUsuario_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.COMCUENTAUSUARIO) As Boolean

            Try
                _commandText = "_comCuentaUsuario_UPDATE"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO.ID_USUARIO)
                Dim Vagr_codigo As New SqlParameter("@agr_codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.AGR_CODIGO)
                Dim Vcom_valor As New SqlParameter("@com_valor", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COM_VALOR)
                Dim Vcta_nrocta As New SqlParameter("@cta_nrocta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CTA_NROCTA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_Usuario, Vagr_codigo, Vcom_valor, Vcta_nrocta, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.COMCUENTAUSUARIO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : lunes, 25 de julio de 2016
        ''' </summary>
        ''' <remarks> Represents COMCUENTAUSUARIO single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.COMCUENTAUSUARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMCUENTAUSUARIO
        ''' Fecha de Creación  : lunes, 25 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMCUENTAUSUARIO. </remarks>
        Public Class ColumnNames
            Public Const ID_USUARIO As String = "ID_USUARIO"
            Public Const AGR_CODIGO As String = "AGR_CODIGO"
            Public Const COM_VALOR As String = "COM_VALOR"
            Public Const CTA_NROCTA As String = "CTA_NROCTA"
        End Class ' ColumnNames
    End Class ' COMCUENTAUSUARIO
End Namespace 'Joins 

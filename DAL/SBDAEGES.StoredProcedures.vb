
Imports System.Collections.Generic
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient
Imports Solar.DataHelper

Namespace Procedures

    Public Class _EXISTEHISTORIAL
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._EXISTEHISTORIAL)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fecha As DateTime, ByVal codemp As String) As List(Of Entities.Procedures._EXISTEHISTORIAL)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_EXISTEHISTORIAL"

                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fecha)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {Vfecha, VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._EXISTEHISTORIAL
                    NewItem.Mes = IIf(Convert.IsDBNull(dr("Mes")), Nothing, dr("Mes"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._EXISTEHISTORIAL)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._EXISTEHISTORIAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _EXISTEHISTORIAL
        ''' Fecha de Creación  : miércoles, 9 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla _EXISTEHISTORIAL. </remarks>
        Public Class ColumnNames
            Public Const MES As String = "MES"
        End Class ' ColumnNames
    End Class

    Public Class H_ACTUALIZAHISTORIALCOMPRAS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Actualizar(ByVal anio As Int32, ByVal mes As Int32, ByVal codemp As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "H_ACTUALIZAHISTORIALCOMPRAS"

                Dim VAnio As New SqlParameter("@Anio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, anio)
                Dim VMes As New SqlParameter("@Mes", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, mes)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VAnio, VMes, VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.H_ACTUALIZAHISTORIALCOMPRAS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla H_ACTUALIZAHISTORIALCOMPRAS
        ''' Fecha de Creación  : martes, 8 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla H_ACTUALIZAHISTORIALCOMPRAS. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class H_GENERAHISTORIALIMPUTACIONCOMPRAS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 5000
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Generar(ByVal fechadesde As DateTime, ByVal fechahasta As DateTime, ByVal porcdistrven As Double, ByVal Empresa As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "H_GENERAHISTORIALIMPUTACIONCOMPRAS"

                Dim VfechaDesde As New SqlParameter("@fechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VfechaHasta As New SqlParameter("@fechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim VPorcDistrVen As New SqlParameter("@PorcDistrVen", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, porcdistrven)
                Dim VEmpresa As New SqlParameter("@Empresa", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Empresa)
                Dim params() As SqlParameter = {VfechaDesde, VfechaHasta, VPorcDistrVen, VEmpresa}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.H_GENERAHISTORIALIMPUTACIONCOMPRAS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla H_GENERAHISTORIALIMPUTACIONCOMPRAS
        ''' Fecha de Creación  : jueves, 02 de octubre de 2014
        ''' <remarks> Representa los Nombres de Columnas de la tabla H_GENERAHISTORIALIMPUTACIONCOMPRAS. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class _H_FACTURAS_PROVEED_DISPONIBLES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Protected _itemList As New List(Of Entities.Procedures._H_FACTURAS_PROVEED_DISPONIBLES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codproveed As String, ByVal fechadesde As DateTime, ByVal fechahasta As DateTime) As List(Of Entities.Procedures._H_FACTURAS_PROVEED_DISPONIBLES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_H_FACTURAS_PROVEED_DISPONIBLES"

                Dim VCodProveed As New SqlParameter("@CodProveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codproveed)
                Dim VFechaDesde As New SqlParameter("@FechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VFechaHasta As New SqlParameter("@FechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim params() As SqlParameter = {VCodProveed, VFechaDesde, VFechaHasta}
                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._H_FACTURAS_PROVEED_DISPONIBLES
                    NewItem.scc_femision = IIf(Convert.IsDBNull(dr("scc_FEmision")), Nothing, dr("scc_FEmision"))
                    NewItem.spctco_cod = IIf(Convert.IsDBNull(dr("spctco_Cod")), Nothing, dr("spctco_Cod"))
                    NewItem.spc_letra = IIf(Convert.IsDBNull(dr("spc_Letra")), Nothing, dr("spc_Letra"))
                    NewItem.spc_codpvt = IIf(Convert.IsDBNull(dr("spc_CodPvt")), Nothing, dr("spc_CodPvt"))
                    NewItem.spc_nro = IIf(Convert.IsDBNull(dr("spc_Nro")), Nothing, dr("spc_Nro"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._H_FACTURAS_PROVEED_DISPONIBLES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._H_FACTURAS_PROVEED_DISPONIBLES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _H_FACTURAS_PROVEED_DISPONIBLES
        ''' Fecha de Creación  : viernes, 20 de febrero de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _H_FACTURAS_PROVEED_DISPONIBLES. </remarks>
        Public Class ColumnNames
            Public Const SCC_FEMISION As String = "SCC_FEMISION"
            Public Const SPCTCO_COD As String = "SPCTCO_COD"
            Public Const SPC_LETRA As String = "SPC_LETRA"
            Public Const SPC_CODPVT As String = "SPC_CODPVT"
            Public Const SPC_NRO As String = "SPC_NRO"
        End Class ' ColumnNames
    End Class

    Public Class _H_INGRESAUNIDADESFACTURA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fechaalta As DateTime, ByVal sccpro_cod As String, ByVal spctco_cod As String, ByVal spc_letra As String, ByVal spc_codpvt As String, ByVal spc_nro As String, ByVal sdcart_codgen As String, ByVal sdc_nreng As Int16, ByVal sdc_desc As String, ByVal sdcume_cod1 As String, ByVal sdc_cantum1 As Double, ByVal cantidad As Double, ByVal sdcstp_partida As String, ByVal fechamod As DateTime, ByVal art_codbarras As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_H_INGRESAUNIDADESFACTURA"

                Dim VFechaAlta As New SQLParameter("@FechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechaalta)
                Dim Vsccpro_Cod As New SQLParameter("@sccpro_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sccpro_cod)
                Dim Vspctco_Cod As New SQLParameter("@spctco_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spctco_cod)
                Dim Vspc_Letra As New SQLParameter("@spc_Letra", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spc_letra)
                Dim Vspc_CodPvt As New SQLParameter("@spc_CodPvt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spc_codpvt)
                Dim Vspc_Nro As New SQLParameter("@spc_Nro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spc_nro)
                Dim Vsdcart_CodGen As New SQLParameter("@sdcart_CodGen", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sdcart_codgen)
                Dim Vsdc_NReng As New SQLParameter("@sdc_NReng", SqlDbType.SmallInt, 5, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sdc_nreng)
                Dim Vsdc_Desc As New SQLParameter("@sdc_Desc", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sdc_desc)
                Dim Vsdcume_Cod1 As New SQLParameter("@sdcume_Cod1", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sdcume_cod1)
                Dim Vsdc_CantUM1 As New SQLParameter("@sdc_CantUM1", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sdc_cantum1)
                Dim VCantidad As New SQLParameter("@Cantidad", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cantidad)
                Dim Vsdcstp_Partida As New SQLParameter("@sdcstp_Partida", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sdcstp_partida)
                Dim VFechaMod As New SQLParameter("@FechaMod", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechamod)
                Dim Vart_CodBarras As New SQLParameter("@art_CodBarras", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, art_codbarras)
                Dim params() As SQLParameter = {VFechaAlta, Vsccpro_Cod, Vspctco_Cod, Vspc_Letra, Vspc_CodPvt, Vspc_Nro, Vsdcart_CodGen, Vsdc_NReng, Vsdc_Desc, Vsdcume_Cod1, Vsdc_CantUM1, VCantidad, Vsdcstp_Partida, VFechaMod, Vart_CodBarras}
                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._H_INGRESAUNIDADESFACTURA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _H_INGRESAUNIDADESFACTURA
        ''' Fecha de Creación  : viernes, 20 de febrero de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _H_INGRESAUNIDADESFACTURA. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class _H_MODIFICAUNIDADES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal spctco_cod As String, ByVal spc_letra As String, ByVal spc_codpvt As String, ByVal spc_nro As String, ByVal sccpro_cod As String, ByVal sdc_nreng As Int16, ByVal cantidad As Double) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_H_MODIFICAUNIDADES"

                Dim Vspctco_Cod As New SQLParameter("@spctco_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spctco_cod)
                Dim Vspc_Letra As New SQLParameter("@spc_Letra", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spc_letra)
                Dim Vspc_CodPvt As New SQLParameter("@spc_CodPvt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spc_codpvt)
                Dim Vspc_Nro As New SQLParameter("@spc_Nro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spc_nro)
                Dim Vsccpro_Cod As New SQLParameter("@sccpro_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sccpro_cod)
                Dim Vsdc_NReng As New SQLParameter("@sdc_NReng", SqlDbType.SmallInt, 5, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sdc_nreng)
                Dim VCantidad As New SQLParameter("@Cantidad", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cantidad)
                Dim params() As SQLParameter = {Vspctco_Cod, Vspc_Letra, Vspc_CodPvt, Vspc_Nro, Vsccpro_Cod, Vsdc_NReng, VCantidad}
                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._H_MODIFICAUNIDADES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _H_MODIFICAUNIDADES
        ''' Fecha de Creación  : viernes, 20 de febrero de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _H_MODIFICAUNIDADES. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class _H_PROVEEDORES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Protected _itemList As New List(Of Entities.Procedures._H_PROVEEDORES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal _codEmp As String) As List(Of Entities.Procedures._H_PROVEEDORES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_H_PROVEEDORES"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, _codEmp)
                Dim params() As SqlParameter = {VcodEmp}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._H_PROVEEDORES
                    NewItem.pro_cod = IIf(Convert.IsDBNull(dr("pro_Cod")), Nothing, dr("pro_Cod"))
                    NewItem.pro_razsoc = IIf(Convert.IsDBNull(dr("pro_RazSoc")), Nothing, dr("pro_RazSoc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._H_PROVEEDORES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._H_PROVEEDORES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _H_PROVEEDORES
        ''' Fecha de Creación  : viernes, 20 de febrero de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _H_PROVEEDORES. </remarks>
        Public Class ColumnNames
            Public Const PRO_COD As String = "PRO_COD"
            Public Const PRO_RAZSOC As String = "PRO_RAZSOC"
        End Class ' ColumnNames
    End Class

    Public Class _H_TRAEDETALLEFACTURA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Protected _itemList As New List(Of Entities.Procedures._H_TRAEDETALLEFACTURA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal spctco_cod As String, ByVal spc_letra As String, ByVal spc_codpvt As String, ByVal spc_nro As String, ByVal sccpro_cod As String) As List(Of Entities.Procedures._H_TRAEDETALLEFACTURA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_H_TRAEDETALLEFACTURA"

                Dim Vspctco_Cod As New SqlParameter("@spctco_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spctco_cod)
                Dim Vspc_Letra As New SqlParameter("@spc_Letra", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spc_letra)
                Dim Vspc_CodPvt As New SqlParameter("@spc_CodPvt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spc_codpvt)
                Dim Vspc_Nro As New SqlParameter("@spc_Nro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, spc_nro)
                Dim Vsccpro_Cod As New SqlParameter("@sccpro_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sccpro_cod)
                Dim params() As SqlParameter = {Vspctco_Cod, Vspc_Letra, Vspc_CodPvt, Vspc_Nro, Vsccpro_Cod}
                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._H_TRAEDETALLEFACTURA
                    NewItem.art_codbarras = IIf(Convert.IsDBNull(dr("art_CodBarras")), Nothing, dr("art_CodBarras"))
                    NewItem.sdcstp_partida = IIf(Convert.IsDBNull(dr("sdcstp_Partida")), Nothing, dr("sdcstp_Partida"))
                    NewItem.sdcart_codgen = IIf(Convert.IsDBNull(dr("sdcart_CodGen")), Nothing, dr("sdcart_CodGen"))
                    NewItem.sdc_nreng = IIf(Convert.IsDBNull(dr("sdc_NReng")), Nothing, dr("sdc_NReng"))
                    NewItem.sdc_desc = IIf(Convert.IsDBNull(dr("sdc_Desc")), Nothing, dr("sdc_Desc"))
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("UniMed")), Nothing, dr("UniMed"))
                    NewItem.cantum = IIf(Convert.IsDBNull(dr("CantUM")), Nothing, dr("CantUM"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._H_TRAEDETALLEFACTURA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._H_TRAEDETALLEFACTURA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _H_TRAEDETALLEFACTURA
        ''' Fecha de Creación  : viernes, 20 de febrero de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _H_TRAEDETALLEFACTURA. </remarks>
        Public Class ColumnNames
            Public Const ART_CODBARRAS As String = "ART_CODBARRAS"
            Public Const SDCSTP_PARTIDA As String = "SDCSTP_PARTIDA"
            Public Const SDCART_CODGEN As String = "SDCART_CODGEN"
            Public Const SDC_NRENG As String = "SDC_NRENG"
            Public Const SDC_DESC As String = "SDC_DESC"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTUM As String = "CANTUM"
        End Class ' ColumnNames
    End Class

    Public Class _H_TRAEDETALLEORDENDECOMPRA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Protected _itemList As New List(Of Entities.Procedures._H_TRAEDETALLEORDENDECOMPRA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal sccemp_codigo As String, ByVal sccsuc_cod As String, ByVal scc_id As Int32) As List(Of Entities.Procedures._H_TRAEDETALLEORDENDECOMPRA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_H_TRAEDETALLEORDENDECOMPRA"

                Dim Vsccemp_Codigo As New SqlParameter("@sccemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sccemp_codigo)
                Dim Vsccsuc_Cod As New SqlParameter("@sccsuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sccsuc_cod)
                Dim Vscc_ID As New SqlParameter("@scc_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, scc_id)
                Dim params() As SqlParameter = {Vsccemp_Codigo, Vsccsuc_Cod, Vscc_ID}
                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._H_TRAEDETALLEORDENDECOMPRA
                    NewItem.sccemp_codigo = IIf(Convert.IsDBNull(dr("sccemp_Codigo")), Nothing, dr("sccemp_Codigo"))
                    NewItem.sccsuc_cod = IIf(Convert.IsDBNull(dr("sccsuc_Cod")), Nothing, dr("sccsuc_Cod"))
                    NewItem.scc_id = IIf(Convert.IsDBNull(dr("scc_ID")), Nothing, dr("scc_ID"))
                    NewItem.sdcscc_id = IIf(Convert.IsDBNull(dr("sdcscc_ID")), Nothing, dr("sdcscc_ID"))
                    NewItem.spc_nro = IIf(Convert.IsDBNull(dr("spc_Nro")), Nothing, dr("spc_Nro"))
                    NewItem.art_codbarras = IIf(Convert.IsDBNull(dr("art_CodBarras")), Nothing, dr("art_CodBarras"))
                    NewItem.sdc_nreng = IIf(Convert.IsDBNull(dr("sdc_NReng")), Nothing, dr("sdc_NReng"))
                    NewItem.sdcart_codgen = IIf(Convert.IsDBNull(dr("sdcart_CodGen")), Nothing, dr("sdcart_CodGen"))
                    NewItem.sdc_desc = IIf(Convert.IsDBNull(dr("sdc_Desc")), Nothing, dr("sdc_Desc"))
                    NewItem.sdcstp_partida = IIf(Convert.IsDBNull(dr("sdcstp_Partida")), Nothing, dr("sdcstp_Partida"))
                    NewItem.sdcume_cod1 = IIf(Convert.IsDBNull(dr("sdcume_Cod1")), Nothing, dr("sdcume_Cod1"))
                    NewItem.sdc_cantum1 = IIf(Convert.IsDBNull(dr("sdc_CantUM1")), Nothing, dr("sdc_CantUM1"))
                    NewItem.dsdc_cantbulto = IIf(Convert.IsDBNull(dr("Dsdc_CantBulto")), Nothing, dr("Dsdc_CantBulto"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._H_TRAEDETALLEORDENDECOMPRA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._H_TRAEDETALLEORDENDECOMPRA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _H_TRAEDETALLEORDENDECOMPRA
        ''' Fecha de Creación  : miércoles, 18 de marzo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _H_TRAEDETALLEORDENDECOMPRA. </remarks>
        Public Class ColumnNames
            Public Const SCCEMP_CODIGO As String = "SCCEMP_CODIGO"
            Public Const SCCSUC_COD As String = "SCCSUC_COD"
            Public Const SCC_ID As String = "SCC_ID"
            Public Const SDCSCC_ID As String = "SDCSCC_ID"
            Public Const SPC_NRO As String = "SPC_NRO"
            Public Const ART_CODBARRAS As String = "ART_CODBARRAS"
            Public Const SDC_NRENG As String = "SDC_NRENG"
            Public Const SDCART_CODGEN As String = "SDCART_CODGEN"
            Public Const SDC_DESC As String = "SDC_DESC"
            Public Const SDCSTP_PARTIDA As String = "SDCSTP_PARTIDA"
            Public Const SDCUME_COD1 As String = "SDCUME_COD1"
            Public Const SDC_CANTUM1 As String = "SDC_CANTUM1"
            Public Const DSDC_CANTBULTO As String = "DSDC_CANTBULTO"
        End Class ' ColumnNames
    End Class

    Public Class _H_TRAEORDENESDECOMPRA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Protected _itemList As New List(Of Entities.Procedures._H_TRAEORDENESDECOMPRA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal sccpro_cod As String) As List(Of Entities.Procedures._H_TRAEORDENESDECOMPRA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_H_TRAEORDENESDECOMPRA"

                Dim Vsccpro_Cod As New SqlParameter("@sccpro_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sccpro_cod)
                Dim params() As SqlParameter = {Vsccpro_Cod}
                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._H_TRAEORDENESDECOMPRA
                    NewItem.sccemp_codigo = IIf(Convert.IsDBNull(dr("sccemp_Codigo")), Nothing, dr("sccemp_Codigo"))
                    NewItem.sccsuc_cod = IIf(Convert.IsDBNull(dr("sccsuc_Cod")), Nothing, dr("sccsuc_Cod"))
                    NewItem.scc_id = IIf(Convert.IsDBNull(dr("scc_ID")), Nothing, dr("scc_ID"))
                    NewItem.nroorden = IIf(Convert.IsDBNull(dr("NroOrden")), Nothing, dr("NroOrden"))
                    NewItem.scc_femision = IIf(Convert.IsDBNull(dr("scc_FEmision")), Nothing, dr("scc_FEmision"))
                    NewItem.sccpro_cod = IIf(Convert.IsDBNull(dr("sccpro_Cod")), Nothing, dr("sccpro_Cod"))
                    NewItem.sccpro_razsoc = IIf(Convert.IsDBNull(dr("sccpro_RazSoc")), Nothing, dr("sccpro_RazSoc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._H_TRAEORDENESDECOMPRA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._H_TRAEORDENESDECOMPRA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _H_TRAEORDENESDECOMPRA
        ''' Fecha de Creación  : miércoles, 18 de marzo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _H_TRAEORDENESDECOMPRA. </remarks>
        Public Class ColumnNames
            Public Const SCCEMP_CODIGO As String = "SCCEMP_CODIGO"
            Public Const SCCSUC_COD As String = "SCCSUC_COD"
            Public Const SCC_ID As String = "SCC_ID"
            Public Const NROORDEN As String = "NROORDEN"
            Public Const SCC_FEMISION As String = "SCC_FEMISION"
            Public Const SCCPRO_COD As String = "SCCPRO_COD"
            Public Const SCCPRO_RAZSOC As String = "SCCPRO_RAZSOC"
        End Class ' ColumnNames
    End Class

    Public Class _H_ARTICULOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._H_ARTICULOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal _codEmp As String) As List(Of Entities.Procedures._H_ARTICULOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_H_ARTICULOS"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, _codEmp)
                Dim params() As SqlParameter = {VcodEmp}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._H_ARTICULOS
                    NewItem.art_codgen = IIf(Convert.IsDBNull(dr("art_CodGen")), Nothing, dr("art_CodGen"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._H_ARTICULOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._H_ARTICULOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _H_ARTICULOS
        ''' Fecha de Creación  : domingo, 10 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _H_ARTICULOS. </remarks>
        Public Class ColumnNames
            Public Const ART_CODGEN As String = "ART_CODGEN"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class

    Public Class _H_RUBROS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._H_RUBROS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal _codEmp As String) As List(Of Entities.Procedures._H_RUBROS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_H_RUBROS"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, _codEmp)
                Dim params() As SqlParameter = {VcodEmp}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._H_RUBROS
                    NewItem.codigo = IIf(Convert.IsDBNull(dr("Codigo")), Nothing, dr("Codigo"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._H_RUBROS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._H_RUBROS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _H_RUBROS
        ''' Fecha de Creación  : domingo, 10 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _H_RUBROS. </remarks>
        Public Class ColumnNames
            Public Const CODIGO As String = "CODIGO"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class

    Public Class _BUSCARPERFILESPERMISOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._BUSCARPERFILESPERMISOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal vsql As String) As List(Of Entities.Procedures._BUSCARPERFILESPERMISOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_BUSCARPERFILESPERMISOS"

                Dim VVsql As New SQLParameter("@Vsql", SqlDbType.NVarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, vsql)
                Dim params() As SQLParameter = {VVsql}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._BUSCARPERFILESPERMISOS
                    NewItem.Id_Menu = IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu"))
                    NewItem.Id_MenuPadre = IIf(Convert.IsDBNull(dr("Id_MenuPadre")), Nothing, dr("Id_MenuPadre"))
                    NewItem.DescripcionMenu = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    NewItem.PosicionMenu = IIf(Convert.IsDBNull(dr("PosicionMenu")), Nothing, dr("PosicionMenu"))
                    NewItem.HabilitadoMenu = IIf(Convert.IsDBNull(dr("HabilitadoMenu")), Nothing, dr("HabilitadoMenu"))
                    NewItem.UrlMenu = IIf(Convert.IsDBNull(dr("UrlMenu")), Nothing, dr("UrlMenu"))
                    NewItem.FormularioAsociado = IIf(Convert.IsDBNull(dr("FormularioAsociado")), Nothing, dr("FormularioAsociado"))
                    NewItem.Id_Perfil = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._BUSCARPERFILESPERMISOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._BUSCARPERFILESPERMISOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _BUSCARPERFILESPERMISOS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _BUSCARPERFILESPERMISOS. </remarks>
        Public Class ColumnNames
            Public Const ID_MENU As String = "ID_MENU"
            Public Const ID_MENUPADRE As String = "ID_MENUPADRE"
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
            Public Const POSICIONMENU As String = "POSICIONMENU"
            Public Const HABILITADOMENU As String = "HABILITADOMENU"
            Public Const URLMENU As String = "URLMENU"
            Public Const FORMULARIOASOCIADO As String = "FORMULARIOASOCIADO"
            Public Const ID_PERFIL As String = "ID_PERFIL"
        End Class ' ColumnNames
    End Class
    Public Class _MENUES_HIJOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._MENUES_HIJOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal padre As Int32) As List(Of Entities.Procedures._MENUES_HIJOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_MENUES_HIJOS"

                Dim VPadre As New SQLParameter("@Padre", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, padre)
                Dim params() As SQLParameter = {VPadre}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._MENUES_HIJOS
                    NewItem.id_Menu = IIf(Convert.IsDBNull(dr("id_Menu")), Nothing, dr("id_Menu"))
                    NewItem.DescripcionMenu = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    NewItem.UrlMenu = IIf(Convert.IsDBNull(dr("UrlMenu")), Nothing, dr("UrlMenu"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._MENUES_HIJOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._MENUES_HIJOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _MENUES_HIJOS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _MENUES_HIJOS. </remarks>
        Public Class ColumnNames
            Public Const ID_MENU As String = "ID_MENU"
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
            Public Const URLMENU As String = "URLMENU"
        End Class ' ColumnNames
    End Class
    Public Class _MENUES_PADRES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._MENUES_PADRES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures._MENUES_PADRES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_MENUES_PADRES"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._MENUES_PADRES
                    NewItem.id_Menu = IIf(Convert.IsDBNull(dr("id_Menu")), Nothing, dr("id_Menu"))
                    NewItem.DescripcionMenu = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._MENUES_PADRES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._MENUES_PADRES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _MENUES_PADRES
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _MENUES_PADRES. </remarks>
        Public Class ColumnNames
            Public Const ID_MENU As String = "ID_MENU"
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
        End Class ' ColumnNames
    End Class
    Public Class _MENUES_PADRES_E_HIJOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._MENUES_PADRES_E_HIJOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal padre As Int32, ByVal perfil As Int32) As List(Of Entities.Procedures._MENUES_PADRES_E_HIJOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_MENUES_PADRES_E_HIJOS"

                Dim VPadre As New SQLParameter("@Padre", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, padre)
                Dim VPerfil As New SQLParameter("@Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, perfil)
                Dim params() As SQLParameter = {VPadre, VPerfil}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._MENUES_PADRES_E_HIJOS
                    NewItem.DescripcionMenu = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    NewItem.FormularioAsociado = IIf(Convert.IsDBNull(dr("FormularioAsociado")), Nothing, dr("FormularioAsociado"))
                    NewItem.Id_Menu = IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu"))
                    NewItem.Id_MenuPadre = IIf(Convert.IsDBNull(dr("Id_MenuPadre")), Nothing, dr("Id_MenuPadre"))
                    NewItem.PosicionMenu = IIf(Convert.IsDBNull(dr("PosicionMenu")), Nothing, dr("PosicionMenu"))
                    NewItem.HabilitadoMenu = IIf(Convert.IsDBNull(dr("HabilitadoMenu")), Nothing, dr("HabilitadoMenu"))
                    NewItem.UrlMenu = IIf(Convert.IsDBNull(dr("UrlMenu")), Nothing, dr("UrlMenu"))
                    NewItem.Id_Perfil = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
                    NewItem.Lectura = IIf(Convert.IsDBNull(dr("Lectura")), Nothing, dr("Lectura"))
                    NewItem.Escritura = IIf(Convert.IsDBNull(dr("Escritura")), Nothing, dr("Escritura"))
                    NewItem.Eliminacion = IIf(Convert.IsDBNull(dr("Eliminacion")), Nothing, dr("Eliminacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._MENUES_PADRES_E_HIJOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._MENUES_PADRES_E_HIJOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _MENUES_PADRES_E_HIJOS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _MENUES_PADRES_E_HIJOS. </remarks>
        Public Class ColumnNames
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
            Public Const FORMULARIOASOCIADO As String = "FORMULARIOASOCIADO"
            Public Const ID_MENU As String = "ID_MENU"
            Public Const ID_MENUPADRE As String = "ID_MENUPADRE"
            Public Const POSICIONMENU As String = "POSICIONMENU"
            Public Const HABILITADOMENU As String = "HABILITADOMENU"
            Public Const URLMENU As String = "URLMENU"
            Public Const ID_PERFIL As String = "ID_PERFIL"
            Public Const LECTURA As String = "LECTURA"
            Public Const ESCRITURA As String = "ESCRITURA"
            Public Const ELIMINACION As String = "ELIMINACION"
        End Class ' ColumnNames
    End Class
    Public Class _OBTENERPERMISOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._OBTENERPERMISOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal perfil As Int32, ByVal idmenu As Int32) As List(Of Entities.Procedures._OBTENERPERMISOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_OBTENERPERMISOS"

                Dim Vperfil As New SQLParameter("@perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, perfil)
                Dim Vidmenu As New SQLParameter("@idmenu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, idmenu)
                Dim params() As SQLParameter = {Vperfil, Vidmenu}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._OBTENERPERMISOS
                    NewItem.Lectura = IIf(Convert.IsDBNull(dr("Lectura")), Nothing, dr("Lectura"))
                    NewItem.Escritura = IIf(Convert.IsDBNull(dr("Escritura")), Nothing, dr("Escritura"))
                    NewItem.Eliminacion = IIf(Convert.IsDBNull(dr("Eliminacion")), Nothing, dr("Eliminacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._OBTENERPERMISOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._OBTENERPERMISOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _OBTENERPERMISOS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _OBTENERPERMISOS. </remarks>
        Public Class ColumnNames
            Public Const LECTURA As String = "LECTURA"
            Public Const ESCRITURA As String = "ESCRITURA"
            Public Const ELIMINACION As String = "ELIMINACION"
        End Class ' ColumnNames
    End Class
    Public Class _OBTENERPERMISOS_PORMODULO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._OBTENERPERMISOS_PORMODULO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal perfil As Int32, ByVal idmenu As Int32) As List(Of Entities.Procedures._OBTENERPERMISOS_PORMODULO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_OBTENERPERMISOS_PORMODULO"

                Dim Vperfil As New SQLParameter("@perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, perfil)
                Dim Vidmenu As New SQLParameter("@idmenu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, idmenu)
                Dim params() As SQLParameter = {Vperfil, Vidmenu}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._OBTENERPERMISOS_PORMODULO
                    NewItem.Id_Menu = IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu"))
                    NewItem.DescripcionMenu = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    NewItem.Lectura = IIf(Convert.IsDBNull(dr("Lectura")), Nothing, dr("Lectura"))
                    NewItem.Escritura = IIf(Convert.IsDBNull(dr("Escritura")), Nothing, dr("Escritura"))
                    NewItem.Eliminacion = IIf(Convert.IsDBNull(dr("Eliminacion")), Nothing, dr("Eliminacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._OBTENERPERMISOS_PORMODULO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._OBTENERPERMISOS_PORMODULO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _OBTENERPERMISOS_PORMODULO
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _OBTENERPERMISOS_PORMODULO. </remarks>
        Public Class ColumnNames
            Public Const ID_MENU As String = "ID_MENU"
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
            Public Const LECTURA As String = "LECTURA"
            Public Const ESCRITURA As String = "ESCRITURA"
            Public Const ELIMINACION As String = "ELIMINACION"
        End Class ' ColumnNames
    End Class
    Public Class _TBL_USUARIOS_UPDATE_SIN_CLAVE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function ActualizaSinClave(ByVal id_usuario As Int32, ByVal id_perfil As Int32, ByVal identificadorusuario As String, ByVal nombreusuario As String, ByVal inactivo As Boolean, ByVal sector_id As Int32, ByVal email As String, ByVal empresa As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_TBL_USUARIOS_UPDATE_SIN_CLAVE"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_perfil)
                Dim VIdentificadorUsuario As New SqlParameter("@IdentificadorUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, identificadorusuario)
                Dim VNombreUsuario As New SqlParameter("@NombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nombreusuario)
                Dim VInactivo As New SqlParameter("@Inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, inactivo)
                Dim VSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sector_id)
                Dim VEmail As New SqlParameter("@Email", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, email)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, empresa)
                Dim params() As SqlParameter = {VId_Usuario, VId_Perfil, VIdentificadorUsuario, VNombreUsuario, VInactivo, VSector_id, VEmail, VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._TBL_USUARIOS_UPDATE_SIN_CLAVE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _TBL_USUARIOS_UPDATE_SIN_CLAVE
        ''' Fecha de Creación  : lunes, 25 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla _TBL_USUARIOS_UPDATE_SIN_CLAVE. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    'Public Class _VALIDACREDENCIAL
    '    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    '    Private _transaction As Data.SqlClient.SqlTransaction
    '    Private _connectionstring As String = Nothing
    '    Private _commandTimeOut As Integer = 60
    '    Protected _itemList As New List(Of Entities.Procedures._VALIDACREDENCIAL)
    '    Public Enum ExceptionHandlingEnum
    '        ThrowExceptionHandling
    '        RaiseExceptionHandling
    '    End Enum
    '    Public Event OnError(ByVal ex As Exception)
    '    Public Property Transaction() As Data.SqlClient.SqlTransaction
    '        Get
    '            Return _transaction
    '        End Get
    '        Set(ByVal value As Data.SqlClient.SqlTransaction)
    '            _transaction = value
    '        End Set
    '    End Property
    '    Public Property CommandTimeOut() As Integer
    '        Get
    '            Return _commandTimeOut
    '        End Get
    '        Set(ByVal value As Integer)
    '            _commandTimeOut = value
    '        End Set
    '    End Property
    '    Public Sub New()
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub

    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _transaction = Transaction
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction por Reflexión
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal TransactionOwner As Object)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            Try
    '                transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
    '            Catch ex As Exception
    '                RaiseEvent OnError(New Exception("Error al asignar transacción"))
    '            End Try
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    Public Property ExceptionHandling() As ExceptionHandlingEnum
    '        Get
    '            Return _ExceptionHandling
    '        End Get
    '        Set(ByVal value As ExceptionHandlingEnum)
    '            _ExceptionHandling = value
    '        End Set
    '    End Property

    '    Public Function Items(ByVal nombreusuario As String, ByVal contrasenia As String) As List(Of Entities.Procedures._VALIDACREDENCIAL)
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Dim _sqlErr As String = Nothing
    '        Try
    '            _itemList.Clear()
    '            Dim _commandText As String = "_VALIDACREDENCIAL"

    '            Dim VnombreUsuario As New SQLParameter("@nombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nombreUsuario)
    '            Dim Vcontrasenia As New SQLParameter("@contrasenia", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, contrasenia)
    '            Dim params() As SQLParameter = {VnombreUsuario, Vcontrasenia}
    '            SqlHelper.CommandTimeout = _commandTimeOut

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandtext, params)
    '            End If

    '            While dr.Read
    '                Dim NewItem As New Entities.Procedures._VALIDACREDENCIAL
    '                NewItem.IdUsuario = IIf(Convert.IsDBNull(dr("IdUsuario")), Nothing, dr("IdUsuario"))
    '                NewItem.perfil = IIf(Convert.IsDBNull(dr("Perfil")), Nothing, dr("Perfil"))
    '                NewItem.Sector_id = IIf(Convert.IsDBNull(dr("Sector_id")), Nothing, dr("Sector_id"))
    '                _itemList.Add(NewItem)
    '            End While
    '            Return _itemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Conserva el resultado de la última consulta.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public ReadOnly Property Resultset() As List(Of Entities.Procedures._VALIDACREDENCIAL)
    '        Get
    '            Return _itemList
    '        End Get

    '    End Property

    '    Public Class ITEM
    '        Inherits Entities.Procedures._VALIDACREDENCIAL
    '    End Class 'ITEM

    '    ''' Clase         : ColumnNames 
    '    ''' Descripción   : Nombres de Columnas de la tabla _VALIDACREDENCIAL
    '    ''' Fecha de Creación  : sábado, 16 de mayo de 2015
    '    ''' <remarks> Representa los Nombres de Columnas de la tabla _VALIDACREDENCIAL. </remarks>
    '    Public Class ColumnNames
    '        Public Const IDUSUARIO As String = "IDUSUARIO"
    '        Public Const PERFIL As String = "PERFIL"
    '        Public Const SECTOR_ID As String = "SECTOR_ID"
    '    End Class ' ColumnNames
    'End Class

    'Public Class _VALIDACREDENCIAL
    '    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    '    Private _transaction As Data.SqlClient.SqlTransaction
    '    Private _connectionstring As String = Nothing
    '    Private _commandTimeOut As Integer = 60
    '    Protected _itemList As New List(Of Entities.Procedures._VALIDACREDENCIAL)
    '    Public Enum ExceptionHandlingEnum
    '        ThrowExceptionHandling
    '        RaiseExceptionHandling
    '    End Enum
    '    Public Event OnError(ByVal ex As Exception)
    '    Public Property Transaction() As Data.SqlClient.SqlTransaction
    '        Get
    '            Return _transaction
    '        End Get
    '        Set(ByVal value As Data.SqlClient.SqlTransaction)
    '            _transaction = value
    '        End Set
    '    End Property
    '    Public Property CommandTimeOut() As Integer
    '        Get
    '            Return _commandTimeOut
    '        End Get
    '        Set(ByVal value As Integer)
    '            _commandTimeOut = value
    '        End Set
    '    End Property
    '    Public Sub New()
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub

    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _transaction = Transaction
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction por Reflexión
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal TransactionOwner As Object)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            Try
    '                Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
    '            Catch ex As Exception
    '                RaiseEvent OnError(New Exception("Error al asignar transacción"))
    '            End Try
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    Public Property ExceptionHandling() As ExceptionHandlingEnum
    '        Get
    '            Return _exceptionHandling
    '        End Get
    '        Set(ByVal value As ExceptionHandlingEnum)
    '            _exceptionHandling = value
    '        End Set
    '    End Property

    '    Public Function Items(ByVal nombreusuario As String, ByVal contrasenia As String) As List(Of Entities.Procedures._VALIDACREDENCIAL)
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Dim _sqlErr As String = Nothing
    '        Try
    '            _itemList.Clear()
    '            Dim _commandText As String = "_VALIDACREDENCIAL"

    '            Dim VnombreUsuario As New SqlParameter("@nombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nombreusuario)
    '            Dim Vcontrasenia As New SqlParameter("@contrasenia", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, contrasenia)
    '            Dim params() As SqlParameter = {VnombreUsuario, Vcontrasenia}
    '            SqlHelper.CommandTimeout = _commandTimeOut

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '            While dr.Read
    '                Dim NewItem As New Entities.Procedures._VALIDACREDENCIAL
    '                NewItem.idusuario = IIf(Convert.IsDBNull(dr("IdUsuario")), Nothing, dr("IdUsuario"))
    '                NewItem.perfil = IIf(Convert.IsDBNull(dr("Perfil")), Nothing, dr("Perfil"))
    '                NewItem.sector_id = IIf(Convert.IsDBNull(dr("Sector_id")), Nothing, dr("Sector_id"))
    '                NewItem.email = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
    '                _itemList.Add(NewItem)
    '            End While
    '            Return _itemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Conserva el resultado de la última consulta.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public ReadOnly Property Resultset() As List(Of Entities.Procedures._VALIDACREDENCIAL)
    '        Get
    '            Return _itemList
    '        End Get

    '    End Property

    '    Public Class ITEM
    '        Inherits Entities.Procedures._VALIDACREDENCIAL
    '    End Class 'ITEM

    '    ''' Clase         : ColumnNames 
    '    ''' Descripción   : Nombres de Columnas de la tabla _VALIDACREDENCIAL
    '    ''' Fecha de Creación  : lunes, 1 de agosto de 2016
    '    ''' <remarks> Representa los Nombres de Columnas de la tabla _VALIDACREDENCIAL. </remarks>
    '    Public Class ColumnNames
    '        Public Const IDUSUARIO As String = "IDUSUARIO"
    '        Public Const PERFIL As String = "PERFIL"
    '        Public Const SECTOR_ID As String = "SECTOR_ID"
    '        Public Const EMAIL As String = "EMAIL"
    '    End Class ' ColumnNames
    'End Class

    Public Class _VALIDACREDENCIAL
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._VALIDACREDENCIAL)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal nombreusuario As String, ByVal contrasenia As String) As List(Of Entities.Procedures._VALIDACREDENCIAL)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_VALIDACREDENCIAL"

                Dim VnombreUsuario As New SqlParameter("@nombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nombreusuario)
                Dim Vcontrasenia As New SqlParameter("@contrasenia", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, contrasenia)
                Dim params() As SqlParameter = {VnombreUsuario, Vcontrasenia}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._VALIDACREDENCIAL
                    NewItem.IdUsuario = IIf(Convert.IsDBNull(dr("IdUsuario")), Nothing, dr("IdUsuario"))
                    NewItem.Perfil = IIf(Convert.IsDBNull(dr("Perfil")), Nothing, dr("Perfil"))
                    NewItem.sector_id = IIf(Convert.IsDBNull(dr("Sector_id")), Nothing, dr("Sector_id"))
                    NewItem.Email = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
                    NewItem.Empresa = IIf(Convert.IsDBNull(dr("Empresa")), Nothing, dr("Empresa"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._VALIDACREDENCIAL)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._VALIDACREDENCIAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _VALIDACREDENCIAL
        ''' Fecha de Creación  : miércoles, 14 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla _VALIDACREDENCIAL. </remarks>
        Public Class ColumnNames
            Public Const IDUSUARIO As String = "IDUSUARIO"
            Public Const PERFIL As String = "PERFIL"
            Public Const SECTOR_ID As String = "SECTOR_ID"
            Public Const EMAIL As String = "EMAIL"
            Public Const EMPRESA As String = "EMPRESA"
        End Class ' ColumnNames
    End Class

    Public Class ULTIMA_POSICION_MENU
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ULTIMA_POSICION_MENU)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal menuapadre As Int32) As List(Of Entities.Procedures.ULTIMA_POSICION_MENU)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ULTIMA_POSICION_MENU"

                Dim VMenuaPadre As New SQLParameter("@MenuaPadre", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, menuapadre)
                Dim params() As SQLParameter = {VMenuaPadre}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ULTIMA_POSICION_MENU
                    NewItem.UltimoMenu = IIf(Convert.IsDBNull(dr("UltimoMenu")), Nothing, dr("UltimoMenu"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ULTIMA_POSICION_MENU)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ULTIMA_POSICION_MENU
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ULTIMA_POSICION_MENU
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla ULTIMA_POSICION_MENU. </remarks>
        Public Class ColumnNames
            Public Const ULTIMOMENU As String = "ULTIMOMENU"
        End Class ' ColumnNames
    End Class
    Public Class FACTURASCONOPSINRETIRAR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.FACTURASCONOPSINRETIRAR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal codprov As String) As List(Of Entities.Procedures.FACTURASCONOPSINRETIRAR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "FACTURASCONOPSINRETIRAR"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VcodProv As New SqlParameter("@codProv", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codprov)
                Dim params() As SqlParameter = {VcodEmp, VcodProv}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.FACTURASCONOPSINRETIRAR
                    NewItem.ccoemp_Codigo = IIf(Convert.IsDBNull(dr("ccoemp_Codigo")), Nothing, dr("ccoemp_Codigo"))
                    NewItem.ccosuc_Cod = IIf(Convert.IsDBNull(dr("ccosuc_Cod")), Nothing, dr("ccosuc_Cod"))
                    NewItem.cco_ID = IIf(Convert.IsDBNull(dr("cco_ID")), Nothing, dr("cco_ID"))
                    NewItem.cco_CodPvt = IIf(Convert.IsDBNull(dr("cco_CodPvt")), Nothing, dr("cco_CodPvt"))
                    NewItem.cco_Letra = IIf(Convert.IsDBNull(dr("cco_Letra")), Nothing, dr("cco_Letra"))
                    NewItem.ccotco_Cod = IIf(Convert.IsDBNull(dr("ccotco_Cod")), Nothing, dr("ccotco_Cod"))
                    NewItem.cco_Nro = IIf(Convert.IsDBNull(dr("cco_Nro")), Nothing, dr("cco_Nro"))
                    NewItem.cco_CodPro = IIf(Convert.IsDBNull(dr("cco_CodPro")), Nothing, dr("cco_CodPro"))
                    NewItem.ccopro_RazSoc = IIf(Convert.IsDBNull(dr("ccopro_RazSoc")), Nothing, dr("ccopro_RazSoc"))
                    NewItem.cco_ImpMonLoc = IIf(Convert.IsDBNull(dr("cco_ImpMonLoc")), Nothing, dr("cco_ImpMonLoc"))
                    NewItem.cco_FEmision = IIf(Convert.IsDBNull(dr("cco_FEmision")), Nothing, dr("cco_FEmision"))
                    NewItem.cco_FVto = IIf(Convert.IsDBNull(dr("cco_FVto")), Nothing, dr("cco_FVto"))
                    NewItem.FechaOP = IIf(Convert.IsDBNull(dr("FechaOP")), Nothing, dr("FechaOP"))
                    NewItem.fechaRetiro = IIf(Convert.IsDBNull(dr("fechaRetiro")), Nothing, dr("fechaRetiro"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.FACTURASCONOPSINRETIRAR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.FACTURASCONOPSINRETIRAR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla FACTURASCONOPSINRETIRAR
        ''' Fecha de Creación  : jueves, 18 de junio de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla FACTURASCONOPSINRETIRAR. </remarks>
        Public Class ColumnNames
            Public Const CCOEMP_CODIGO As String = "CCOEMP_CODIGO"
            Public Const CCOSUC_COD As String = "CCOSUC_COD"
            Public Const CCO_ID As String = "CCO_ID"
            Public Const CCO_CODPVT As String = "CCO_CODPVT"
            Public Const CCO_LETRA As String = "CCO_LETRA"
            Public Const CCOTCO_COD As String = "CCOTCO_COD"
            Public Const CCO_NRO As String = "CCO_NRO"
            Public Const CCO_IMPMONLOC As String = "CCO_IMPMONLOC"
            Public Const CCO_FEMISION As String = "CCO_FEMISION"
            Public Const CCO_FVTO As String = "CCO_FVTO"
            Public Const FECHAOP As String = "FECHAOP"
            Public Const FECHARETIRO As String = "FECHARETIRO"
        End Class ' ColumnNames
    End Class
    Public Class TRAECOMPROBANTESPENDIENTESPROVEEDOR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAECOMPROBANTESPENDIENTESPROVEEDOR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal codprov As String) As List(Of Entities.Procedures.TRAECOMPROBANTESPENDIENTESPROVEEDOR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAECOMPROBANTESPENDIENTESPROVEEDOR"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VcodProv As New SqlParameter("@codProv", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codprov)
                Dim params() As SqlParameter = {VcodEmp, VcodProv}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAECOMPROBANTESPENDIENTESPROVEEDOR
                    NewItem.ccoemp_Codigo = IIf(Convert.IsDBNull(dr("ccoemp_Codigo")), Nothing, dr("ccoemp_Codigo"))
                    NewItem.ccosuc_Cod = IIf(Convert.IsDBNull(dr("ccosuc_Cod")), Nothing, dr("ccosuc_Cod"))
                    NewItem.cco_ID = IIf(Convert.IsDBNull(dr("cco_ID")), Nothing, dr("cco_ID"))
                    NewItem.cco_CodPvt = IIf(Convert.IsDBNull(dr("cco_CodPvt")), Nothing, dr("cco_CodPvt"))
                    NewItem.cco_Letra = IIf(Convert.IsDBNull(dr("cco_Letra")), Nothing, dr("cco_Letra"))
                    NewItem.ccotco_Cod = IIf(Convert.IsDBNull(dr("ccotco_Cod")), Nothing, dr("ccotco_Cod"))
                    NewItem.cco_Nro = IIf(Convert.IsDBNull(dr("cco_Nro")), Nothing, dr("cco_Nro"))
                    NewItem.cco_ImpMonLoc = IIf(Convert.IsDBNull(dr("cco_ImpMonLoc")), Nothing, dr("cco_ImpMonLoc"))
                    NewItem.cco_SaldoMonLoc = IIf(Convert.IsDBNull(dr("cco_SaldoMonLoc")), Nothing, dr("cco_SaldoMonLoc"))
                    NewItem.cco_FEmision = IIf(Convert.IsDBNull(dr("cco_FEmision")), Nothing, dr("cco_FEmision"))
                    NewItem.cco_FVto = IIf(Convert.IsDBNull(dr("cco_FVto")), Nothing, dr("cco_FVto"))
                    NewItem.fechaUltimoReclamo = IIf(Convert.IsDBNull(dr("fechaUltimoReclamo")), Nothing, dr("fechaUltimoReclamo"))
                    NewItem.Estado_id = IIf(Convert.IsDBNull(dr("Estado_id")), Nothing, dr("Estado_id"))
                    NewItem.tipoReclamo = IIf(Convert.IsDBNull(dr("tipoReclamo")), Nothing, dr("tipoReclamo"))
                    NewItem.adeudanc = IIf(Convert.IsDBNull(dr("AdeudaNC")), Nothing, dr("AdeudaNC"))
                    NewItem.tieneObs = IIf(Convert.IsDBNull(dr("TieneObs")), Nothing, dr("TieneObs"))

                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAECOMPROBANTESPENDIENTESPROVEEDOR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAECOMPROBANTESPENDIENTESPROVEEDOR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAECOMPROBANTESPENDIENTESPROVEEDOR
        ''' Fecha de Creación  : jueves, 18 de junio de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAECOMPROBANTESPENDIENTESPROVEEDOR. </remarks>
        Public Class ColumnNames
            Public Const CCOEMP_CODIGO As String = "CCOEMP_CODIGO"
            Public Const CCOSUC_COD As String = "CCOSUC_COD"
            Public Const CCO_ID As String = "CCO_ID"
            Public Const CCO_CODPVT As String = "CCO_CODPVT"
            Public Const CCO_LETRA As String = "CCO_LETRA"
            Public Const CCOTCO_COD As String = "CCOTCO_COD"
            Public Const CCO_NRO As String = "CCO_NRO"
            Public Const CCO_IMPMONLOC As String = "CCO_IMPMONLOC"
            Public Const CCO_SALDOMONLOC As String = "CCO_SALDOMONLOC"
            Public Const CCO_FEMISION As String = "CCO_FEMISION"
            Public Const CCO_FVTO As String = "CCO_FVTO"
            Public Const FECHAULTIMORECLAMO As String = "FECHAULTIMORECLAMO"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const TIPORECLAMO As String = "TIPORECLAMO"
            Public Const ADEUDANC As String = "ADEUDANC"
            Public Const TIENEOBS As String = "TIENEOBS"
        End Class ' ColumnNames
    End Class
    Public Class PAGOSARETIRARPROVEEDORES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PAGOSARETIRARPROVEEDORES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal _codEmp As String) As List(Of Entities.Procedures.PAGOSARETIRARPROVEEDORES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PAGOSARETIRARPROVEEDORES"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, _codEmp)
                Dim params() As SqlParameter = {VcodEmp}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PAGOSARETIRARPROVEEDORES
                    NewItem.ccoemp_codigo = IIf(Convert.IsDBNull(dr("ccoemp_Codigo")), Nothing, dr("ccoemp_Codigo"))
                    NewItem.ccosuc_cod = IIf(Convert.IsDBNull(dr("ccosuc_Cod")), Nothing, dr("ccosuc_Cod"))
                    NewItem.cco_id = IIf(Convert.IsDBNull(dr("cco_ID")), Nothing, dr("cco_ID"))
                    NewItem.cco_nro = IIf(Convert.IsDBNull(dr("cco_Nro")), Nothing, dr("cco_Nro"))
                    NewItem.cco_femision = IIf(Convert.IsDBNull(dr("cco_FEmision")), Nothing, dr("cco_FEmision"))
                    NewItem.cco_codpro = IIf(Convert.IsDBNull(dr("cco_CodPro")), Nothing, dr("cco_CodPro"))
                    NewItem.ccopro_razsoc = IIf(Convert.IsDBNull(dr("ccopro_RazSoc")), Nothing, dr("ccopro_RazSoc"))
                    NewItem.cco_impmonloc = IIf(Convert.IsDBNull(dr("cco_ImpMonLoc")), Nothing, dr("cco_ImpMonLoc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PAGOSARETIRARPROVEEDORES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PAGOSARETIRARPROVEEDORES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PAGOSARETIRARPROVEEDORES
        ''' Fecha de Creación  : viernes, 12 de junio de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla PAGOSARETIRARPROVEEDORES. </remarks>
        Public Class ColumnNames
            Public Const CCOEMP_CODIGO As String = "CCOEMP_CODIGO"
            Public Const CCOSUC_COD As String = "CCOSUC_COD"
            Public Const CCO_ID As String = "CCO_ID"
            Public Const CCO_NRO As String = "CCO_NRO"
            Public Const CCO_FEMISION As String = "CCO_FEMISION"
            Public Const CCO_CODPRO As String = "CCO_CODPRO"
            Public Const CCOPRO_RAZSOC As String = "CCOPRO_RAZSOC"
            Public Const CCO_IMPMONLOC As String = "CCO_IMPMONLOC"
        End Class ' ColumnNames
    End Class
    Public Class H_ARTICULOSDEPOSITO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.H_ARTICULOSDEPOSITO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.H_ARTICULOSDEPOSITO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "H_ARTICULOSDEPOSITO"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.H_ARTICULOSDEPOSITO
                    NewItem.art_codGen = IIf(Convert.IsDBNull(dr("art_codGen")), Nothing, dr("art_codGen"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.UniMed = IIf(Convert.IsDBNull(dr("UniMed")), Nothing, dr("UniMed"))
                    NewItem.cla_Desc = IIf(Convert.IsDBNull(dr("cla_Desc")), Nothing, dr("cla_Desc"))
                    NewItem.Rubro = IIf(Convert.IsDBNull(dr("Rubro")), Nothing, dr("Rubro"))
                    NewItem.DescripRubro = IIf(Convert.IsDBNull(dr("DescripRubro")), Nothing, dr("DescripRubro"))
                    NewItem.Presentacion = IIf(Convert.IsDBNull(dr("Presentacion")), Nothing, dr("Presentacion"))
                    NewItem.medida = IIf(Convert.IsDBNull(dr("medida")), Nothing, dr("medida"))
                    NewItem.SUBRubro = IIf(Convert.IsDBNull(dr("SUBRubro")), Nothing, dr("SUBRubro"))
                    NewItem.DescripSubRubro = IIf(Convert.IsDBNull(dr("DescripSubRubro")), Nothing, dr("DescripSubRubro"))
                    NewItem.LlevaVencimiento = IIf(Convert.IsDBNull(dr("LlevaVencimiento")), Nothing, dr("LlevaVencimiento"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.H_ARTICULOSDEPOSITO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.H_ARTICULOSDEPOSITO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla H_ARTICULOSDEPOSITO
        ''' Fecha de Creación  : sábado, 1 de abril de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla H_ARTICULOSDEPOSITO. </remarks>
        Public Class ColumnNames
            Public Const ART_CODGEN As String = "ART_CODGEN"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const UNIMED As String = "UNIMED"
            Public Const CLA_DESC As String = "CLA_DESC"
            Public Const RUBRO As String = "RUBRO"
            Public Const DESCRIPRUBRO As String = "DESCRIPRUBRO"
            Public Const PRESENTACION As String = "PRESENTACION"
            Public Const MEDIDA As String = "MEDIDA"
            Public Const SUBRUBRO As String = "SUBRUBRO"
            Public Const DESCRIPSUBRUBRO As String = "DESCRIPSUBRUBRO"
            Public Const LLEVAVENCIMIENTO As String = "LLEVAVENCIMIENTO"
        End Class ' ColumnNames
    End Class

    Public Class MERCADERIA_CARGADA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MERCADERIA_CARGADA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fecha As DateTime) As List(Of Entities.Procedures.MERCADERIA_CARGADA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MERCADERIA_CARGADA"

                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fecha)
                Dim params() As SqlParameter = {Vfecha}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MERCADERIA_CARGADA
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.id_articulo = IIf(Convert.IsDBNull(dr("ID_Articulo")), Nothing, dr("ID_Articulo"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("Cantidad")), Nothing, dr("Cantidad"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MERCADERIA_CARGADA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MERCADERIA_CARGADA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MERCADERIA_CARGADA
        ''' Fecha de Creación  : viernes, 28 de agosto de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla MERCADERIA_CARGADA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const FECHA As String = "FECHA"
            Public Const ID_ARTICULO As String = "ID_ARTICULO"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
        End Class ' ColumnNames
    End Class
    Public Class REQUERIMIENTOS_DISPONIBLES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.REQUERIMIENTOS_DISPONIBLES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.REQUERIMIENTOS_DISPONIBLES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "REQUERIMIENTOS_DISPONIBLES"

                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SqlParameter = {VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.REQUERIMIENTOS_DISPONIBLES
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("OBS")), Nothing, dr("OBS"))
                    NewItem.Descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    NewItem.sectorRequerimiento_id = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.REQUERIMIENTOS_DISPONIBLES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.REQUERIMIENTOS_DISPONIBLES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla REQUERIMIENTOS_DISPONIBLES
        ''' Fecha de Creación  : lunes, 25 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla REQUERIMIENTOS_DISPONIBLES. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const OBS As String = "OBS"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const USUARIO As String = "USUARIO"
        End Class ' ColumnNames
    End Class
    Public Class UNIDADESDEMEDIDAS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.UNIDADESDEMEDIDAS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.UNIDADESDEMEDIDAS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "UNIDADESDEMEDIDAS"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.UNIDADESDEMEDIDAS
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("UniMed")), Nothing, dr("UniMed"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.UNIDADESDEMEDIDAS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.UNIDADESDEMEDIDAS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla UNIDADESDEMEDIDAS
        ''' Fecha de Creación  : martes, 15 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla UNIDADESDEMEDIDAS. </remarks>
        Public Class ColumnNames
            Public Const UNIMED As String = "UNIMED"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class
    Public Class MAXCOMPROBANTESTKMOVIMIENTO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MAXCOMPROBANTESTKMOVIMIENTO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.MAXCOMPROBANTESTKMOVIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MAXCOMPROBANTESTKMOVIMIENTO"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SQLParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MAXCOMPROBANTESTKMOVIMIENTO
                    NewItem.comprobante = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MAXCOMPROBANTESTKMOVIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MAXCOMPROBANTESTKMOVIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MAXCOMPROBANTESTKMOVIMIENTO
        ''' Fecha de Creación  : miércoles, 16 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla MAXCOMPROBANTESTKMOVIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const COMPROBANTE As String = "COMPROBANTE"
        End Class ' ColumnNames
    End Class
    Public Class MAXCOMPROBANTEREQUERIMIENTO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MAXCOMPROBANTEREQUERIMIENTO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.MAXCOMPROBANTEREQUERIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MAXCOMPROBANTEREQUERIMIENTO"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SQLParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MAXCOMPROBANTEREQUERIMIENTO
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MAXCOMPROBANTEREQUERIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MAXCOMPROBANTEREQUERIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MAXCOMPROBANTEREQUERIMIENTO
        ''' Fecha de Creación  : jueves, 17 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla MAXCOMPROBANTEREQUERIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
        End Class ' ColumnNames
    End Class
    Public Class H_CONDPAGOPROVEED
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.H_CONDPAGOPROVEED)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal proveed As String) As List(Of Entities.Procedures.H_CONDPAGOPROVEED)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "H_CONDPAGOPROVEED"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VProveed As New SQLParameter("@Proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed)
                Dim params() As SQLParameter = {VcodEmp, VProveed}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.H_CONDPAGOPROVEED
                    NewItem.CondPago = IIf(Convert.IsDBNull(dr("CondPago")), Nothing, dr("CondPago"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.H_CONDPAGOPROVEED)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.H_CONDPAGOPROVEED
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla H_CONDPAGOPROVEED
        ''' Fecha de Creación  : lunes, 21 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla H_CONDPAGOPROVEED. </remarks>
        Public Class ColumnNames
            Public Const CONDPAGO As String = "CONDPAGO"
        End Class ' ColumnNames
    End Class
    Public Class TRAEREQUERIMIENTOITEM
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOITEM)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal requerimiento_id As Int32, ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREQUERIMIENTOITEM"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vrequerimiento_id As New SQLParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, requerimiento_id)
                Dim VnivelAut_id As New SQLParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SQLParameter = {VcodEmp, Vrequerimiento_id, VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOITEM
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.nivelAut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaentrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.Marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEM)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREQUERIMIENTOITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEM
        ''' Fecha de Creación  : miércoles, 23 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEM. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
        End Class ' ColumnNames
    End Class

    Public Class CIERRESTOCKMENSUAL
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal anio As Int32, ByVal mes As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "CIERRESTOCKMENSUAL"

                Dim VAnio As New SQLParameter("@Anio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, anio)
                Dim VMes As New SQLParameter("@Mes", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, mes)
                Dim params() As SQLParameter = {VAnio, VMes}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.CIERRESTOCKMENSUAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla CIERRESTOCKMENSUAL
        ''' Fecha de Creación  : lunes, 28 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla CIERRESTOCKMENSUAL. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class MAXCOMPROBANTEOCDIRECTA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MAXCOMPROBANTEOCDIRECTA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.MAXCOMPROBANTEOCDIRECTA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MAXCOMPROBANTEOCDIRECTA"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SQLParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MAXCOMPROBANTEOCDIRECTA
                    NewItem.ordenCompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MAXCOMPROBANTEOCDIRECTA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MAXCOMPROBANTEOCDIRECTA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MAXCOMPROBANTEOCDIRECTA
        ''' Fecha de Creación  : miércoles, 30 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla MAXCOMPROBANTEOCDIRECTA. </remarks>
        Public Class ColumnNames
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
        End Class ' ColumnNames
    End Class

    Public Class INFORMEREQUERIMIENTOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.INFORMEREQUERIMIENTOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fechadesde As DateTime, ByVal fechahasta As DateTime, ByVal tipo As String) As List(Of Entities.Procedures.INFORMEREQUERIMIENTOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "INFORMEREQUERIMIENTOS"

                Dim VFechaDesde As New SQLParameter("@FechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VFechaHasta As New SQLParameter("@FechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim VTipo As New SQLParameter("@Tipo", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipo)
                Dim params() As SQLParameter = {VFechaDesde, VFechaHasta, VTipo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.INFORMEREQUERIMIENTOS
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.sectorRequerimiento_id = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.Descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.Estado = IIf(Convert.IsDBNull(dr("Estado")), Nothing, dr("Estado"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.Descripcion1 = IIf(Convert.IsDBNull(dr("Descripcion1")), Nothing, dr("Descripcion1"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.fechaEntrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.Autorizacion = IIf(Convert.IsDBNull(dr("Autorizacion")), Nothing, dr("Autorizacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.INFORMEREQUERIMIENTOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.INFORMEREQUERIMIENTOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla INFORMEREQUERIMIENTOS
        ''' Fecha de Creación  : viernes, 02 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla INFORMEREQUERIMIENTOS. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const FECHA As String = "FECHA"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const ESTADO As String = "ESTADO"
            Public Const OBS As String = "OBS"
            Public Const NROITEM As String = "NROITEM"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const DESCRIPCION1 As String = "DESCRIPCION1"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const AUTORIZACION As String = "AUTORIZACION"
        End Class ' ColumnNames
    End Class

    Public Class ORDENCOMPRA_DISPONIBLES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ORDENCOMPRA_DISPONIBLES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.ORDENCOMPRA_DISPONIBLES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ORDENCOMPRA_DISPONIBLES"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ORDENCOMPRA_DISPONIBLES
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordenCompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.RazonSocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.tipoOc_id = IIf(Convert.IsDBNull(dr("tipoOc_id")), Nothing, dr("tipoOc_id"))
                    NewItem.modificaCosto = IIf(Convert.IsDBNull(dr("modificaCosto")), Nothing, dr("modificaCosto"))
                    NewItem.condicionPago_id = IIf(Convert.IsDBNull(dr("condicionPago_id")), Nothing, dr("condicionPago_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.Email = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
                    NewItem.pedidoDiario = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ORDENCOMPRA_DISPONIBLES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ORDENCOMPRA_DISPONIBLES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ORDENCOMPRA_DISPONIBLES
        ''' Fecha de Creación  : miércoles, 12 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ORDENCOMPRA_DISPONIBLES. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const FECHA As String = "FECHA"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const OBS As String = "OBS"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const TIPOOC_ID As String = "TIPOOC_ID"
            Public Const MODIFICACOSTO As String = "MODIFICACOSTO"
            Public Const CONDICIONPAGO_ID As String = "CONDICIONPAGO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const EMAIL As String = "EMAIL"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
        End Class ' ColumnNames
    End Class

    'Public Class TRAEORDENCOMPRAITEM
    '    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    '    Private _transaction As Data.SqlClient.SqlTransaction
    '    Private _connectionstring As String = Nothing
    '    Private _commandTimeOut As Integer = 60
    '    Protected _itemList As New List(Of Entities.Procedures.TRAEORDENCOMPRAITEM)
    '    Public Enum ExceptionHandlingEnum
    '        ThrowExceptionHandling
    '        RaiseExceptionHandling
    '    End Enum
    '    Public Event OnError(ByVal ex As Exception)
    '    Public Property Transaction() As Data.SqlClient.SqlTransaction
    '        Get
    '            Return _transaction
    '        End Get
    '        Set(ByVal value As Data.SqlClient.SqlTransaction)
    '            _transaction = value
    '        End Set
    '    End Property
    '    Public Property CommandTimeOut() As Integer
    '        Get
    '            Return _commandTimeOut
    '        End Get
    '        Set(ByVal value As Integer)
    '            _commandTimeOut = value
    '        End Set
    '    End Property
    '    Public Sub New()
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub

    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _transaction = Transaction
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction por Reflexión
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal TransactionOwner As Object)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            Try
    '                Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
    '            Catch ex As Exception
    '                RaiseEvent OnError(New Exception("Error al asignar transacción"))
    '            End Try
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    Public Property ExceptionHandling() As ExceptionHandlingEnum
    '        Get
    '            Return _exceptionHandling
    '        End Get
    '        Set(ByVal value As ExceptionHandlingEnum)
    '            _exceptionHandling = value
    '        End Set
    '    End Property

    '    Public Function Items(ByVal codemp As String, ByVal ordencompra_id As Int32, ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.TRAEORDENCOMPRAITEM)
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Dim _sqlErr As String = Nothing
    '        Try
    '            _itemList.Clear()
    '            Dim _commandText As String = "TRAEORDENCOMPRAITEM"

    '            Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
    '            Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ordencompra_id)
    '            Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
    '            Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VnivelAut_id}
    '            SqlHelper.CommandTimeout = _commandTimeOut

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '            While dr.Read
    '                Dim NewItem As New Entities.Procedures.TRAEORDENCOMPRAITEM
    '                NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
    '                NewItem.ordenCompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
    '                NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
    '                NewItem.art_codGen = IIf(Convert.IsDBNull(dr("art_codGen")), Nothing, dr("art_codGen"))
    '                NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
    '                NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
    '                NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
    '                NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
    '                NewItem.precio = IIf(Convert.IsDBNull(dr("precio")), Nothing, dr("precio"))
    '                NewItem.nivelAut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
    '                NewItem.fechaEntrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
    '                NewItem.embalaje = IIf(Convert.IsDBNull(dr("embalaje")), Nothing, dr("embalaje"))
    '                NewItem.marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
    '                _itemList.Add(NewItem)
    '            End While
    '            Return _itemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Conserva el resultado de la última consulta.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEORDENCOMPRAITEM)
    '        Get
    '            Return _itemList
    '        End Get

    '    End Property

    '    Public Class ITEM
    '        Inherits Entities.Procedures.TRAEORDENCOMPRAITEM
    '    End Class 'ITEM

    '    ''' Clase         : ColumnNames 
    '    ''' Descripción   : Nombres de Columnas de la tabla TRAEORDENCOMPRAITEM
    '    ''' Fecha de Creación  : lunes, 30 de mayo de 2016
    '    ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEORDENCOMPRAITEM. </remarks>
    '    Public Class ColumnNames
    '        Public Const CODEMP As String = "CODEMP"
    '        Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
    '        Public Const NROITEM As String = "NROITEM"
    '        Public Const ART_CODGEN As String = "ART_CODGEN"
    '        Public Const ART_DESCGEN As String = "ART_DESCGEN"
    '        Public Const ARTICULO_ID As String = "ARTICULO_ID"
    '        Public Const UNIMED As String = "UNIMED"
    '        Public Const CANTIDAD As String = "CANTIDAD"
    '        Public Const PRECIO As String = "PRECIO"
    '        Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
    '        Public Const FECHAENTREGA As String = "FECHAENTREGA"
    '        Public Const EMBALAJE As String = "EMBALAJE"
    '        Public Const MARCA As String = "MARCA"
    '    End Class ' ColumnNames
    'End Class
    Public Class TRAEORDENCOMPRAITEM
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEORDENCOMPRAITEM)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal ordencompra_id As Int32, ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.TRAEORDENCOMPRAITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEORDENCOMPRAITEM"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ordencompra_id)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEORDENCOMPRAITEM
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordencompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.nroitem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_codgen = IIf(Convert.IsDBNull(dr("art_codGen")), Nothing, dr("art_codGen"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.precio = IIf(Convert.IsDBNull(dr("precio")), Nothing, dr("precio"))
                    NewItem.nivelaut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaentrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.embalaje = IIf(Convert.IsDBNull(dr("embalaje")), Nothing, dr("embalaje"))
                    NewItem.marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    NewItem.excluido = IIf(Convert.IsDBNull(dr("excluido")), Nothing, dr("excluido"))
                    NewItem.motivoexclusion = IIf(Convert.IsDBNull(dr("motivoExclusion")), Nothing, dr("motivoExclusion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEORDENCOMPRAITEM)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEORDENCOMPRAITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEORDENCOMPRAITEM
        ''' Fecha de Creación  : jueves, 20 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEORDENCOMPRAITEM. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_CODGEN As String = "ART_CODGEN"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const PRECIO As String = "PRECIO"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const EMBALAJE As String = "EMBALAJE"
            Public Const MARCA As String = "MARCA"
            Public Const EXCLUIDO As String = "EXCLUIDO"
            Public Const MOTIVOEXCLUSION As String = "MOTIVOEXCLUSION"
        End Class ' ColumnNames
    End Class

    Public Class ACTUALIZA_USUARIO_AUTORIZA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal tipo As String, ByVal codemp As String, ByVal nrocomprobante As Int32, ByVal usuario As String, ByVal pedidoDiario As Boolean) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ACTUALIZA_USUARIO_AUTORIZA"

                Dim VTipo As New SqlParameter("@Tipo", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipo)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VNroComprobante As New SqlParameter("@NroComprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nrocomprobante)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, usuario)
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, pedidoDiario)
                Dim params() As SqlParameter = {VTipo, VcodEmp, VNroComprobante, Vusuario, VpedidoDiario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ACTUALIZA_USUARIO_AUTORIZA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ACTUALIZA_USUARIO_AUTORIZA
        ''' Fecha de Creación  : lunes, 05 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla ACTUALIZA_USUARIO_AUTORIZA. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class REQUERIMIENTOS_PARAORDENDECOMPRA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.REQUERIMIENTOS_PARAORDENDECOMPRA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.REQUERIMIENTOS_PARAORDENDECOMPRA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "REQUERIMIENTOS_PARAORDENDECOMPRA"

                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SqlParameter = {VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.REQUERIMIENTOS_PARAORDENDECOMPRA
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("OBS")), Nothing, dr("OBS"))
                    NewItem.Descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    NewItem.sectorRequerimiento_id = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.pedidodiario = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    NewItem.Lugarentrega = IIf(Convert.IsDBNull(dr("LugarEntrega")), Nothing, dr("LugarEntrega"))
                    NewItem.Entrega_id = IIf(Convert.IsDBNull(dr("Entrega_id")), Nothing, dr("Entrega_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.REQUERIMIENTOS_PARAORDENDECOMPRA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.REQUERIMIENTOS_PARAORDENDECOMPRA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla REQUERIMIENTOS_PARAORDENDECOMPRA
        ''' Fecha de Creación  : lunes, 3 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla REQUERIMIENTOS_PARAORDENDECOMPRA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const OBS As String = "OBS"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
            Public Const LUGARENTREGA As String = "LUGARENTREGA"
            Public Const ENTREGA_ID As String = "ENTREGA_ID"
        End Class ' ColumnNames
    End Class

    Public Class TRAEREQUERIMIENTOITEMVARIOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMVARIOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal requerimiento As String, ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMVARIOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREQUERIMIENTOITEMVARIOS"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VRequerimiento As New SQLParameter("@Requerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, requerimiento)
                Dim VnivelAut_id As New SQLParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SQLParameter = {VcodEmp, VRequerimiento, VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOITEMVARIOS
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.nivelAut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaentrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.Marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMVARIOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREQUERIMIENTOITEMVARIOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMVARIOS
        ''' Fecha de Creación  : jueves, 08 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMVARIOS. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
        End Class ' ColumnNames
    End Class

    Public Class ORDENCOMPRA_DISPONIBLES_PROVEEDOR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ORDENCOMPRA_DISPONIBLES_PROVEEDOR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal proveed As String, ByVal codEmp As String) As List(Of Entities.Procedures.ORDENCOMPRA_DISPONIBLES_PROVEEDOR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ORDENCOMPRA_DISPONIBLES_PROVEEDOR"

                Dim VProveed As New SqlParameter("@Proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed)
                Dim VCodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codEmp)
                Dim params() As SqlParameter = {VProveed, VCodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ORDENCOMPRA_DISPONIBLES_PROVEEDOR
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordencompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ORDENCOMPRA_DISPONIBLES_PROVEEDOR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ORDENCOMPRA_DISPONIBLES_PROVEEDOR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ORDENCOMPRA_DISPONIBLES_PROVEEDOR
        ''' Fecha de Creación  : viernes, 16 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla ORDENCOMPRA_DISPONIBLES_PROVEEDOR. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const FECHA As String = "FECHA"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const OBS As String = "OBS"
        End Class ' ColumnNames
    End Class

    Public Class TRAEORDENCOMPRAITEM_PENDIENTE_DE_ENTREGAR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEORDENCOMPRAITEM_PENDIENTE_DE_ENTREGAR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal ordencompra_id As Int32, ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.TRAEORDENCOMPRAITEM_PENDIENTE_DE_ENTREGAR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEORDENCOMPRAITEM_PENDIENTE_DE_ENTREGAR"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ordencompra_id)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEORDENCOMPRAITEM_PENDIENTE_DE_ENTREGAR
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordenCompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.precio = IIf(Convert.IsDBNull(dr("precio")), Nothing, dr("precio"))
                    NewItem.nivelAut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaEntrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.CantidadAdeudada = IIf(Convert.IsDBNull(dr("CantidadAdeudada")), Nothing, dr("CantidadAdeudada"))
                    NewItem.marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    NewItem.PorcToleranciaReposicion = IIf(Convert.IsDBNull(dr("PorcToleranciaReposicion")), Nothing, dr("PorcToleranciaReposicion"))
                    NewItem.LlevaVencimiento = IIf(Convert.IsDBNull(dr("LlevaVencimiento")), Nothing, dr("LlevaVencimiento"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEORDENCOMPRAITEM_PENDIENTE_DE_ENTREGAR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEORDENCOMPRAITEM_PENDIENTE_DE_ENTREGAR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEORDENCOMPRAITEM_PENDIENTE_DE_ENTREGAR
        ''' Fecha de Creación  : jueves, 2 de marzo de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEORDENCOMPRAITEM_PENDIENTE_DE_ENTREGAR. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const PRECIO As String = "PRECIO"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const CANTIDADADEUDADA As String = "CANTIDADADEUDADA"
            Public Const MARCA As String = "MARCA"
            Public Const PORCTOLERANCIAREPOSICION As String = "PORCTOLERANCIAREPOSICION"
            Public Const LLEVAVENCIMIENTO As String = "LLEVAVENCIMIENTO"
        End Class ' ColumnNames
    End Class

    Public Class RECUPERAPROVEEDOREMPRESA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.RECUPERAPROVEEDOREMPRESA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal cuit As String) As List(Of Entities.Procedures.RECUPERAPROVEEDOREMPRESA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "RECUPERAPROVEEDOREMPRESA"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VCUIT As New SQLParameter("@CUIT", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cuit)
                Dim params() As SQLParameter = {VcodEmp, VCUIT}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.RECUPERAPROVEEDOREMPRESA
                    NewItem.pro_Cod = IIf(Convert.IsDBNull(dr("pro_Cod")), Nothing, dr("pro_Cod"))
                    NewItem.pro_RazSoc = IIf(Convert.IsDBNull(dr("pro_RazSoc")), Nothing, dr("pro_RazSoc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.RECUPERAPROVEEDOREMPRESA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.RECUPERAPROVEEDOREMPRESA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla RECUPERAPROVEEDOREMPRESA
        ''' Fecha de Creación  : martes, 20 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla RECUPERAPROVEEDOREMPRESA. </remarks>
        Public Class ColumnNames
            Public Const PRO_COD As String = "PRO_COD"
            Public Const PRO_RAZSOC As String = "PRO_RAZSOC"
        End Class ' ColumnNames
    End Class

    Public Class ORDENCOMPRA_PENDIENTES_DE_ENTREGA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ORDENCOMPRA_PENDIENTES_DE_ENTREGA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fechadesde As DateTime, ByVal fechahasta As DateTime) As List(Of Entities.Procedures.ORDENCOMPRA_PENDIENTES_DE_ENTREGA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ORDENCOMPRA_PENDIENTES_DE_ENTREGA"

                Dim VFechaDesde As New SqlParameter("@FechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VFechaHasta As New SqlParameter("@FechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim params() As SqlParameter = {VFechaDesde, VFechaHasta}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ORDENCOMPRA_PENDIENTES_DE_ENTREGA
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordenCompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.sectorRequerimiento_id = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.tipoOc_id = IIf(Convert.IsDBNull(dr("tipoOc_id")), Nothing, dr("tipoOc_id"))
                    NewItem.modificaCosto = IIf(Convert.IsDBNull(dr("modificaCosto")), Nothing, dr("modificaCosto"))
                    NewItem.condicionPago_id = IIf(Convert.IsDBNull(dr("condicionPago_id")), Nothing, dr("condicionPago_id"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.usuarioAutoriza = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.RazonSocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    NewItem.pedidodiario = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    NewItem.SectroEntrega_id = IIf(Convert.IsDBNull(dr("sectorEntrega_id")), Nothing, dr("sectorEntrega_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ORDENCOMPRA_PENDIENTES_DE_ENTREGA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ORDENCOMPRA_PENDIENTES_DE_ENTREGA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ORDENCOMPRA_PENDIENTES_DE_ENTREGA
        ''' Fecha de Creación  : miércoles, 12 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ORDENCOMPRA_PENDIENTES_DE_ENTREGA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const FECHA As String = "FECHA"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const TIPOOC_ID As String = "TIPOOC_ID"
            Public Const MODIFICACOSTO As String = "MODIFICACOSTO"
            Public Const CONDICIONPAGO_ID As String = "CONDICIONPAGO_ID"
            Public Const OBS As String = "OBS"
            Public Const USUARIO As String = "USUARIO"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
            Public Const SECTORENTREGA_ID As String = "SECTORENTREGA_ID"
        End Class ' ColumnNames
    End Class

    'Public Class TRAEREQUERIMIENTOITEMSDETALLE
    '    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    '    Private _transaction As Data.SqlClient.SqlTransaction
    '    Private _connectionstring As String = Nothing
    '    Private _commandTimeOut As Integer = 60
    '    Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMSDETALLE)
    '    Public Enum ExceptionHandlingEnum
    '        ThrowExceptionHandling
    '        RaiseExceptionHandling
    '    End Enum
    '    Public Event OnError(ByVal ex As Exception)
    '    Public Property Transaction() As Data.SqlClient.SqlTransaction
    '        Get
    '            Return _transaction
    '        End Get
    '        Set(ByVal value As Data.SqlClient.SqlTransaction)
    '            _transaction = value
    '        End Set
    '    End Property
    '    Public Property CommandTimeOut() As Integer
    '        Get
    '            Return _commandTimeOut
    '        End Get
    '        Set(ByVal value As Integer)
    '            _commandTimeOut = value
    '        End Set
    '    End Property
    '    Public Sub New()
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub

    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _transaction = Transaction
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction por Reflexión
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal TransactionOwner As Object)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            Try
    '                transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
    '            Catch ex As Exception
    '                RaiseEvent OnError(New Exception("Error al asignar transacción"))
    '            End Try
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    Public Property ExceptionHandling() As ExceptionHandlingEnum
    '        Get
    '            Return _ExceptionHandling
    '        End Get
    '        Set(ByVal value As ExceptionHandlingEnum)
    '            _ExceptionHandling = value
    '        End Set
    '    End Property

    '    Public Function Items(ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMSDETALLE)
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Dim _sqlErr As String = Nothing
    '        Try
    '            _itemList.Clear()
    '            Dim _commandText As String = "TRAEREQUERIMIENTOITEMSDETALLE"

    '            Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
    '            Dim params() As SqlParameter = {VnivelAut_id}
    '            SqlHelper.CommandTimeout = _commandTimeOut

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '            While dr.Read
    '                Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOITEMSDETALLE
    '                NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
    '                NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
    '                NewItem.nroitem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
    '                NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
    '                NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
    '                NewItem.unimed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
    '                NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
    '                NewItem.nivelaut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
    '                NewItem.fechaentrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
    '                _itemList.Add(NewItem)
    '            End While
    '            Return _itemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Conserva el resultado de la última consulta.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMSDETALLE)
    '        Get
    '            Return _itemList
    '        End Get

    '    End Property

    '    Public Class ITEM
    '        Inherits Entities.Procedures.TRAEREQUERIMIENTOITEMSDETALLE
    '    End Class 'ITEM

    '    ''' Clase         : ColumnNames 
    '    ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMSDETALLE
    '    ''' Fecha de Creación  : viernes, 06 de noviembre de 2015
    '    ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMSDETALLE. </remarks>
    '    Public Class ColumnNames
    '        Public Const CODEMP As String = "CODEMP"
    '        Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
    '        Public Const NROITEM As String = "NROITEM"
    '        Public Const ART_DESCGEN As String = "ART_DESCGEN"
    '        Public Const ARTICULO_ID As String = "ARTICULO_ID"
    '        Public Const UNIMED As String = "UNIMED"
    '        Public Const CANTIDAD As String = "CANTIDAD"
    '        Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
    '        Public Const FECHAENTREGA As String = "FECHAENTREGA"
    '    End Class ' ColumnNames
    'End Class

    Public Class TRAEREQUERIMIENTOITEMSDETALLE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMSDETALLE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMSDETALLE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREQUERIMIENTOITEMSDETALLE"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VnivelAut_id As New SQLParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SQLParameter = {VcodEmp, VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOITEMSDETALLE
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.nivelAut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaEntrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.CodRubro = IIf(Convert.IsDBNull(dr("CodRubro")), Nothing, dr("CodRubro"))
                    NewItem.DescripRubro = IIf(Convert.IsDBNull(dr("DescripRubro")), Nothing, dr("DescripRubro"))
                    NewItem.CodSubRubro = IIf(Convert.IsDBNull(dr("CodSubRubro")), Nothing, dr("CodSubRubro"))
                    NewItem.DescripSubRubro = IIf(Convert.IsDBNull(dr("DescripSubRubro")), Nothing, dr("DescripSubRubro"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMSDETALLE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREQUERIMIENTOITEMSDETALLE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMSDETALLE
        ''' Fecha de Creación  : miércoles, 27 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMSDETALLE. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const CODRUBRO As String = "CODRUBRO"
            Public Const DESCRIPRUBRO As String = "DESCRIPRUBRO"
            Public Const CODSUBRUBRO As String = "CODSUBRUBRO"
            Public Const DESCRIPSUBRUBRO As String = "DESCRIPSUBRUBRO"
        End Class ' ColumnNames
    End Class

    'Public Class IMPORTA_TXT_BIONEXO
    '    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    '    Private _transaction As Data.SqlClient.SqlTransaction
    '    Private _connectionstring As String = Nothing
    '    Private _commandTimeOut As Integer = 60
    '    Protected _itemList As New ArrayList
    '    Public Enum ExceptionHandlingEnum
    '        ThrowExceptionHandling
    '        RaiseExceptionHandling
    '    End Enum
    '    Public Event OnError(ByVal ex As Exception)
    '    Public Property Transaction() As Data.SqlClient.SqlTransaction
    '        Get
    '            Return _transaction
    '        End Get
    '        Set(ByVal value As Data.SqlClient.SqlTransaction)
    '            _transaction = value
    '        End Set
    '    End Property
    '    Public Property CommandTimeOut() As Integer
    '        Get
    '            Return _commandTimeOut
    '        End Get
    '        Set(ByVal value As Integer)
    '            _commandTimeOut = value
    '        End Set
    '    End Property
    '    Public Sub New()
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub

    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _transaction = Transaction
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction por Reflexión
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal TransactionOwner As Object)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            Try
    '                transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
    '            Catch ex As Exception
    '                RaiseEvent OnError(New Exception("Error al asignar transacción"))
    '            End Try
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    Public Property ExceptionHandling() As ExceptionHandlingEnum
    '        Get
    '            Return _ExceptionHandling
    '        End Get
    '        Set(ByVal value As ExceptionHandlingEnum)
    '            _ExceptionHandling = value
    '        End Set
    '    End Property

    '    Public Function Items(ByVal registros As String, ByVal separadorfilas As String, ByVal filainicio As Int32, ByVal filafin As Int32, ByVal codemp As String, ByVal usuario As String) As Object
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Dim _sqlErr As String = Nothing
    '        Try
    '            _itemList.Clear()
    '            Dim _commandText As String = "IMPORTA_TXT_BIONEXO"

    '            Dim VRegistros As New SQLParameter("@Registros", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Registros)
    '            Dim VSeparadorFilas As New SQLParameter("@SeparadorFilas", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, SeparadorFilas)
    '            Dim VFilaInicio As New SQLParameter("@FilaInicio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, FilaInicio)
    '            Dim VFilaFin As New SQLParameter("@FilaFin", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, FilaFin)
    '            Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codEmp)
    '            Dim VUsuario As New SQLParameter("@Usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Usuario)
    '            Dim params() As SQLParameter = {VRegistros, VSeparadorFilas, VFilaInicio, VFilaFin, VcodEmp, VUsuario}
    '            SqlHelper.CommandTimeout = _commandTimeOut

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandtext, params)
    '            End If

    '            While dr.Read
    '                Dim _rowsItemList As New ArrayList
    '                For count As Int32 = 0 To dr.FieldCount - 1
    '                    _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

    '                Next
    '                _itemList.Add(_rowsItemList)

    '            End While
    '            Return _itemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Conserva el resultado de la última consulta.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public ReadOnly Property Resultset() As ArrayList
    '        Get
    '            Return _itemList
    '        End Get

    '    End Property

    '    Public Class ITEM
    '        Inherits Entities.Procedures.IMPORTA_TXT_BIONEXO
    '    End Class 'ITEM

    '    ''' Clase         : ColumnNames 
    '    ''' Descripción   : Nombres de Columnas de la tabla IMPORTA_TXT_BIONEXO
    '    ''' Fecha de Creación  : lunes, 23 de noviembre de 2015
    '    ''' <remarks> Representa los Nombres de Columnas de la tabla IMPORTA_TXT_BIONEXO. </remarks>
    '    Public Class ColumnNames
    '    End Class ' ColumnNames
    'End Class

    Public Class IMPORTA_TXT_BIONEXO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.IMPORTA_TXT_BIONEXO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal registros As String, ByVal separadorfilas As String, ByVal filainicio As Int32, ByVal filafin As Int32, ByVal codemp As String, ByVal usuario As String) As List(Of Entities.Procedures.IMPORTA_TXT_BIONEXO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "IMPORTA_TXT_BIONEXO"

                Dim VRegistros As New SqlParameter("@Registros", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, registros)
                Dim VSeparadorFilas As New SqlParameter("@SeparadorFilas", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, separadorfilas)
                Dim VFilaInicio As New SqlParameter("@FilaInicio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, filainicio)
                Dim VFilaFin As New SqlParameter("@FilaFin", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, filafin)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VUsuario As New SqlParameter("@Usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, usuario)
                Dim params() As SqlParameter = {VRegistros, VSeparadorFilas, VFilaInicio, VFilaFin, VcodEmp, VUsuario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.IMPORTA_TXT_BIONEXO
                    NewItem.OC_DESDE = IIf(Convert.IsDBNull(dr("OC_DESDE")), Nothing, dr("OC_DESDE"))
                    NewItem.OC_HASTA = IIf(Convert.IsDBNull(dr("OC_HASTA")), Nothing, dr("OC_HASTA"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.IMPORTA_TXT_BIONEXO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.IMPORTA_TXT_BIONEXO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla IMPORTA_TXT_BIONEXO
        ''' Fecha de Creación  : lunes, 18 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla IMPORTA_TXT_BIONEXO. </remarks>
        Public Class ColumnNames
            Public Const OC_DESDE As String = "OC_DESDE"
            Public Const OC_HASTA As String = "OC_HASTA"
        End Class ' ColumnNames
    End Class

    Public Class ARTICULOCOTIZADO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ARTICULOCOTIZADO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal articulo_id As String, ByVal codemp As String) As List(Of Entities.Procedures.ARTICULOCOTIZADO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ARTICULOCOTIZADO"

                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo_id)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {Varticulo_id, VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ARTICULOCOTIZADO
                    NewItem.NroCotizacion = IIf(Convert.IsDBNull(dr("NroCotizacion")), Nothing, dr("NroCotizacion"))
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.UniMed = IIf(Convert.IsDBNull(dr("UniMed")), Nothing, dr("UniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.Obs = IIf(Convert.IsDBNull(dr("Obs")), Nothing, dr("Obs"))
                    NewItem.Precio = IIf(Convert.IsDBNull(dr("Precio")), Nothing, dr("Precio"))
                    NewItem.FechaCotizacion = IIf(Convert.IsDBNull(dr("FechaCotizacion")), Nothing, dr("FechaCotizacion"))
                    NewItem.Embalaje = IIf(Convert.IsDBNull(dr("Embalaje")), Nothing, dr("Embalaje"))
                    NewItem.Marca = IIf(Convert.IsDBNull(dr("Marca")), Nothing, dr("Marca"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.RazonSocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ARTICULOCOTIZADO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ARTICULOCOTIZADO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ARTICULOCOTIZADO
        ''' Fecha de Creación  : domingo, 6 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ARTICULOCOTIZADO. </remarks>
        Public Class ColumnNames
            Public Const NROCOTIZACION As String = "NROCOTIZACION"
            Public Const CODEMP As String = "CODEMP"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const OBS As String = "OBS"
            Public Const PRECIO As String = "PRECIO"
            Public Const FECHACOTIZACION As String = "FECHACOTIZACION"
            Public Const EMBALAJE As String = "EMBALAJE"
            Public Const MARCA As String = "MARCA"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
        End Class ' ColumnNames
    End Class

    Public Class CANTIDADITEMPOREMPRESA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.CANTIDADITEMPOREMPRESA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal nivel_id As Int32, ByVal articulo_id As String) As List(Of Entities.Procedures.CANTIDADITEMPOREMPRESA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "CANTIDADITEMPOREMPRESA"

                Dim Vnivel_id As New SqlParameter("@nivel_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivel_id)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo_id)
                Dim params() As SqlParameter = {Vnivel_id, Varticulo_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.CANTIDADITEMPOREMPRESA
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.Cantidad = IIf(Convert.IsDBNull(dr("Cantidad")), Nothing, dr("Cantidad"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.CANTIDADITEMPOREMPRESA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.CANTIDADITEMPOREMPRESA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla CANTIDADITEMPOREMPRESA
        ''' Fecha de Creación  : miércoles, 16 de diciembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla CANTIDADITEMPOREMPRESA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const CANTIDAD As String = "CANTIDAD"
        End Class ' ColumnNames
    End Class

    Public Class INGRESACOTIZACIONARTICULOEMPRESA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 30
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal nrocotizacion As Int32, ByVal proveed As String, ByVal articulo_id As String, ByVal unimed As String, ByVal cantidad As Decimal, ByVal precio As Decimal, ByVal fecha As DateTime, ByVal usuario As String, ByVal embalaje As String, ByVal marca As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "INGRESACOTIZACIONARTICULOEMPRESA"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VNroCotizacion As New SqlParameter("@NroCotizacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nrocotizacion)
                Dim VProveed As New SqlParameter("@Proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo_id)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, unimed)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cantidad)
                Dim Vprecio As New SqlParameter("@precio", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, precio)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fecha)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, usuario)
                Dim Vembalaje As New SqlParameter("@embalaje", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, embalaje)
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, marca)
                Dim params() As SqlParameter = {VcodEmp, VNroCotizacion, VProveed, Varticulo_id, VuniMed, Vcantidad, Vprecio, Vfecha, Vusuario, Vembalaje, Vmarca}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.INGRESACOTIZACIONARTICULOEMPRESA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla INGRESACOTIZACIONARTICULOEMPRESA
        ''' Fecha de Creación  : miércoles, 2 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla INGRESACOTIZACIONARTICULOEMPRESA. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class RUBROARTICULOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.RUBROARTICULOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.RUBROARTICULOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "RUBROARTICULOS"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.RUBROARTICULOS
                    NewItem.da1_Cod = IIf(Convert.IsDBNull(dr("da1_Cod")), Nothing, dr("da1_Cod"))
                    NewItem.da1_Desc = IIf(Convert.IsDBNull(dr("da1_Desc")), Nothing, dr("da1_Desc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.RUBROARTICULOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.RUBROARTICULOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla RUBROARTICULOS
        ''' Fecha de Creación  : lunes, 21 de diciembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla RUBROARTICULOS. </remarks>
        Public Class ColumnNames
            Public Const DA1_COD As String = "DA1_COD"
            Public Const DA1_DESC As String = "DA1_DESC"
        End Class ' ColumnNames
    End Class

    Public Class ELIMINACOTIZACION
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function EliminaItems(ByVal codemp As String, ByVal articulo_id As String, ByVal proveed As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ELIMINACOTIZACION"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo_id)
                Dim Vproveed As New SqlParameter("@proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed)
                Dim params() As SqlParameter = {VcodEmp, Varticulo_id, Vproveed}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ELIMINACOTIZACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ELIMINACOTIZACION
        ''' Fecha de Creación  : miércoles, 23 de diciembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla ELIMINACOTIZACION. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class ACTUALIZARUBROUSUARIOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal tipo As String, ByVal id_usuario As Int32, ByVal codrubro As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ACTUALIZARUBROUSUARIOS"

                Dim VTipo As New SQLParameter("@Tipo", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipo)
                Dim VId_Usuario As New SQLParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim VcodRubro As New SQLParameter("@codRubro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codrubro)
                Dim params() As SQLParameter = {VTipo, VId_Usuario, VcodRubro}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ACTUALIZARUBROUSUARIOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ACTUALIZARUBROUSUARIOS
        ''' Fecha de Creación  : lunes, 04 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ACTUALIZARUBROUSUARIOS. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    Public Class RUBROUSUARIOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.RUBROUSUARIOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_usuario As Int32) As List(Of Entities.Procedures.RUBROUSUARIOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "RUBROUSUARIOS"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim params() As SqlParameter = {VId_Usuario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.RUBROUSUARIOS
                    NewItem.Incluido = IIf(Convert.IsDBNull(dr("Incluido")), Nothing, dr("Incluido"))
                    NewItem.da1_Cod = IIf(Convert.IsDBNull(dr("da1_Cod")), Nothing, dr("da1_Cod"))
                    NewItem.da1_Desc = IIf(Convert.IsDBNull(dr("da1_Desc")), Nothing, dr("da1_Desc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.RUBROUSUARIOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.RUBROUSUARIOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla RUBROUSUARIOS
        ''' Fecha de Creación  : lunes, 04 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla RUBROUSUARIOS. </remarks>
        Public Class ColumnNames
            Public Const INCLUIDO As String = "INCLUIDO"
            Public Const DA1_COD As String = "DA1_COD"
            Public Const DA1_DESC As String = "DA1_DESC"
        End Class ' ColumnNames
    End Class

    Public Class TRAEFACTURASRECIBIDAS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEFACTURASRECIBIDAS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal fechadesde As DateTime, ByVal fechahasta As DateTime) As List(Of Entities.Procedures.TRAEFACTURASRECIBIDAS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEFACTURASRECIBIDAS"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VfechaDesde As New SqlParameter("@fechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VfechaHasta As New SqlParameter("@fechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim params() As SqlParameter = {VcodEmp, VfechaDesde, VfechaHasta}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEFACTURASRECIBIDAS
                    NewItem.FechaContable = IIf(Convert.IsDBNull(dr("FechaContable")), Nothing, dr("FechaContable"))
                    NewItem.LetraComprobante = IIf(Convert.IsDBNull(dr("LetraComprobante")), Nothing, dr("LetraComprobante"))
                    NewItem.PuntoDeVenta = IIf(Convert.IsDBNull(dr("PuntoDeVenta")), Nothing, dr("PuntoDeVenta"))
                    NewItem.NumeroComp = IIf(Convert.IsDBNull(dr("NumeroComp")), Nothing, dr("NumeroComp"))
                    NewItem.CodigoProoved = IIf(Convert.IsDBNull(dr("CodigoProoved")), Nothing, dr("CodigoProoved"))
                    NewItem.RazonSocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    NewItem.Importe = IIf(Convert.IsDBNull(dr("Importe")), Nothing, dr("Importe"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEFACTURASRECIBIDAS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEFACTURASRECIBIDAS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEFACTURASRECIBIDAS
        ''' Fecha de Creación  : lunes, 04 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEFACTURASRECIBIDAS. </remarks>
        Public Class ColumnNames
            Public Const FECHACONTABLE As String = "FECHACONTABLE"
            Public Const LETRACOMPROBANTE As String = "LETRACOMPROBANTE"
            Public Const PUNTODEVENTA As String = "PUNTODEVENTA"
            Public Const NUMEROCOMP As String = "NUMEROCOMP"
            Public Const CODIGOPROOVED As String = "CODIGOPROOVED"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
            Public Const IMPORTE As String = "IMPORTE"
        End Class ' ColumnNames
    End Class

    Public Class TRAEREQUERIMIENTOITEMSCOTIZADOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMSCOTIZADOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal subrubro As String) As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMSCOTIZADOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREQUERIMIENTOITEMSCOTIZADOS"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VsubRubro As New SqlParameter("@subRubro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, subrubro)
                Dim params() As SqlParameter = {VcodEmp, VsubRubro}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOITEMSCOTIZADOS
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMSCOTIZADOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREQUERIMIENTOITEMSCOTIZADOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMSCOTIZADOS
        ''' Fecha de Creación  : lunes, 21 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMSCOTIZADOS. </remarks>
        Public Class ColumnNames
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
        End Class ' ColumnNames
    End Class

    Public Class AUTORIZACOTIZACION
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal nrocotizacion As Int32, ByVal proveed As String, ByVal articulo As String, ByVal unimed As String, ByVal cantidad As Decimal, ByVal precio As Decimal, ByVal fecha As DateTime, ByVal usuario As String, ByVal embalaje As String, ByVal marca As String, ByVal autorizado As Int32, ByVal finalizado As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "AUTORIZACOTIZACION"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VNroCotizacion As New SqlParameter("@NroCotizacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nrocotizacion)
                Dim Vproveed As New SqlParameter("@proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed)
                Dim Varticulo As New SqlParameter("@articulo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo)
                Dim VUniMed As New SqlParameter("@UniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, unimed)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cantidad)
                Dim Vprecio As New SqlParameter("@precio", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, precio)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fecha)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, usuario)
                Dim Vembalaje As New SqlParameter("@embalaje", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, embalaje)
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, marca)
                Dim Vautorizado As New SqlParameter("@autorizado", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, autorizado)
                Dim Vfinalizado As New SqlParameter("@finalizado", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, finalizado)
                Dim params() As SqlParameter = {VcodEmp, VNroCotizacion, Vproveed, Varticulo, VUniMed, Vcantidad, Vprecio, Vfecha, Vusuario, Vembalaje, Vmarca, Vautorizado, Vfinalizado}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.AUTORIZACOTIZACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla AUTORIZACOTIZACION
        ''' Fecha de Creación  : domingo, 6 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla AUTORIZACOTIZACION. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class TRAEARTICULOSCOTIZADOSPARAORDENDECOMPRA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEARTICULOSCOTIZADOSPARAORDENDECOMPRA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal proveed_id As String, ByVal nrocotizacion As Int32) As List(Of Entities.Procedures.TRAEARTICULOSCOTIZADOSPARAORDENDECOMPRA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEARTICULOSCOTIZADOSPARAORDENDECOMPRA"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed_id)
                Dim VNroCotizacion As New SqlParameter("@NroCotizacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nrocotizacion)
                Dim params() As SqlParameter = {VcodEmp, Vproveed_id, VNroCotizacion}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEARTICULOSCOTIZADOSPARAORDENDECOMPRA
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.Descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    NewItem.marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    NewItem.embalaje = IIf(Convert.IsDBNull(dr("embalaje")), Nothing, dr("embalaje"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.precio = IIf(Convert.IsDBNull(dr("precio")), Nothing, dr("precio"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEARTICULOSCOTIZADOSPARAORDENDECOMPRA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEARTICULOSCOTIZADOSPARAORDENDECOMPRA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEARTICULOSCOTIZADOSPARAORDENDECOMPRA
        ''' Fecha de Creación  : sábado, 19 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEARTICULOSCOTIZADOSPARAORDENDECOMPRA. </remarks>
        Public Class ColumnNames
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const MARCA As String = "MARCA"
            Public Const EMBALAJE As String = "EMBALAJE"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const PRECIO As String = "PRECIO"
        End Class ' ColumnNames
    End Class

    Public Class TRAEPROVEEDORESCOTIZADOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEPROVEEDORESCOTIZADOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.TRAEPROVEEDORESCOTIZADOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEPROVEEDORESCOTIZADOS"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEPROVEEDORESCOTIZADOS
                    NewItem.NroCotizacion = IIf(Convert.IsDBNull(dr("NroCotizacion")), Nothing, dr("NroCotizacion"))
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.RazonSocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEPROVEEDORESCOTIZADOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEPROVEEDORESCOTIZADOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEPROVEEDORESCOTIZADOS
        ''' Fecha de Creación  : viernes, 18 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEPROVEEDORESCOTIZADOS. </remarks>
        Public Class ColumnNames
            Public Const NROCOTIZACION As String = "NROCOTIZACION"
            Public Const CODEMP As String = "CODEMP"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
        End Class ' ColumnNames
    End Class

    Public Class SUBRUBROUSUARIOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.SUBRUBROUSUARIOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_usuario As Int32) As List(Of Entities.Procedures.SUBRUBROUSUARIOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "SUBRUBROUSUARIOS"

                Dim VId_Usuario As New SQLParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim params() As SQLParameter = {VId_Usuario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.SUBRUBROUSUARIOS
                    NewItem.Incluido = IIf(Convert.IsDBNull(dr("Incluido")), Nothing, dr("Incluido"))
                    NewItem.artda2_Cod = IIf(Convert.IsDBNull(dr("artda2_Cod")), Nothing, dr("artda2_Cod"))
                    NewItem.da2_Desc = IIf(Convert.IsDBNull(dr("da2_Desc")), Nothing, dr("da2_Desc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.SUBRUBROUSUARIOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.SUBRUBROUSUARIOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla SUBRUBROUSUARIOS
        ''' Fecha de Creación  : viernes, 22 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla SUBRUBROUSUARIOS. </remarks>
        Public Class ColumnNames
            Public Const INCLUIDO As String = "INCLUIDO"
            Public Const ARTDA2_COD As String = "ARTDA2_COD"
            Public Const DA2_DESC As String = "DA2_DESC"
        End Class ' ColumnNames
    End Class

    Public Class ELIMINASUBRUBROSUSUARIO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_usuario As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ELIMINASUBRUBROSUSUARIO"

                Dim VId_Usuario As New SQLParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim params() As SQLParameter = {VId_Usuario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ELIMINASUBRUBROSUSUARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ELIMINASUBRUBROSUSUARIO
        ''' Fecha de Creación  : viernes, 22 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ELIMINASUBRUBROSUSUARIO. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class TRAESUBRUBROSDELUSUARIO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAESUBRUBROSDELUSUARIO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_usuario As Int32) As List(Of Entities.Procedures.TRAESUBRUBROSDELUSUARIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAESUBRUBROSDELUSUARIO"

                Dim VId_Usuario As New SQLParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim params() As SQLParameter = {VId_Usuario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAESUBRUBROSDELUSUARIO
                    NewItem.artda2_Cod = IIf(Convert.IsDBNull(dr("artda2_Cod")), Nothing, dr("artda2_Cod"))
                    NewItem.da2_Desc = IIf(Convert.IsDBNull(dr("da2_Desc")), Nothing, dr("da2_Desc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAESUBRUBROSDELUSUARIO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAESUBRUBROSDELUSUARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAESUBRUBROSDELUSUARIO
        ''' Fecha de Creación  : lunes, 25 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAESUBRUBROSDELUSUARIO. </remarks>
        Public Class ColumnNames
            Public Const ARTDA2_COD As String = "ARTDA2_COD"
            Public Const DA2_DESC As String = "DA2_DESC"
        End Class ' ColumnNames
    End Class

    Public Class TRAEREQUERIMIENTOSPARAGENERARCOTIZACION
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOSPARAGENERARCOTIZACION)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal subrubro As String, ByVal codemp As String) As List(Of Entities.Procedures.TRAEREQUERIMIENTOSPARAGENERARCOTIZACION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREQUERIMIENTOSPARAGENERARCOTIZACION"

                Dim VsubRubro As New SqlParameter("@subRubro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, subrubro)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VsubRubro, VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOSPARAGENERARCOTIZACION
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroitem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.nivelaut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaentrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.cotizado = IIf(Convert.IsDBNull(dr("Cotizado")), Nothing, dr("Cotizado"))
                    NewItem.subrubro = IIf(Convert.IsDBNull(dr("SubRubro")), Nothing, dr("SubRubro"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOSPARAGENERARCOTIZACION)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREQUERIMIENTOSPARAGENERARCOTIZACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOSPARAGENERARCOTIZACION
        ''' Fecha de Creación  : lunes, 29 de febrero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOSPARAGENERARCOTIZACION. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const COTIZADO As String = "COTIZADO"
            Public Const SUBRUBRO As String = "SUBRUBRO"
        End Class ' ColumnNames
    End Class

    Public Class H_ARTICULOSMARCA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.H_ARTICULOSMARCA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal empresa As String) As List(Of Entities.Procedures.H_ARTICULOSMARCA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "H_ARTICULOSMARCA"

                Dim VsubRubro As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, empresa)
                Dim params() As SqlParameter = {VsubRubro}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.H_ARTICULOSMARCA
                    NewItem.Art_codGen = IIf(Convert.IsDBNull(dr("art_codGen")), Nothing, dr("art_codGen"))
                    NewItem.Art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.Marca1 = IIf(Convert.IsDBNull(dr("marca1")), Nothing, dr("marca1"))
                    NewItem.Marca2 = IIf(Convert.IsDBNull(dr("marca2")), Nothing, dr("marca2"))
                    NewItem.Marca3 = IIf(Convert.IsDBNull(dr("marca3")), Nothing, dr("marca3"))
                    NewItem.Marca4 = IIf(Convert.IsDBNull(dr("marca4")), Nothing, dr("marca4"))
                    NewItem.Marca5 = IIf(Convert.IsDBNull(dr("marca5")), Nothing, dr("marca5"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.H_ARTICULOSMARCA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.H_ARTICULOSMARCA
        End Class 'ITEM

        Public Class ColumnNames
            Public Const art_codGen As String = "art_codGen"
            Public Const art_DescGen As String = "art_DescGen"
            Public Const marca1 As String = "marca1"
            Public Const marca2 As String = "marca2"
            Public Const marca3 As String = "marca3"
            Public Const marca4 As String = "marca4"
            Public Const marca5 As String = "marca5"

        End Class ' ColumnNames
    End Class

    Public Class INGRESAPEDIDOCOTIZACIONARTICULOEMPRESA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal nrocotizacion As Int32, ByVal articulo_id As String, ByVal unimed As String, ByVal cantidad As Decimal, ByVal precio As Decimal, ByVal proveed As String, ByVal fecha As DateTime, ByVal usuario As String, ByVal obs As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "INGRESAPEDIDOCOTIZACIONARTICULOEMPRESA"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VNroCotizacion As New SqlParameter("@NroCotizacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nrocotizacion)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo_id)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, unimed)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cantidad)
                Dim Vprecio As New SqlParameter("@precio", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, precio)
                Dim VProveed As New SqlParameter("@Proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fecha)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, usuario)
                Dim VObs As New SqlParameter("@Obs", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, obs)
                Dim params() As SqlParameter = {VcodEmp, VNroCotizacion, Varticulo_id, VuniMed, Vcantidad, Vprecio, VProveed, Vfecha, Vusuario, VObs}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.INGRESAPEDIDOCOTIZACIONARTICULOEMPRESA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla INGRESAPEDIDOCOTIZACIONARTICULOEMPRESA
        ''' Fecha de Creación  : lunes, 22 de febrero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla INGRESAPEDIDOCOTIZACIONARTICULOEMPRESA. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class MAXNROCOTIZACION
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MAXNROCOTIZACION)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.MAXNROCOTIZACION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MAXNROCOTIZACION"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MAXNROCOTIZACION
                    NewItem.nrocotizacion = IIf(Convert.IsDBNull(dr("NroCotizacion")), Nothing, dr("NroCotizacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MAXNROCOTIZACION)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MAXNROCOTIZACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MAXNROCOTIZACION
        ''' Fecha de Creación  : miércoles, 24 de febrero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MAXNROCOTIZACION. </remarks>
        Public Class ColumnNames
            Public Const NROCOTIZACION As String = "NROCOTIZACION"
        End Class ' ColumnNames
    End Class

    Public Class REQUERIMIENTOS_COTIZADOS_PROVEEDOR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.REQUERIMIENTOS_COTIZADOS_PROVEEDOR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal articulo_id As String, ByVal codemp As String) As List(Of Entities.Procedures.REQUERIMIENTOS_COTIZADOS_PROVEEDOR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "REQUERIMIENTOS_COTIZADOS_PROVEEDOR"

                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo_id)
                Dim Vcodemp As New SqlParameter("@codemp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {Varticulo_id, Vcodemp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.REQUERIMIENTOS_COTIZADOS_PROVEEDOR
                    NewItem.NroCotizacion = IIf(Convert.IsDBNull(dr("NroCotizacion")), Nothing, dr("NroCotizacion"))
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.pro_RazSoc = IIf(Convert.IsDBNull(dr("pro_RazSoc")), Nothing, dr("pro_RazSoc"))
                    NewItem.Cantidad = IIf(Convert.IsDBNull(dr("Cantidad")), Nothing, dr("Cantidad"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.REQUERIMIENTOS_COTIZADOS_PROVEEDOR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.REQUERIMIENTOS_COTIZADOS_PROVEEDOR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla REQUERIMIENTOS_COTIZADOS_PROVEEDOR
        ''' Fecha de Creación  : domingo, 6 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla REQUERIMIENTOS_COTIZADOS_PROVEEDOR. </remarks>
        Public Class ColumnNames
            Public Const NROCOTIZACION As String = "NROCOTIZACION"
            Public Const CODEMP As String = "CODEMP"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const PRO_RAZSOC As String = "PRO_RAZSOC"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const FECHA As String = "FECHA"
        End Class ' ColumnNames
    End Class

    'Public Class ARTICULOSENVIADOSACOTIZAR
    '    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    '    Private _transaction As Data.SqlClient.SqlTransaction
    '    Private _connectionstring As String = Nothing
    '    Private _commandTimeOut As Integer = 60
    '    Protected _itemList As New List(Of Entities.Procedures.ARTICULOSENVIADOSACOTIZAR)
    '    Public Enum ExceptionHandlingEnum
    '        ThrowExceptionHandling
    '        RaiseExceptionHandling
    '    End Enum
    '    Public Event OnError(ByVal ex As Exception)
    '    Public Property Transaction() As Data.SqlClient.SqlTransaction
    '        Get
    '            Return _transaction
    '        End Get
    '        Set(ByVal value As Data.SqlClient.SqlTransaction)
    '            _transaction = value
    '        End Set
    '    End Property
    '    Public Property CommandTimeOut() As Integer
    '        Get
    '            Return _commandTimeOut
    '        End Get
    '        Set(ByVal value As Integer)
    '            _commandTimeOut = value
    '        End Set
    '    End Property
    '    Public Sub New()
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub

    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _transaction = Transaction
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction por Reflexión
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal TransactionOwner As Object)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            Try
    '                Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
    '            Catch ex As Exception
    '                RaiseEvent OnError(New Exception("Error al asignar transacción"))
    '            End Try
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    Public Property ExceptionHandling() As ExceptionHandlingEnum
    '        Get
    '            Return _exceptionHandling
    '        End Get
    '        Set(ByVal value As ExceptionHandlingEnum)
    '            _exceptionHandling = value
    '        End Set
    '    End Property

    '    Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.ARTICULOSENVIADOSACOTIZAR)
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Dim _sqlErr As String = Nothing
    '        Try
    '            _itemList.Clear()
    '            Dim _commandText As String = "ARTICULOSENVIADOSACOTIZAR"

    '            Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
    '            Dim params() As SqlParameter = {VcodEmp}
    '            SqlHelper.CommandTimeout = _commandTimeOut

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '            While dr.Read
    '                Dim NewItem As New Entities.Procedures.ARTICULOSENVIADOSACOTIZAR
    '                NewItem.NroCotizacion = IIf(Convert.IsDBNull(dr("NroCotizacion")), Nothing, dr("NroCotizacion"))
    '                NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
    '                NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
    '                NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
    '                NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
    '                NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
    '                NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
    '                NewItem.UniMed = IIf(Convert.IsDBNull(dr("UniMed")), Nothing, dr("UniMed"))
    '                NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
    '                NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
    '                NewItem.Obs = IIf(Convert.IsDBNull(dr("Obs")), Nothing, dr("Obs"))
    '                _itemList.Add(NewItem)
    '            End While
    '            Return _itemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Conserva el resultado de la última consulta.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ARTICULOSENVIADOSACOTIZAR)
    '        Get
    '            Return _itemList
    '        End Get

    '    End Property

    '    Public Class ITEM
    '        Inherits Entities.Procedures.ARTICULOSENVIADOSACOTIZAR
    '    End Class 'ITEM

    '    ''' Clase         : ColumnNames 
    '    ''' Descripción   : Nombres de Columnas de la tabla ARTICULOSENVIADOSACOTIZAR
    '    ''' Fecha de Creación  : domingo, 6 de marzo de 2016
    '    ''' <remarks> Representa los Nombres de Columnas de la tabla ARTICULOSENVIADOSACOTIZAR. </remarks>
    '    Public Class ColumnNames
    '        Public Const NROCOTIZACION As String = "NROCOTIZACION"
    '        Public Const CODEMP As String = "CODEMP"
    '        Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
    '        Public Const NROITEM As String = "NROITEM"
    '        Public Const ARTICULO_ID As String = "ARTICULO_ID"
    '        Public Const ART_DESCGEN As String = "ART_DESCGEN"
    '        Public Const PROVEED_ID As String = "PROVEED_ID"
    '        Public Const UNIMED As String = "UNIMED"
    '        Public Const CANTIDAD As String = "CANTIDAD"
    '        Public Const FECHA As String = "FECHA"
    '        Public Const OBS As String = "OBS"
    '    End Class ' ColumnNames
    'End Class

    Public Class TRAESUBRUBROSEMPRESA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAESUBRUBROSEMPRESA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.TRAESUBRUBROSEMPRESA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAESUBRUBROSEMPRESA"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAESUBRUBROSEMPRESA
                    NewItem.da2_Cod = IIf(Convert.IsDBNull(dr("da2_Cod")), Nothing, dr("da2_Cod"))
                    NewItem.da2_Desc = IIf(Convert.IsDBNull(dr("da2_Desc")), Nothing, dr("da2_Desc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAESUBRUBROSEMPRESA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAESUBRUBROSEMPRESA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAESUBRUBROSEMPRESA
        ''' Fecha de Creación  : miércoles, 9 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAESUBRUBROSEMPRESA. </remarks>
        Public Class ColumnNames
            Public Const DA2_COD As String = "DA2_COD"
            Public Const DA2_DESC As String = "DA2_DESC"
        End Class ' ColumnNames
    End Class

    Public Class STKMAXIMOIDPLANTILLA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.STKMAXIMOIDPLANTILLA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.STKMAXIMOIDPLANTILLA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "STKMAXIMOIDPLANTILLA"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.STKMAXIMOIDPLANTILLA
                    NewItem.max = IIf(Convert.IsDBNull(dr("MAX")), Nothing, dr("MAX"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.STKMAXIMOIDPLANTILLA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.STKMAXIMOIDPLANTILLA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKMAXIMOIDPLANTILLA
        ''' Fecha de Creación  : martes, 8 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKMAXIMOIDPLANTILLA. </remarks>
        Public Class ColumnNames
            Public Const MAX As String = "MAX"
        End Class ' ColumnNames
    End Class

    Public Class FACTURASCARGADASPROVEEDOR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.FACTURASCARGADASPROVEEDOR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal codprov As String, ByVal fechadesde As DateTime, ByVal fechahasta As DateTime) As List(Of Entities.Procedures.FACTURASCARGADASPROVEEDOR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "FACTURASCARGADASPROVEEDOR"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VcodProv As New SqlParameter("@codProv", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codprov)
                Dim VFechaDesde As New SqlParameter("@FechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VFechaHasta As New SqlParameter("@FechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim params() As SqlParameter = {VcodEmp, VcodProv, VFechaDesde, VFechaHasta}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.FACTURASCARGADASPROVEEDOR
                    NewItem.ccoemp_Codigo = IIf(Convert.IsDBNull(dr("ccoemp_Codigo")), Nothing, dr("ccoemp_Codigo"))
                    NewItem.ccosuc_Cod = IIf(Convert.IsDBNull(dr("ccosuc_Cod")), Nothing, dr("ccosuc_Cod"))
                    NewItem.cco_ID = IIf(Convert.IsDBNull(dr("cco_ID")), Nothing, dr("cco_ID"))
                    NewItem.cco_NroCuota = IIf(Convert.IsDBNull(dr("cco_NroCuota")), Nothing, dr("cco_NroCuota"))
                    NewItem.cco_CodPvt = IIf(Convert.IsDBNull(dr("cco_CodPvt")), Nothing, dr("cco_CodPvt"))
                    NewItem.cco_Letra = IIf(Convert.IsDBNull(dr("cco_Letra")), Nothing, dr("cco_Letra"))
                    NewItem.ccotco_Cod = IIf(Convert.IsDBNull(dr("ccotco_Cod")), Nothing, dr("ccotco_Cod"))
                    NewItem.cco_Nro = IIf(Convert.IsDBNull(dr("cco_Nro")), Nothing, dr("cco_Nro"))
                    NewItem.cco_ImpMonLoc = IIf(Convert.IsDBNull(dr("cco_ImpMonLoc")), Nothing, dr("cco_ImpMonLoc"))
                    NewItem.cco_SaldoMonLoc = IIf(Convert.IsDBNull(dr("cco_SaldoMonLoc")), Nothing, dr("cco_SaldoMonLoc"))
                    NewItem.cco_FEmision = IIf(Convert.IsDBNull(dr("cco_FEmision")), Nothing, dr("cco_FEmision"))
                    NewItem.cco_FContab = IIf(Convert.IsDBNull(dr("cco_FContab")), Nothing, dr("cco_FContab"))
                    NewItem.cco_FVto = IIf(Convert.IsDBNull(dr("cco_FVto")), Nothing, dr("cco_FVto"))
                    NewItem.cco_codPro = IIf(Convert.IsDBNull(dr("cco_codPro")), Nothing, dr("cco_codPro"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.FACTURASCARGADASPROVEEDOR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.FACTURASCARGADASPROVEEDOR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla FACTURASCARGADASPROVEEDOR
        ''' Fecha de Creación  : miércoles, 16 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla FACTURASCARGADASPROVEEDOR. </remarks>
        Public Class ColumnNames
            Public Const CCOEMP_CODIGO As String = "CCOEMP_CODIGO"
            Public Const CCOSUC_COD As String = "CCOSUC_COD"
            Public Const CCO_ID As String = "CCO_ID"
            Public Const CCO_NROCUOTA As String = "CCO_NROCUOTA"
            Public Const CCO_CODPVT As String = "CCO_CODPVT"
            Public Const CCO_LETRA As String = "CCO_LETRA"
            Public Const CCOTCO_COD As String = "CCOTCO_COD"
            Public Const CCO_NRO As String = "CCO_NRO"
            Public Const CCO_IMPMONLOC As String = "CCO_IMPMONLOC"
            Public Const CCO_SALDOMONLOC As String = "CCO_SALDOMONLOC"
            Public Const CCO_FEMISION As String = "CCO_FEMISION"
            Public Const CCO_FCONTAB As String = "CCO_FCONTAB"
            Public Const CCO_FVTO As String = "CCO_FVTO"
            Public Const CCO_CODPRO As String = "CCO_CODPRO"
        End Class ' ColumnNames
    End Class

    Public Class COTIZACIONESPENDIENTESDEINGRESAR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.COTIZACIONESPENDIENTESDEINGRESAR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.COTIZACIONESPENDIENTESDEINGRESAR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "COTIZACIONESPENDIENTESDEINGRESAR"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.COTIZACIONESPENDIENTESDEINGRESAR
                    NewItem.NroCotizacion = IIf(Convert.IsDBNull(dr("NroCotizacion")), Nothing, dr("NroCotizacion"))
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.pro_RazSoc = IIf(Convert.IsDBNull(dr("pro_RazSoc")), Nothing, dr("pro_RazSoc"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.COTIZACIONESPENDIENTESDEINGRESAR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.COTIZACIONESPENDIENTESDEINGRESAR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COTIZACIONESPENDIENTESDEINGRESAR
        ''' Fecha de Creación  : miércoles, 16 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COTIZACIONESPENDIENTESDEINGRESAR. </remarks>
        Public Class ColumnNames
            Public Const NROCOTIZACION As String = "NROCOTIZACION"
            Public Const CODEMP As String = "CODEMP"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const PRO_RAZSOC As String = "PRO_RAZSOC"
            Public Const FECHA As String = "FECHA"
        End Class ' ColumnNames
    End Class

    Public Class ARTICULOSSEGUNCOTIZACION
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ARTICULOSSEGUNCOTIZACION)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal nrocotizacion As Int32, ByVal codemp As String) As List(Of Entities.Procedures.ARTICULOSSEGUNCOTIZACION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ARTICULOSSEGUNCOTIZACION"

                Dim VNroCotizacion As New SqlParameter("@NroCotizacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nrocotizacion)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VNroCotizacion, VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ARTICULOSSEGUNCOTIZACION
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.Obs = IIf(Convert.IsDBNull(dr("Obs")), Nothing, dr("Obs"))
                    NewItem.NroCotizacion = IIf(Convert.IsDBNull(dr("NroCotizacion")), Nothing, dr("NroCotizacion"))
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.RazonSocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    NewItem.Embalaje = IIf(Convert.IsDBNull(dr("Embalaje")), Nothing, dr("Embalaje"))
                    NewItem.Marca = IIf(Convert.IsDBNull(dr("Marca")), Nothing, dr("Marca"))
                    NewItem.FechaCotizacion = IIf(Convert.IsDBNull(dr("FechaCotizacion")), Nothing, dr("FechaCotizacion"))
                    NewItem.UniMed = IIf(Convert.IsDBNull(dr("UniMed")), Nothing, dr("UniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.Precio = IIf(Convert.IsDBNull(dr("Precio")), Nothing, dr("Precio"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ARTICULOSSEGUNCOTIZACION)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ARTICULOSSEGUNCOTIZACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ARTICULOSSEGUNCOTIZACION
        ''' Fecha de Creación  : miércoles, 16 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ARTICULOSSEGUNCOTIZACION. </remarks>
        Public Class ColumnNames
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const OBS As String = "OBS"
            Public Const NROCOTIZACION As String = "NROCOTIZACION"
            Public Const CODEMP As String = "CODEMP"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
            Public Const EMBALAJE As String = "EMBALAJE"
            Public Const MARCA As String = "MARCA"
            Public Const FECHACOTIZACION As String = "FECHACOTIZACION"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const PRECIO As String = "PRECIO"
        End Class ' ColumnNames
    End Class

    Public Class INSERTAREQUERIMIENTOORDENCOMPRA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Add(ByVal codemp As String, ByVal nrocotizacion As Int32, ByVal ordencompra_id As Int32, ByVal nroitemoc As Int32, ByVal articulo_id As String, ByVal proveed_id As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "INSERTAREQUERIMIENTOORDENCOMPRA"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VNroCotizacion As New SqlParameter("@NroCotizacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nrocotizacion)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ordencompra_id)
                Dim VnroItemOC As New SqlParameter("@nroItemOC", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nroitemoc)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo_id)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed_id)
                Dim params() As SqlParameter = {VcodEmp, VNroCotizacion, VordenCompra_id, VnroItemOC, Varticulo_id, Vproveed_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.INSERTAREQUERIMIENTOORDENCOMPRA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla INSERTAREQUERIMIENTOORDENCOMPRA
        ''' Fecha de Creación  : sábado, 19 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla INSERTAREQUERIMIENTOORDENCOMPRA. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class SUBRUBROARTICULOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.SUBRUBROARTICULOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.SUBRUBROARTICULOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "SUBRUBROARTICULOS"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.SUBRUBROARTICULOS
                    NewItem.da2_Cod = IIf(Convert.IsDBNull(dr("da2_Cod")), Nothing, dr("da2_Cod"))
                    NewItem.da2_Desc = IIf(Convert.IsDBNull(dr("da2_Desc")), Nothing, dr("da2_Desc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.SUBRUBROARTICULOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.SUBRUBROARTICULOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla SUBRUBROARTICULOS
        ''' Fecha de Creación  : lunes, 21 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla SUBRUBROARTICULOS. </remarks>
        Public Class ColumnNames
            Public Const DA2_COD As String = "DA2_COD"
            Public Const DA2_DESC As String = "DA2_DESC"
        End Class ' ColumnNames
    End Class

    Public Class PROXIMONROSOLICITUD
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PROXIMONROSOLICITUD)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.PROXIMONROSOLICITUD)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PROXIMONROSOLICITUD"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PROXIMONROSOLICITUD
                    NewItem.NroSolicitud = IIf(Convert.IsDBNull(dr("NroSolicitud")), Nothing, dr("NroSolicitud"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PROXIMONROSOLICITUD)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PROXIMONROSOLICITUD
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PROXIMONROSOLICITUD
        ''' Fecha de Creación  : miércoles, 30 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PROXIMONROSOLICITUD. </remarks>
        Public Class ColumnNames
            Public Const NROSOLICITUD As String = "NROSOLICITUD"
        End Class ' ColumnNames
    End Class

    Public Class PROXIMOCODPROVISORIO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PROXIMOCODPROVISORIO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.PROXIMOCODPROVISORIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PROXIMOCODPROVISORIO"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PROXIMOCODPROVISORIO
                    NewItem.CodProvisorio = IIf(Convert.IsDBNull(dr("CodProvisorio")), Nothing, dr("CodProvisorio"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PROXIMOCODPROVISORIO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PROXIMOCODPROVISORIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PROXIMOCODPROVISORIO
        ''' Fecha de Creación  : miércoles, 6 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PROXIMOCODPROVISORIO. </remarks>
        Public Class ColumnNames
            Public Const CODPROVISORIO As String = "CODPROVISORIO"
        End Class ' ColumnNames
    End Class

    Public Class TRAEOBRASSOCIALESDATATECH
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEOBRASSOCIALESDATATECH)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.TRAEOBRASSOCIALESDATATECH)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEOBRASSOCIALESDATATECH"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEOBRASSOCIALESDATATECH
                    NewItem.ins = IIf(Convert.IsDBNull(dr("INS")), Nothing, dr("INS"))
                    NewItem.des = IIf(Convert.IsDBNull(dr("DES")), Nothing, dr("DES"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEOBRASSOCIALESDATATECH)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEOBRASSOCIALESDATATECH
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEOBRASSOCIALESDATATECH
        ''' Fecha de Creación  : viernes, 8 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEOBRASSOCIALESDATATECH. </remarks>
        Public Class ColumnNames
            Public Const INS As String = "INS"
            Public Const DES As String = "DES"
        End Class ' ColumnNames
    End Class

    Public Class ACTULIZAARTICULOSPROVISORIOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal requerimiento_id As Int32, ByVal nroitem As Int32, ByVal articulo As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ACTULIZAARTICULOSPROVISORIOS"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, requerimiento_id)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nroitem)
                Dim Varticulo As New SqlParameter("@articulo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnroItem, Varticulo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ACTULIZAARTICULOSPROVISORIOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ACTULIZAARTICULOSPROVISORIOS
        ''' Fecha de Creación  : lunes, 11 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ACTULIZAARTICULOSPROVISORIOS. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class PEDIENTEENTREGAARTICULO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PEDIENTEENTREGAARTICULO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal articulo_id As String) As List(Of Entities.Procedures.PEDIENTEENTREGAARTICULO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PEDIENTEENTREGAARTICULO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo_id)
                Dim params() As SqlParameter = {VcodEmp, Varticulo_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PEDIENTEENTREGAARTICULO
                    NewItem.Diferencia = IIf(Convert.IsDBNull(dr("Diferencia")), Nothing, dr("Diferencia"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PEDIENTEENTREGAARTICULO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PEDIENTEENTREGAARTICULO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PEDIENTEENTREGAARTICULO
        ''' Fecha de Creación  : miércoles, 13 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PEDIENTEENTREGAARTICULO. </remarks>
        Public Class ColumnNames
            Public Const DIFERENCIA As String = "DIFERENCIA"
        End Class ' ColumnNames
    End Class

    Public Class PROVEEDORESXSUBRUBRO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PROVEEDORESXSUBRUBRO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal subrubro As String) As List(Of Entities.Procedures.PROVEEDORESXSUBRUBRO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PROVEEDORESXSUBRUBRO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VsubRubro As New SqlParameter("@subRubro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, subrubro)
                Dim params() As SqlParameter = {VcodEmp, VsubRubro}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PROVEEDORESXSUBRUBRO
                    NewItem.pro_Cod = IIf(Convert.IsDBNull(dr("pro_Cod")), Nothing, dr("pro_Cod"))
                    NewItem.pro_RazSoc = IIf(Convert.IsDBNull(dr("pro_RazSoc")), Nothing, dr("pro_RazSoc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PROVEEDORESXSUBRUBRO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PROVEEDORESXSUBRUBRO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PROVEEDORESXSUBRUBRO
        ''' Fecha de Creación  : lunes, 25 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PROVEEDORESXSUBRUBRO. </remarks>
        Public Class ColumnNames
            Public Const PRO_COD As String = "PRO_COD"
            Public Const PRO_RAZSOC As String = "PRO_RAZSOC"
        End Class ' ColumnNames
    End Class

    Public Class EQUIVALENCIAARTICULOPROVEED
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.EQUIVALENCIAARTICULOPROVEED)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal articulo_id As String, ByVal proveed_id As String) As List(Of Entities.Procedures.EQUIVALENCIAARTICULOPROVEED)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EQUIVALENCIAARTICULOPROVEED"

                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo_id)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed_id)
                Dim params() As SqlParameter = {Varticulo_id, Vproveed_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.EQUIVALENCIAARTICULOPROVEED
                    NewItem.articulo_Proveed = IIf(Convert.IsDBNull(dr("articulo_Proveed")), Nothing, dr("articulo_Proveed"))
                    NewItem.DescripcionProveed = IIf(Convert.IsDBNull(dr("DescripcionProveed")), Nothing, dr("DescripcionProveed"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.EQUIVALENCIAARTICULOPROVEED)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.EQUIVALENCIAARTICULOPROVEED
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EQUIVALENCIAARTICULOPROVEED
        ''' Fecha de Creación  : miércoles, 27 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EQUIVALENCIAARTICULOPROVEED. </remarks>
        Public Class ColumnNames
            Public Const ARTICULO_PROVEED As String = "ARTICULO_PROVEED"
            Public Const DESCRIPCIONPROVEED As String = "DESCRIPCIONPROVEED"
        End Class ' ColumnNames
    End Class

    'Public Class ACTUALIZA_OBS_OC
    '    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    '    Private _transaction As Data.SqlClient.SqlTransaction
    '    Private _connectionstring As String = Nothing
    '    Private _commandTimeOut As Integer = 60
    '    Protected _itemList As New ArrayList
    '    Public Enum ExceptionHandlingEnum
    '        ThrowExceptionHandling
    '        RaiseExceptionHandling
    '    End Enum
    '    Public Event OnError(ByVal ex As Exception)
    '    Public Property Transaction() As Data.SqlClient.SqlTransaction
    '        Get
    '            Return _transaction
    '        End Get
    '        Set(ByVal value As Data.SqlClient.SqlTransaction)
    '            _transaction = value
    '        End Set
    '    End Property
    '    Public Property CommandTimeOut() As Integer
    '        Get
    '            Return _commandTimeOut
    '        End Get
    '        Set(ByVal value As Integer)
    '            _commandTimeOut = value
    '        End Set
    '    End Property
    '    Public Sub New()
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub

    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _transaction = Transaction
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction por Reflexión
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal TransactionOwner As Object)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            Try
    '                Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
    '            Catch ex As Exception
    '                RaiseEvent OnError(New Exception("Error al asignar transacción"))
    '            End Try
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    Public Property ExceptionHandling() As ExceptionHandlingEnum
    '        Get
    '            Return _exceptionHandling
    '        End Get
    '        Set(ByVal value As ExceptionHandlingEnum)
    '            _exceptionHandling = value
    '        End Set
    '    End Property

    '    Public Function Items(ByVal codemp As String, ByVal nro As Int32, ByVal obs As String, ByVal proveed As String, ByVal pedidodiario As Boolean, ByVal sectorentrega As Int32) As Object
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Dim _sqlErr As String = Nothing
    '        Try
    '            _itemList.Clear()
    '            Dim _commandText As String = "ACTUALIZA_OBS_OC"

    '            Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
    '            Dim Vnro As New SqlParameter("@nro", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nro)
    '            Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, obs)
    '            Dim VProveed As New SqlParameter("@Proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed)
    '            Dim VPedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, pedidodiario)
    '            Dim VsectorEntrega As New SqlParameter("@sectorEntrega", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sectorentrega)
    '            Dim params() As SqlParameter = {VcodEmp, Vnro, Vobs, VProveed, VPedidoDiario, VsectorEntrega}
    '            SqlHelper.CommandTimeout = _commandTimeOut

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '            While dr.Read
    '                Dim _rowsItemList As New ArrayList
    '                For count As Int32 = 0 To dr.FieldCount - 1
    '                    _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

    '                Next
    '                _itemList.Add(_rowsItemList)

    '            End While
    '            Return _itemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Conserva el resultado de la última consulta.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public ReadOnly Property Resultset() As ArrayList
    '        Get
    '            Return _itemList
    '        End Get

    '    End Property

    '    Public Class ITEM
    '        Inherits Entities.Procedures.ACTUALIZA_OBS_OC
    '    End Class 'ITEM

    '    ''' Clase         : ColumnNames 
    '    ''' Descripción   : Nombres de Columnas de la tabla ACTUALIZA_OBS_OC
    '    ''' Fecha de Creación  : viernes, 21 de octubre de 2016
    '    ''' <remarks> Representa los Nombres de Columnas de la tabla ACTUALIZA_OBS_OC. </remarks>
    '    Public Class ColumnNames
    '    End Class ' ColumnNames
    'End Class

    Public Class ACTUALIZA_OBS_OC
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal nro As Int32, ByVal obs As String, ByVal proveed As String, ByVal pedidodiario As Boolean, ByVal sectorentrega As Int32, ByVal tipoprorrateo As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ACTUALIZA_OBS_OC"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vnro As New SqlParameter("@nro", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nro)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, obs)
                Dim VProveed As New SqlParameter("@Proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proveed)
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, pedidodiario)
                Dim VsectorEntrega As New SqlParameter("@sectorEntrega", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sectorentrega)
                Dim VtipoProrrateo As New SqlParameter("@tipoProrrateo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipoprorrateo)
                Dim params() As SqlParameter = {VcodEmp, Vnro, Vobs, VProveed, VpedidoDiario, VsectorEntrega, VtipoProrrateo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ACTUALIZA_OBS_OC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ACTUALIZA_OBS_OC
        ''' Fecha de Creación  : miércoles, 7 de marzo de 2018
        ''' <remarks> Representa los Nombres de Columnas de la tabla ACTUALIZA_OBS_OC. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class ELIMINASECTORAUTORIZAUSUARIO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_usuario As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ELIMINASECTORAUTORIZAUSUARIO"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim params() As SqlParameter = {VId_Usuario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ELIMINASECTORAUTORIZAUSUARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ELIMINASECTORAUTORIZAUSUARIO
        ''' Fecha de Creación  : lunes, 9 de mayo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ELIMINASECTORAUTORIZAUSUARIO. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    Public Class SECTORESAUTORIZAUSUARIO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.SECTORESAUTORIZAUSUARIO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_usuario As Int32) As List(Of Entities.Procedures.SECTORESAUTORIZAUSUARIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "SECTORESAUTORIZAUSUARIO"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim params() As SqlParameter = {VId_Usuario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.SECTORESAUTORIZAUSUARIO
                    NewItem.Incluido = IIf(Convert.IsDBNull(dr("Incluido")), Nothing, dr("Incluido"))
                    NewItem.sectorRequerimiento = IIf(Convert.IsDBNull(dr("sectorRequerimiento")), Nothing, dr("sectorRequerimiento"))
                    NewItem.Descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.SECTORESAUTORIZAUSUARIO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.SECTORESAUTORIZAUSUARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla SECTORESAUTORIZAUSUARIO
        ''' Fecha de Creación  : lunes, 9 de mayo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla SECTORESAUTORIZAUSUARIO. </remarks>
        Public Class ColumnNames
            Public Const INCLUIDO As String = "INCLUIDO"
            Public Const SECTORREQUERIMIENTO As String = "SECTORREQUERIMIENTO"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class

    Public Class COMUSUARIOAUTORIZAREQUERIMIENTOS_ADD
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_usuario As Int32, ByVal sectorrequerimiento As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "COMUSUARIOAUTORIZAREQUERIMIENTOS_ADD"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim VsectorRequerimiento As New SqlParameter("@sectorRequerimiento", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sectorrequerimiento)
                Dim params() As SqlParameter = {VId_Usuario, VsectorRequerimiento}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.COMUSUARIOAUTORIZAREQUERIMIENTOS_ADD
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMUSUARIOAUTORIZAREQUERIMIENTOS_ADD
        ''' Fecha de Creación  : lunes, 9 de mayo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMUSUARIOAUTORIZAREQUERIMIENTOS_ADD. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class ACTUALIZA_OBS_REQ
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal nro As Int32, ByVal obs As String, ByVal entrega_id As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ACTUALIZA_OBS_REQ"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vnro As New SqlParameter("@nro", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nro)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, obs)
                Dim VEntrega_id As New SqlParameter("@Entrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, entrega_id)
                Dim params() As SqlParameter = {VcodEmp, Vnro, Vobs, VEntrega_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ACTUALIZA_OBS_REQ
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ACTUALIZA_OBS_REQ
        ''' Fecha de Creación  : lunes, 23 de mayo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ACTUALIZA_OBS_REQ. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class FINALIZA_ANULA_OC
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal tipo As String, ByVal codemp As String, ByVal nrooc As Int32, ByVal motivo As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "FINALIZA_ANULA_OC"

                Dim VTipo As New SqlParameter("@Tipo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipo)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VnroOC As New SqlParameter("@nroOC", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nrooc)
                Dim VMotivo As New SqlParameter("@Motivo", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, motivo)
                Dim params() As SqlParameter = {VTipo, VcodEmp, VnroOC, VMotivo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.FINALIZA_ANULA_OC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla FINALIZA_ANULA_OC
        ''' Fecha de Creación  : jueves, 26 de mayo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla FINALIZA_ANULA_OC. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class MODIFICAITEMOCAUTORIZADA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal ordencompra_id As Int32, ByVal nroitem As Int32, ByVal cantidad As Decimal, ByVal cantoriginal As Decimal, ByVal precio As Decimal, ByVal preciooriginal As Decimal, ByVal embalaje As String, ByVal marca As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MODIFICAITEMOCAUTORIZADA"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ordencompra_id)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nroitem)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cantidad)
                Dim VcantOriginal As New SqlParameter("@cantOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cantoriginal)
                Dim Vprecio As New SqlParameter("@precio", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, precio)
                Dim VprecioOriginal As New SqlParameter("@precioOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, preciooriginal)
                Dim Vembalaje As New SqlParameter("@embalaje", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, embalaje)
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, marca)
                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VnroItem, Vcantidad, VcantOriginal, Vprecio, VprecioOriginal, Vembalaje, Vmarca}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MODIFICAITEMOCAUTORIZADA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MODIFICAITEMOCAUTORIZADA
        ''' Fecha de Creación  : lunes, 30 de mayo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MODIFICAITEMOCAUTORIZADA. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class ORDENCOMPRA_PARA_MODIFICAR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ORDENCOMPRA_PARA_MODIFICAR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal tipo As Int32) As List(Of Entities.Procedures.ORDENCOMPRA_PARA_MODIFICAR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ORDENCOMPRA_PARA_MODIFICAR"

                Dim VTipo As New SqlParameter("@Tipo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipo)
                Dim params() As SqlParameter = {VTipo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ORDENCOMPRA_PARA_MODIFICAR
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordenCompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.RazonSocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.tipoOc_id = IIf(Convert.IsDBNull(dr("tipoOc_id")), Nothing, dr("tipoOc_id"))
                    NewItem.modificaCosto = IIf(Convert.IsDBNull(dr("modificaCosto")), Nothing, dr("modificaCosto"))
                    NewItem.condicionPago_id = IIf(Convert.IsDBNull(dr("condicionPago_id")), Nothing, dr("condicionPago_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.Email = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
                    NewItem.usuarioAutoriza = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.pedidodiario = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    NewItem.Sectorentrega_id = IIf(Convert.IsDBNull(dr("sectorEntrega_id")), Nothing, dr("sectorEntrega_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ORDENCOMPRA_PARA_MODIFICAR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ORDENCOMPRA_PARA_MODIFICAR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ORDENCOMPRA_PARA_MODIFICAR
        ''' Fecha de Creación  : miércoles, 12 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ORDENCOMPRA_PARA_MODIFICAR. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const FECHA As String = "FECHA"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const OBS As String = "OBS"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const TIPOOC_ID As String = "TIPOOC_ID"
            Public Const MODIFICACOSTO As String = "MODIFICACOSTO"
            Public Const CONDICIONPAGO_ID As String = "CONDICIONPAGO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const EMAIL As String = "EMAIL"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
            Public Const SECTORENTREGA_ID As String = "SECTORENTREGA_ID"
        End Class ' ColumnNames
    End Class


    Public Class REQUERIMIENTOS_PARA_MODIFICAR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.REQUERIMIENTOS_PARA_MODIFICAR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal sector As Int32, ByVal idUsuario As Int32) As List(Of Entities.Procedures.REQUERIMIENTOS_PARA_MODIFICAR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "REQUERIMIENTOS_PARA_MODIFICAR"

                Dim VSector As New SqlParameter("@Sector", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sector)
                Dim VidUsuario As New SqlParameter("@idUsuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, idUsuario)
                Dim params() As SqlParameter = {VSector, VidUsuario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.REQUERIMIENTOS_PARA_MODIFICAR
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("OBS")), Nothing, dr("OBS"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    NewItem.sectorrequerimiento_id = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.usuarioautoriza = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.Lugarentrega = IIf(Convert.IsDBNull(dr("LugarEntrega")), Nothing, dr("LugarEntrega"))
                    NewItem.Entrega_id = IIf(Convert.IsDBNull(dr("Entrega_id")), Nothing, dr("Entrega_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.REQUERIMIENTOS_PARA_MODIFICAR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.REQUERIMIENTOS_PARA_MODIFICAR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla REQUERIMIENTOS_PARA_MODIFICAR
        ''' Fecha de Creación  : martes, 9 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla REQUERIMIENTOS_PARA_MODIFICAR. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const OBS As String = "OBS"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const LUGARENTREGA As String = "LUGARENTREGA"
            Public Const ENTREGA_ID As String = "ENTREGA_ID"
        End Class ' ColumnNames
    End Class

    Public Class ANULA_REQUERIMIENTO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal nrorequerimiento As Int32, ByVal motivo As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ANULA_REQUERIMIENTO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VNroRequerimiento As New SqlParameter("@NroRequerimiento", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nrorequerimiento)
                Dim VMotivo As New SqlParameter("@Motivo", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, motivo)
                Dim params() As SqlParameter = {VcodEmp, VNroRequerimiento, VMotivo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ANULA_REQUERIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ANULA_REQUERIMIENTO
        ''' Fecha de Creación  : miércoles, 22 de junio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ANULA_REQUERIMIENTO. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class ORDENCOMPRA_PARA_ANULAR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ORDENCOMPRA_PARA_ANULAR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.ORDENCOMPRA_PARA_ANULAR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ORDENCOMPRA_PARA_ANULAR"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ORDENCOMPRA_PARA_ANULAR
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordenCompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.RazonSocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.tipoOc_id = IIf(Convert.IsDBNull(dr("tipoOc_id")), Nothing, dr("tipoOc_id"))
                    NewItem.modificaCosto = IIf(Convert.IsDBNull(dr("modificaCosto")), Nothing, dr("modificaCosto"))
                    NewItem.condicionPago_id = IIf(Convert.IsDBNull(dr("condicionPago_id")), Nothing, dr("condicionPago_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.Email = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
                    NewItem.usuarioAutoriza = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.pedidoDiario = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ORDENCOMPRA_PARA_ANULAR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ORDENCOMPRA_PARA_ANULAR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ORDENCOMPRA_PARA_ANULAR
        ''' Fecha de Creación  : miércoles, 12 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ORDENCOMPRA_PARA_ANULAR. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const FECHA As String = "FECHA"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const OBS As String = "OBS"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const TIPOOC_ID As String = "TIPOOC_ID"
            Public Const MODIFICACOSTO As String = "MODIFICACOSTO"
            Public Const CONDICIONPAGO_ID As String = "CONDICIONPAGO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const EMAIL As String = "EMAIL"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
        End Class ' ColumnNames
    End Class

    Public Class ANULA_OC
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal ordencompra_id As Int32, ByVal fechaanulacion As DateTime, ByVal motivo As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ANULA_OC"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VOrdenCompra_id As New SqlParameter("@OrdenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ordencompra_id)
                Dim VfechaAnulacion As New SqlParameter("@fechaAnulacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechaanulacion)
                Dim Vmotivo As New SqlParameter("@motivo", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, motivo)
                Dim params() As SqlParameter = {VcodEmp, VOrdenCompra_id, VfechaAnulacion, Vmotivo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ANULA_OC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ANULA_OC
        ''' Fecha de Creación  : lunes, 4 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ANULA_OC. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class COM_CUENTAS_USUARIO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.COM_CUENTAS_USUARIO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_usuario As Int32) As List(Of Entities.Procedures.COM_CUENTAS_USUARIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "COM_CUENTAS_USUARIO"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim params() As SqlParameter = {VId_Usuario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.COM_CUENTAS_USUARIO
                    NewItem.Incluye = IIf(Convert.IsDBNull(dr("Incluye")), Nothing, dr("Incluye"))
                    NewItem.agr_codigo = IIf(Convert.IsDBNull(dr("agr_codigo")), Nothing, dr("agr_codigo"))
                    NewItem.com_valor = IIf(Convert.IsDBNull(dr("com_valor")), Nothing, dr("com_valor"))
                    NewItem.cta_descrip = IIf(Convert.IsDBNull(dr("cta_descrip")), Nothing, dr("cta_descrip"))
                    NewItem.cta_nrocta = IIf(Convert.IsDBNull(dr("cta_nrocta")), Nothing, dr("cta_nrocta"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.COM_CUENTAS_USUARIO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.COM_CUENTAS_USUARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COM_CUENTAS_USUARIO
        ''' Fecha de Creación  : martes, 26 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COM_CUENTAS_USUARIO. </remarks>
        Public Class ColumnNames
            Public Const INCLUYE As String = "INCLUYE"
            Public Const AGR_CODIGO As String = "AGR_CODIGO"
            Public Const COM_VALOR As String = "COM_VALOR"
            Public Const CTA_DESCRIP As String = "CTA_DESCRIP"
            Public Const CTA_NROCTA As String = "CTA_NROCTA"
        End Class ' ColumnNames
    End Class

    Public Class USUARIO_CON_CUENTAS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.USUARIO_CON_CUENTAS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.USUARIO_CON_CUENTAS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "USUARIO_CON_CUENTAS"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.USUARIO_CON_CUENTAS
                    NewItem.Id_Usuario = IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario"))
                    NewItem.Email = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.USUARIO_CON_CUENTAS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.USUARIO_CON_CUENTAS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla USUARIO_CON_CUENTAS
        ''' Fecha de Creación  : martes, 26 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla USUARIO_CON_CUENTAS. </remarks>
        Public Class ColumnNames
            Public Const ID_USUARIO As String = "ID_USUARIO"
            Public Const EMAIL As String = "EMAIL"
        End Class ' ColumnNames
    End Class

    Public Class ACTUALIZACUENTASCONTABLECOMPRAS_ARTICULOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal articulo As String, ByVal cuenta As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ACTUALIZACUENTASCONTABLECOMPRAS_ARTICULOS"

                Dim VArticulo As New SqlParameter("@Articulo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo)
                Dim VCuenta As New SqlParameter("@Cuenta", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cuenta)
                Dim params() As SqlParameter = {VArticulo, VCuenta}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ACTUALIZACUENTASCONTABLECOMPRAS_ARTICULOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ACTUALIZACUENTASCONTABLECOMPRAS_ARTICULOS
        ''' Fecha de Creación  : miércoles, 3 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ACTUALIZACUENTASCONTABLECOMPRAS_ARTICULOS. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    Public Class PLAN_DE_CUENTA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PLAN_DE_CUENTA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.PLAN_DE_CUENTA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PLAN_DE_CUENTA"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PLAN_DE_CUENTA
                    NewItem.com_valor = IIf(Convert.IsDBNull(dr("com_valor")), Nothing, dr("com_valor"))
                    NewItem.cta_descrip = IIf(Convert.IsDBNull(dr("cta_descrip")), Nothing, dr("cta_descrip"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PLAN_DE_CUENTA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PLAN_DE_CUENTA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PLAN_DE_CUENTA
        ''' Fecha de Creación  : miércoles, 3 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PLAN_DE_CUENTA. </remarks>
        Public Class ColumnNames
            Public Const COM_VALOR As String = "COM_VALOR"
            Public Const CTA_DESCRIP As String = "CTA_DESCRIP"
        End Class ' ColumnNames
    End Class

    Public Class TRAEMARCAARTICULOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEMARCAARTICULOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.TRAEMARCAARTICULOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEMARCAARTICULOS"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEMARCAARTICULOS
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.Marca = IIf(Convert.IsDBNull(dr("Marca")), Nothing, dr("Marca"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEMARCAARTICULOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEMARCAARTICULOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEMARCAARTICULOS
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEMARCAARTICULOS. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const MARCA As String = "MARCA"
        End Class ' ColumnNames
    End Class

    Public Class GENERAPRORRATEOEMPRESA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 500
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fechacontdesde As DateTime, ByVal fechaconthasta As DateTime, ByVal porcdistrven As Double) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "GENERAPRORRATEOEMPRESA"

                Dim VFechaContDesde As New SqlParameter("@FechaContDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechacontdesde)
                Dim VFechaContHasta As New SqlParameter("@FechaContHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechaconthasta)
                Dim VPorcDistrVen As New SqlParameter("@PorcDistrVen", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, porcdistrven)
                Dim params() As SqlParameter = {VFechaContDesde, VFechaContHasta, VPorcDistrVen}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.GENERAPRORRATEOEMPRESA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla GENERAPRORRATEOEMPRESA
        ''' Fecha de Creación  : lunes, 5 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla GENERAPRORRATEOEMPRESA. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class GENERAPRORRATEOEMPRESA_RSC
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDARSC").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDARSC").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDARSC").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fechacontdesde As DateTime, ByVal fechaconthasta As DateTime) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "GENERAPRORRATEOEMPRESA_RSC"

                Dim VFechaContDesde As New SqlParameter("@FechaContDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechacontdesde)
                Dim VFechaContHasta As New SqlParameter("@FechaContHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechaconthasta)
                Dim params() As SqlParameter = {VFechaContDesde, VFechaContHasta}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.GENERAPRORRATEOEMPRESA_RSC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla GENERAPRORRATEOEMPRESA_RSC
        ''' Fecha de Creación  : lunes, 5 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla GENERAPRORRATEOEMPRESA_RSC. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class ORDENCOMPRA_PARA_MODIFICAR_FECHA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ORDENCOMPRA_PARA_MODIFICAR_FECHA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fechadesde As DateTime, ByVal fechahasta As DateTime) As List(Of Entities.Procedures.ORDENCOMPRA_PARA_MODIFICAR_FECHA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ORDENCOMPRA_PARA_MODIFICAR_FECHA"

                Dim VFechaDesde As New SqlParameter("@FechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VFechaHasta As New SqlParameter("@FechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim params() As SqlParameter = {VFechaDesde, VFechaHasta}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ORDENCOMPRA_PARA_MODIFICAR_FECHA
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordenCompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.RazonSocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.tipoOc_id = IIf(Convert.IsDBNull(dr("tipoOc_id")), Nothing, dr("tipoOc_id"))
                    NewItem.modificaCosto = IIf(Convert.IsDBNull(dr("modificaCosto")), Nothing, dr("modificaCosto"))
                    NewItem.condicionPago_id = IIf(Convert.IsDBNull(dr("condicionPago_id")), Nothing, dr("condicionPago_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.Email = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
                    NewItem.usuarioAutoriza = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.pedidodiario = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    NewItem.Sectorentrega_id = IIf(Convert.IsDBNull(dr("sectorEntrega_id")), Nothing, dr("sectorEntrega_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ORDENCOMPRA_PARA_MODIFICAR_FECHA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ORDENCOMPRA_PARA_MODIFICAR_FECHA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ORDENCOMPRA_PARA_MODIFICAR_FECHA
        ''' Fecha de Creación  : lunes, 17 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ORDENCOMPRA_PARA_MODIFICAR_FECHA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const FECHA As String = "FECHA"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const OBS As String = "OBS"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const TIPOOC_ID As String = "TIPOOC_ID"
            Public Const MODIFICACOSTO As String = "MODIFICACOSTO"
            Public Const CONDICIONPAGO_ID As String = "CONDICIONPAGO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const EMAIL As String = "EMAIL"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
            Public Const SECTORENTREGA_ID As String = "SECTORENTREGA_ID"
        End Class ' ColumnNames
    End Class

    Public Class EXCLUYEITEMSOC
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Excluir(ByVal codemp As String, ByVal idoc As Int32, ByVal nroitem As Int32, ByVal motivo As String, ByVal usuario As String, ByVal excluido As Boolean) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EXCLUYEITEMSOC"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VidOC As New SqlParameter("@idOC", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, idoc)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nroitem)
                Dim VMotivo As New SqlParameter("@Motivo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, motivo)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, usuario)
                Dim Vexcluido As New SqlParameter("@excluido", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, excluido)
                Dim params() As SqlParameter = {VcodEmp, VidOC, VnroItem, VMotivo, Vusuario, Vexcluido}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            'Inherits Entities.Procedures.EXCLUYEITEMSOC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EXCLUYEITEMSOC
        ''' Fecha de Creación  : lunes, 17 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EXCLUYEITEMSOC. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class TRAELUGARESENTREGA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAELUGARESENTREGA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.TRAELUGARESENTREGA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAELUGARESENTREGA"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAELUGARESENTREGA
                    NewItem.lugar_id = IIf(Convert.IsDBNull(dr("lugar_id")), Nothing, dr("lugar_id"))
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.inactivo = IIf(Convert.IsDBNull(dr("inactivo")), Nothing, dr("inactivo"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("Obs")), Nothing, dr("Obs"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAELUGARESENTREGA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAELUGARESENTREGA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAELUGARESENTREGA
        ''' Fecha de Creación  : martes, 18 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAELUGARESENTREGA. </remarks>
        Public Class ColumnNames
            Public Const LUGAR_ID As String = "LUGAR_ID"
            Public Const CODEMP As String = "CODEMP"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const INACTIVO As String = "INACTIVO"
            Public Const OBS As String = "OBS"
        End Class ' ColumnNames
    End Class

    Public Class ENVIAMAILARTICULOSPROVISORIOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ENVIAMAILARTICULOSPROVISORIOS"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ENVIAMAILARTICULOSPROVISORIOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ENVIAMAILARTICULOSPROVISORIOS
        ''' Fecha de Creación  : lunes, 24 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ENVIAMAILARTICULOSPROVISORIOS. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class REQUERIMIENTOS_PARA_FINALIZAR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.REQUERIMIENTOS_PARA_FINALIZAR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal sector As Int32, ByVal idUsuario As Int32) As List(Of Entities.Procedures.REQUERIMIENTOS_PARA_FINALIZAR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "REQUERIMIENTOS_PARA_FINALIZAR"

                Dim VSector As New SqlParameter("@Sector", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sector)
                Dim VidUsuario As New SqlParameter("@idUsuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, idUsuario)
                Dim params() As SqlParameter = {VSector, VidUsuario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.REQUERIMIENTOS_PARA_FINALIZAR
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("OBS")), Nothing, dr("OBS"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    NewItem.sectorrequerimiento_id = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.usuarioautoriza = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.Lugarentrega = IIf(Convert.IsDBNull(dr("LugarEntrega")), Nothing, dr("LugarEntrega"))
                    NewItem.Entrega_id = IIf(Convert.IsDBNull(dr("Entrega_id")), Nothing, dr("Entrega_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.REQUERIMIENTOS_PARA_FINALIZAR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.REQUERIMIENTOS_PARA_FINALIZAR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla REQUERIMIENTOS_PARA_FINALIZAR
        ''' Fecha de Creación  : martes, 9 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla REQUERIMIENTOS_PARA_FINALIZAR. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const OBS As String = "OBS"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const LUGARENTREGA As String = "LUGARENTREGA"
            Public Const ENTREGA_ID As String = "ENTREGA_ID"
        End Class ' ColumnNames
    End Class

    Public Class REQUERIMIENTOITEM_SINOC
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.REQUERIMIENTOITEM_SINOC)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal requerimiento_id As Int32, ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.REQUERIMIENTOITEM_SINOC)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "REQUERIMIENTOITEM_SINOC"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, requerimiento_id)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.REQUERIMIENTOITEM_SINOC
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroitem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.nivelaut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaentrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.Marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.REQUERIMIENTOITEM_SINOC)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.REQUERIMIENTOITEM_SINOC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla REQUERIMIENTOITEM_SINOC
        ''' Fecha de Creación  : miércoles, 23 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla REQUERIMIENTOITEM_SINOC. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
        End Class ' ColumnNames
    End Class

    Public Class PROXIMONROREMITO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PROXIMONROREMITO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.PROXIMONROREMITO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PROXIMONROREMITO"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PROXIMONROREMITO
                    NewItem.NroRemito = IIf(Convert.IsDBNull(dr("NroRemito")), Nothing, dr("NroRemito"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PROXIMONROREMITO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PROXIMONROREMITO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PROXIMONROREMITO
        ''' Fecha de Creación  : lunes, 31 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PROXIMONROREMITO. </remarks>
        Public Class ColumnNames
            Public Const NROREMITO As String = "NROREMITO"
        End Class ' ColumnNames
    End Class
    Public Class TRAEDETALLEREMITOSPENDIENTES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEDETALLEREMITOSPENDIENTES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal comprobante As Int32) As List(Of Entities.Procedures.TRAEDETALLEREMITOSPENDIENTES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEDETALLEREMITOSPENDIENTES"

                Dim VCodEmp As New SqlParameter("@CodEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VComprobante As New SqlParameter("@Comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, comprobante)
                Dim params() As SqlParameter = {VCodEmp, VComprobante}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEDETALLEREMITOSPENDIENTES
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantOriginal = IIf(Convert.IsDBNull(dr("cantOriginal")), Nothing, dr("cantOriginal"))
                    NewItem.cantRecibida = IIf(Convert.IsDBNull(dr("cantRecibida")), Nothing, dr("cantRecibida"))
                    NewItem.CantPedida = IIf(Convert.IsDBNull(dr("CantPedida")), Nothing, dr("CantPedida"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEDETALLEREMITOSPENDIENTES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEDETALLEREMITOSPENDIENTES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEDETALLEREMITOSPENDIENTES
        ''' Fecha de Creación  : miércoles, 1 de noviembre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEDETALLEREMITOSPENDIENTES. </remarks>
        Public Class ColumnNames
            Public Const NROITEM As String = "NROITEM"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTORIGINAL As String = "CANTORIGINAL"
            Public Const CANTRECIBIDA As String = "CANTRECIBIDA"
            Public Const CANTPEDIDA As String = "CANTPEDIDA"
        End Class ' ColumnNames
    End Class
    Public Class TRAEREMITOSPENDIENTES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREMITOSPENDIENTES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fechadesde As DateTime, ByVal fechahasta As DateTime, ByVal sector As Int32, ByVal deposito As Int32) As List(Of Entities.Procedures.TRAEREMITOSPENDIENTES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREMITOSPENDIENTES"

                Dim VFechaDesde As New SqlParameter("@FechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VFechaHasta As New SqlParameter("@FechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim VSector As New SqlParameter("@Sector", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sector)
                Dim VDeposito As New SqlParameter("@Deposito", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, deposito)
                Dim params() As SqlParameter = {VFechaDesde, VFechaHasta, VSector, VDeposito}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREMITOSPENDIENTES
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.comprobante = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    NewItem.letra = IIf(Convert.IsDBNull(dr("letra")), Nothing, dr("letra"))
                    NewItem.sucursal = IIf(Convert.IsDBNull(dr("sucursal")), Nothing, dr("sucursal"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.comprobantestk = IIf(Convert.IsDBNull(dr("comprobanteStk")), Nothing, dr("comprobanteStk"))
                    NewItem.codempstk = IIf(Convert.IsDBNull(dr("codEmpStk")), Nothing, dr("codEmpStk"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREMITOSPENDIENTES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREMITOSPENDIENTES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREMITOSPENDIENTES
        ''' Fecha de Creación  : lunes, 31 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREMITOSPENDIENTES. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const LETRA As String = "LETRA"
            Public Const SUCURSAL As String = "SUCURSAL"
            Public Const FECHA As String = "FECHA"
            Public Const COMPROBANTESTK As String = "COMPROBANTESTK"
            Public Const CODEMPSTK As String = "CODEMPSTK"
        End Class ' ColumnNames
    End Class

    Public Class TRAEREQUERIMIENTOSLIBRERIA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOSLIBRERIA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fechadesde As DateTime, ByVal fechahasta As DateTime) As List(Of Entities.Procedures.TRAEREQUERIMIENTOSLIBRERIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREQUERIMIENTOSLIBRERIA"

                Dim VFechaDesde As New SqlParameter("@FechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VFechaHasta As New SqlParameter("@FechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim params() As SqlParameter = {VFechaDesde, VFechaHasta}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOSLIBRERIA
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("Cantidad")), Nothing, dr("Cantidad"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOSLIBRERIA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREQUERIMIENTOSLIBRERIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOSLIBRERIA
        ''' Fecha de Creación  : lunes, 31 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOSLIBRERIA. </remarks>
        Public Class ColumnNames
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const CANTIDAD As String = "CANTIDAD"
        End Class ' ColumnNames
    End Class

    Public Class ENVIAMAILARTICULOSCONDIFERENCIASSTK
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal comprobante As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ENVIAMAILARTICULOSCONDIFERENCIASSTK"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VComprobante As New SqlParameter("@Comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, comprobante)
                Dim params() As SqlParameter = {VcodEmp, VComprobante}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ENVIAMAILARTICULOSCONDIFERENCIASSTK
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ENVIAMAILARTICULOSCONDIFERENCIASSTK
        ''' Fecha de Creación  : martes, 1 de noviembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ENVIAMAILARTICULOSCONDIFERENCIASSTK. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class TRAE_REMITOS_PARA_IMPRESION
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAE_REMITOS_PARA_IMPRESION)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fechadesde As DateTime, ByVal fechahasta As DateTime, ByVal sector As Integer, ByVal deposito As Int32) As List(Of Entities.Procedures.TRAE_REMITOS_PARA_IMPRESION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAE_REMITOS_PARA_IMPRESION"

                Dim VFechaDesde As New SqlParameter("@FechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VFechaHasta As New SqlParameter("@FechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim VDeposito As New SqlParameter("@Deposito", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, deposito)
                Dim VSector As New SqlParameter("@Sector", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sector)
                Dim params() As SqlParameter = {VFechaDesde, VFechaHasta, VDeposito, VSector}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAE_REMITOS_PARA_IMPRESION
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.comprobante = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    NewItem.letra = IIf(Convert.IsDBNull(dr("letra")), Nothing, dr("letra"))
                    NewItem.sucursal = IIf(Convert.IsDBNull(dr("sucursal")), Nothing, dr("sucursal"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.comprobantestk = IIf(Convert.IsDBNull(dr("comprobanteStk")), Nothing, dr("comprobanteStk"))
                    NewItem.codempstk = IIf(Convert.IsDBNull(dr("codEmpStk")), Nothing, dr("codEmpStk"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAE_REMITOS_PARA_IMPRESION)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAE_REMITOS_PARA_IMPRESION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAE_REMITOS_PARA_IMPRESION
        ''' Fecha de Creación  : lunes, 31 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAE_REMITOS_PARA_IMPRESION. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const LETRA As String = "LETRA"
            Public Const SUCURSAL As String = "SUCURSAL"
            Public Const FECHA As String = "FECHA"
            Public Const COMPROBANTESTK As String = "COMPROBANTESTK"
            Public Const CODEMPSTK As String = "CODEMPSTK"
        End Class ' ColumnNames
    End Class

    Public Class GENERAHISTORIALSALDOPROVEEDOR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal anio As Int32, ByVal mes As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "GENERAHISTORIALSALDOPROVEEDOR"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VAnio As New SqlParameter("@Anio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, anio)
                Dim VMes As New SqlParameter("@Mes", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, mes)
                Dim params() As SqlParameter = {VcodEmp, VAnio, VMes}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.GENERAHISTORIALSALDOPROVEEDOR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla GENERAHISTORIALSALDOPROVEEDOR
        ''' Fecha de Creación  : lunes, 21 de noviembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla GENERAHISTORIALSALDOPROVEEDOR. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class GENERANUEVOREQUERIMIENTO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal nrooc As Int32, ByVal tipo As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "GENERANUEVOREQUERIMIENTO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VNroOC As New SqlParameter("@NroOC", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nrooc)
                Dim VTipo As New SqlParameter("@Tipo", SqlDbType.VarChar, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipo)
                Dim params() As SqlParameter = {VcodEmp, VNroOC, VTipo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.GENERANUEVOREQUERIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla GENERANUEVOREQUERIMIENTO
        ''' Fecha de Creación  : lunes, 19 de diciembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla GENERANUEVOREQUERIMIENTO. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    Public Class REPOSICIONPORCONSUMO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.REPOSICIONPORCONSUMO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal filtro As String, ByVal rubro As String, ByVal subrubro As String, ByVal fechadesde As DateTime, ByVal fechahasta As DateTime) As List(Of Entities.Procedures.REPOSICIONPORCONSUMO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "REPOSICIONPORCONSUMO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VFiltro As New SqlParameter("@Filtro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, filtro)
                Dim VRubro As New SqlParameter("@Rubro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, rubro)
                Dim VSubRubro As New SqlParameter("@SubRubro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, subrubro)
                Dim VFechaDesde As New SqlParameter("@FechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VFechaHasta As New SqlParameter("@FechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim params() As SqlParameter = {VcodEmp, VFiltro, VRubro, VSubRubro, VFechaDesde, VFechaHasta}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.REPOSICIONPORCONSUMO
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.codrubro = IIf(Convert.IsDBNull(dr("CodRubro")), Nothing, dr("CodRubro"))
                    NewItem.rubro = IIf(Convert.IsDBNull(dr("Rubro")), Nothing, dr("Rubro"))
                    NewItem.codsubrubro = IIf(Convert.IsDBNull(dr("CodSubRubro")), Nothing, dr("CodSubRubro"))
                    NewItem.subrubro = IIf(Convert.IsDBNull(dr("SubRubro")), Nothing, dr("SubRubro"))
                    NewItem.consumo = IIf(Convert.IsDBNull(dr("Consumo")), Nothing, dr("Consumo"))
                    NewItem.cantpendientereq = IIf(Convert.IsDBNull(dr("CantPendienteReq")), Nothing, dr("CantPendienteReq"))
                    NewItem.cantpendienteoc = IIf(Convert.IsDBNull(dr("CantPendienteOC")), Nothing, dr("CantPendienteOC"))
                    NewItem.reponer = IIf(Convert.IsDBNull(dr("Reponer")), Nothing, dr("Reponer"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.REPOSICIONPORCONSUMO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.REPOSICIONPORCONSUMO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla REPOSICIONPORCONSUMO
        ''' Fecha de Creación  : miércoles, 28 de diciembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla REPOSICIONPORCONSUMO. </remarks>
        Public Class ColumnNames
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const UNIMED As String = "UNIMED"
            Public Const CODRUBRO As String = "CODRUBRO"
            Public Const RUBRO As String = "RUBRO"
            Public Const CODSUBRUBRO As String = "CODSUBRUBRO"
            Public Const SUBRUBRO As String = "SUBRUBRO"
            Public Const CONSUMO As String = "CONSUMO"
            Public Const CANTPENDIENTEREQ As String = "CANTPENDIENTEREQ"
            Public Const CANTPENDIENTEOC As String = "CANTPENDIENTEOC"
            Public Const REPONER As String = "REPONER"
        End Class ' ColumnNames
    End Class

    Public Class EVENTOSUSUARIO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.EVENTOSUSUARIO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal usuarioid As Int32) As List(Of Entities.Procedures.EVENTOSUSUARIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EVENTOSUSUARIO"

                Dim VusuarioId As New SqlParameter("@usuarioId", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, usuarioid)
                Dim params() As SqlParameter = {VusuarioId}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.EVENTOSUSUARIO
                    NewItem.Id = IIf(Convert.IsDBNull(dr("Id")), Nothing, dr("Id"))
                    NewItem.Descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.EVENTOSUSUARIO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.EVENTOSUSUARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EVENTOSUSUARIO
        ''' Fecha de Creación  : miércoles, 28 de diciembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EVENTOSUSUARIO. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class

    Public Class REQUERIMIENTOS_PARA_EXCLUIR_ARTICULOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.REQUERIMIENTOS_PARA_EXCLUIR_ARTICULOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal sector As Int32, ByVal idusuario As Int32, ByVal codemp As String) As List(Of Entities.Procedures.REQUERIMIENTOS_PARA_EXCLUIR_ARTICULOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "REQUERIMIENTOS_PARA_EXCLUIR_ARTICULOS"

                Dim VSector As New SqlParameter("@Sector", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sector)
                Dim VidUsuario As New SqlParameter("@idUsuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, idusuario)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VSector, VidUsuario, VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.REQUERIMIENTOS_PARA_EXCLUIR_ARTICULOS
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("OBS")), Nothing, dr("OBS"))
                    NewItem.Descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    NewItem.sectorRequerimiento_id = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.usuarioAutoriza = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.LugarEntrega = IIf(Convert.IsDBNull(dr("LugarEntrega")), Nothing, dr("LugarEntrega"))
                    NewItem.Entrega_Id = IIf(Convert.IsDBNull(dr("Entrega_Id")), Nothing, dr("Entrega_Id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.REQUERIMIENTOS_PARA_EXCLUIR_ARTICULOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.REQUERIMIENTOS_PARA_EXCLUIR_ARTICULOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla REQUERIMIENTOS_PARA_EXCLUIR_ARTICULOS
        ''' Fecha de Creación  : miércoles, 4 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla REQUERIMIENTOS_PARA_EXCLUIR_ARTICULOS. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const OBS As String = "OBS"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const LUGARENTREGA As String = "LUGARENTREGA"
            Public Const ENTREGA_ID As String = "ENTREGA_ID"
        End Class ' ColumnNames
    End Class
    Public Class EXCLUYEITEMSREQ
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal idreq As Int32, ByVal nroitem As Int32, ByVal motivo As String, ByVal usuario As String, ByVal excluido As Boolean) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EXCLUYEITEMSREQ"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VidReq As New SqlParameter("@idReq", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, idreq)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nroitem)
                Dim VMotivo As New SqlParameter("@Motivo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, motivo)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, usuario)
                Dim Vexcluido As New SqlParameter("@excluido", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, excluido)
                Dim params() As SqlParameter = {VcodEmp, VidReq, VnroItem, VMotivo, Vusuario, Vexcluido}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.EXCLUYEITEMSREQ
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EXCLUYEITEMSREQ
        ''' Fecha de Creación  : miércoles, 4 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla EXCLUYEITEMSREQ. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    Public Class TRAEREQUERIMIENTOITEMPARAEXCLUIR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMPARAEXCLUIR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal requerimiento_id As Int32) As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMPARAEXCLUIR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREQUERIMIENTOITEMPARAEXCLUIR"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, requerimiento_id)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOITEMPARAEXCLUIR
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.nivelAut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaEntrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    NewItem.excluido = IIf(Convert.IsDBNull(dr("excluido")), Nothing, dr("excluido"))
                    NewItem.motivoExclusion = IIf(Convert.IsDBNull(dr("motivoExclusion")), Nothing, dr("motivoExclusion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMPARAEXCLUIR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREQUERIMIENTOITEMPARAEXCLUIR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMPARAEXCLUIR
        ''' Fecha de Creación  : miércoles, 4 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMPARAEXCLUIR. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const MARCA As String = "MARCA"
            Public Const EXCLUIDO As String = "EXCLUIDO"
            Public Const MOTIVOEXCLUSION As String = "MOTIVOEXCLUSION"
        End Class ' ColumnNames
    End Class

    Public Class STOCK_A_FECHA_POREMPRESA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.STOCK_A_FECHA_POREMPRESA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal deposito As String, ByVal filtro As String, ByVal rubro As String, ByVal subrubro As String, ByVal articulo As String) As List(Of Entities.Procedures.STOCK_A_FECHA_POREMPRESA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "STOCK_A_FECHA_POREMPRESA"

                Dim Vdeposito As New SqlParameter("@deposito", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, deposito)
                Dim VFiltro As New SqlParameter("@Filtro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, filtro)
                Dim VRubro As New SqlParameter("@Rubro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, rubro)
                Dim VSubRubro As New SqlParameter("@SubRubro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, subrubro)
                Dim VArticulo As New SqlParameter("@Articulo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo)
                Dim params() As SqlParameter = {Vdeposito, VFiltro, VRubro, VSubRubro, VArticulo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.STOCK_A_FECHA_POREMPRESA
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.codrubro = IIf(Convert.IsDBNull(dr("CodRubro")), Nothing, dr("CodRubro"))
                    NewItem.rubro = IIf(Convert.IsDBNull(dr("Rubro")), Nothing, dr("Rubro"))
                    NewItem.codsubrubro = IIf(Convert.IsDBNull(dr("CodSubRubro")), Nothing, dr("CodSubRubro"))
                    NewItem.subrubro = IIf(Convert.IsDBNull(dr("SubRubro")), Nothing, dr("SubRubro"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("Cantidad")), Nothing, dr("Cantidad"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.STOCK_A_FECHA_POREMPRESA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.STOCK_A_FECHA_POREMPRESA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STOCK_A_FECHA_POREMPRESA
        ''' Fecha de Creación  : miércoles, 15 de febrero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla STOCK_A_FECHA_POREMPRESA. </remarks>
        Public Class ColumnNames
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const UNIMED As String = "UNIMED"
            Public Const CODRUBRO As String = "CODRUBRO"
            Public Const RUBRO As String = "RUBRO"
            Public Const CODSUBRUBRO As String = "CODSUBRUBRO"
            Public Const SUBRUBRO As String = "SUBRUBRO"
            Public Const CANTIDAD As String = "CANTIDAD"
        End Class ' ColumnNames
    End Class

    Public Class TRAESOLICITUDES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAESOLICITUDES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal fechadesde As DateTime, ByVal fechahasta As DateTime) As List(Of Entities.Procedures.TRAESOLICITUDES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAESOLICITUDES"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VfechaDesde As New SqlParameter("@fechaDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechadesde)
                Dim VfechaHasta As New SqlParameter("@fechaHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fechahasta)
                Dim params() As SqlParameter = {VcodEmp, VfechaDesde, VfechaHasta}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAESOLICITUDES
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroSolicitud = IIf(Convert.IsDBNull(dr("nroSolicitud")), Nothing, dr("nroSolicitud"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAESOLICITUDES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAESOLICITUDES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAESOLICITUDES
        ''' Fecha de Creación  : miércoles, 5 de abril de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAESOLICITUDES. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROSOLICITUD As String = "NROSOLICITUD"
            Public Const FECHA As String = "FECHA"
        End Class ' ColumnNames
    End Class

    Public Class TRAECUENTASPORARTICULO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAECUENTASPORARTICULO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.TRAECUENTASPORARTICULO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAECUENTASPORARTICULO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAECUENTASPORARTICULO
                    NewItem.art_codGen = IIf(Convert.IsDBNull(dr("art_codGen")), Nothing, dr("art_codGen"))
                    NewItem.art_descGen = IIf(Convert.IsDBNull(dr("art_descGen")), Nothing, dr("art_descGen"))
                    NewItem.aappla_CuentaCostos = IIf(Convert.IsDBNull(dr("aappla_CuentaCostos")), Nothing, dr("aappla_CuentaCostos"))
                    NewItem.aappla_CuentaCpra = IIf(Convert.IsDBNull(dr("aappla_CuentaCpra")), Nothing, dr("aappla_CuentaCpra"))
                    NewItem.aappla_CuentaVta = IIf(Convert.IsDBNull(dr("aappla_CuentaVta")), Nothing, dr("aappla_CuentaVta"))
                    NewItem.aappla_CuentaInv = IIf(Convert.IsDBNull(dr("aappla_CuentaInv")), Nothing, dr("aappla_CuentaInv"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAECUENTASPORARTICULO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAECUENTASPORARTICULO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAECUENTASPORARTICULO
        ''' Fecha de Creación  : viernes, 28 de abril de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAECUENTASPORARTICULO. </remarks>
        Public Class ColumnNames
            Public Const ART_CODGEN As String = "ART_CODGEN"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const AAPPLA_CUENTACOSTOS As String = "AAPPLA_CUENTACOSTOS"
            Public Const AAPPLA_CUENTACPRA As String = "AAPPLA_CUENTACPRA"
            Public Const AAPPLA_CUENTAVTA As String = "AAPPLA_CUENTAVTA"
            Public Const AAPPLA_CUENTAINV As String = "AAPPLA_CUENTAINV"
        End Class ' ColumnNames
    End Class
    Public Class UPDATECUENTASPORARTICULO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal codart As String, ByVal ctacosto As String, ByVal ctacompras As String, ByVal ctaventas As String, ByVal ctainventario As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "UPDATECUENTASPORARTICULO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VcodArt As New SqlParameter("@codArt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codart)
                Dim VctaCosto As New SqlParameter("@ctaCosto", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ctacosto)
                Dim VctaCompras As New SqlParameter("@ctaCompras", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ctacompras)
                Dim VctaVentas As New SqlParameter("@ctaVentas", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ctaventas)
                Dim VctaInventario As New SqlParameter("@ctaInventario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ctainventario)
                Dim params() As SqlParameter = {VcodEmp, VcodArt, VctaCosto, VctaCompras, VctaVentas, VctaInventario}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.UPDATECUENTASPORARTICULO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla UPDATECUENTASPORARTICULO
        ''' Fecha de Creación  : viernes, 28 de abril de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla UPDATECUENTASPORARTICULO. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class TRAECONCEPTOCTACONTABLE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAECONCEPTOCTACONTABLE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.TRAECONCEPTOCTACONTABLE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAECONCEPTOCTACONTABLE"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAECONCEPTOCTACONTABLE
                    NewItem.con_cod = IIf(Convert.IsDBNull(dr("con_Cod")), Nothing, dr("con_Cod"))
                    NewItem.con_desc = IIf(Convert.IsDBNull(dr("con_Desc")), Nothing, dr("con_Desc"))
                    NewItem.cappla_cuentacpra = IIf(Convert.IsDBNull(dr("cappla_CuentaCpra")), Nothing, dr("cappla_CuentaCpra"))
                    NewItem.cta_descrip = IIf(Convert.IsDBNull(dr("cta_descrip")), Nothing, dr("cta_descrip"))
                    NewItem.descripsubcuenta = IIf(Convert.IsDBNull(dr("DescripSubCuenta")), Nothing, dr("DescripSubCuenta"))
                    NewItem.subcuenta = IIf(Convert.IsDBNull(dr("subCuenta")), Nothing, dr("subCuenta"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAECONCEPTOCTACONTABLE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAECONCEPTOCTACONTABLE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAECONCEPTOCTACONTABLE
        ''' Fecha de Creación  : martes, 2 de mayo de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAECONCEPTOCTACONTABLE. </remarks>
        Public Class ColumnNames
            Public Const CON_COD As String = "CON_COD"
            Public Const CON_DESC As String = "CON_DESC"
            Public Const CAPPLA_CUENTACPRA As String = "CAPPLA_CUENTACPRA"
            Public Const CTA_DESCRIP As String = "CTA_DESCRIP"
            Public Const DESCRIPSUBCUENTA As String = "DESCRIPSUBCUENTA"
            Public Const SUBCUENTA As String = "SUBCUENTA"
        End Class ' ColumnNames
    End Class
    Public Class USR_ACTULIZASUBCUENTACONCEPTO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal nro_cta As Int32, ByVal descripcion As String, ByVal esdeproducto As Boolean, ByVal concepto As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "USR_ACTULIZASUBCUENTACONCEPTO"

                Dim VNRO_CTA As New SqlParameter("@NRO_CTA", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nro_cta)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, descripcion)
                Dim VesDeProducto As New SqlParameter("@esDeProducto", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, esdeproducto)
                Dim VConcepto As New SqlParameter("@Concepto", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, concepto)
                Dim params() As SqlParameter = {VNRO_CTA, VDescripcion, VesDeProducto, VConcepto}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.USR_ACTULIZASUBCUENTACONCEPTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla USR_ACTULIZASUBCUENTACONCEPTO
        ''' Fecha de Creación  : martes, 2 de mayo de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla USR_ACTULIZASUBCUENTACONCEPTO. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class ELIMINAPRORRATEO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal scc_id As Int32, ByVal sccsuc_cod As String, ByVal sccemp_codigo As String) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ELIMINAPRORRATEO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vscc_ID As New SqlParameter("@scc_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, scc_id)
                Dim Vsccsuc_Cod As New SqlParameter("@sccsuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sccsuc_cod)
                Dim Vsccemp_Codigo As New SqlParameter("@sccemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sccemp_codigo)
                Dim params() As SqlParameter = {VcodEmp, Vscc_ID, Vsccsuc_Cod, Vsccemp_Codigo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ELIMINAPRORRATEO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ELIMINAPRORRATEO
        ''' Fecha de Creación  : miércoles, 6 de septiembre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla ELIMINAPRORRATEO. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class USR_TRAEFACTURASPRORRATEADAS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.USR_TRAEFACTURASPRORRATEADAS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal femisiondesde As DateTime, ByVal femisionhasta As DateTime) As List(Of Entities.Procedures.USR_TRAEFACTURASPRORRATEADAS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "USR_TRAEFACTURASPRORRATEADAS"

                Dim VFEmisionDesde As New SqlParameter("@FEmisionDesde", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, femisiondesde)
                Dim VFEmisionHasta As New SqlParameter("@FEmisionHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, femisionhasta)
                Dim params() As SqlParameter = {VFEmisionDesde, VFEmisionHasta}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.USR_TRAEFACTURASPRORRATEADAS
                    NewItem.emp = IIf(Convert.IsDBNull(dr("Emp")), Nothing, dr("Emp"))
                    NewItem.scc_id = IIf(Convert.IsDBNull(dr("scc_ID")), Nothing, dr("scc_ID"))
                    NewItem.sccsuc_cod = IIf(Convert.IsDBNull(dr("sccsuc_Cod")), Nothing, dr("sccsuc_Cod"))
                    NewItem.sccemp_codigo = IIf(Convert.IsDBNull(dr("sccemp_Codigo")), Nothing, dr("sccemp_Codigo"))
                    NewItem.femision = IIf(Convert.IsDBNull(dr("FEmision")), Nothing, dr("FEmision"))
                    NewItem.letra = IIf(Convert.IsDBNull(dr("Letra")), Nothing, dr("Letra"))
                    NewItem.codigocomprob = IIf(Convert.IsDBNull(dr("CodigoComprob")), Nothing, dr("CodigoComprob"))
                    NewItem.descripcomprob = IIf(Convert.IsDBNull(dr("DescripComprob")), Nothing, dr("DescripComprob"))
                    NewItem.comprobante = IIf(Convert.IsDBNull(dr("Comprobante")), Nothing, dr("Comprobante"))
                    NewItem.codproveed = IIf(Convert.IsDBNull(dr("CodProveed")), Nothing, dr("CodProveed"))
                    NewItem.razonsocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    NewItem.tipoprorrateo = IIf(Convert.IsDBNull(dr("TipoProrrateo")), Nothing, dr("TipoProrrateo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.USR_TRAEFACTURASPRORRATEADAS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.USR_TRAEFACTURASPRORRATEADAS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla USR_TRAEFACTURASPRORRATEADAS
        ''' Fecha de Creación  : miércoles, 6 de septiembre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla USR_TRAEFACTURASPRORRATEADAS. </remarks>
        Public Class ColumnNames
            Public Const EMP As String = "EMP"
            Public Const SCC_ID As String = "SCC_ID"
            Public Const SCCSUC_COD As String = "SCCSUC_COD"
            Public Const SCCEMP_CODIGO As String = "SCCEMP_CODIGO"
            Public Const FEMISION As String = "FEMISION"
            Public Const LETRA As String = "LETRA"
            Public Const CODIGOCOMPROB As String = "CODIGOCOMPROB"
            Public Const DESCRIPCOMPROB As String = "DESCRIPCOMPROB"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const CODPROVEED As String = "CODPROVEED"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
            Public Const TIPOPRORRATEO As String = "TIPOPRORRATEO"
        End Class ' ColumnNames
    End Class

    Public Class ORDENCOMPRA_DISPONIBLES_SINSTOCK
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ORDENCOMPRA_DISPONIBLES_SINSTOCK)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.ORDENCOMPRA_DISPONIBLES_SINSTOCK)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ORDENCOMPRA_DISPONIBLES_SINSTOCK"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ORDENCOMPRA_DISPONIBLES_SINSTOCK
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordenCompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.proveed_id = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.RazonSocial = IIf(Convert.IsDBNull(dr("RazonSocial")), Nothing, dr("RazonSocial"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.tipoOc_id = IIf(Convert.IsDBNull(dr("tipoOc_id")), Nothing, dr("tipoOc_id"))
                    NewItem.modificaCosto = IIf(Convert.IsDBNull(dr("modificaCosto")), Nothing, dr("modificaCosto"))
                    NewItem.condicionPago_id = IIf(Convert.IsDBNull(dr("condicionPago_id")), Nothing, dr("condicionPago_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.Email = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
                    NewItem.pedidoDiario = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ORDENCOMPRA_DISPONIBLES_SINSTOCK)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ORDENCOMPRA_DISPONIBLES_SINSTOCK
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ORDENCOMPRA_DISPONIBLES_SINSTOCK
        ''' Fecha de Creación  : lunes, 11 de septiembre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla ORDENCOMPRA_DISPONIBLES_SINSTOCK. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const FECHA As String = "FECHA"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const OBS As String = "OBS"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const TIPOOC_ID As String = "TIPOOC_ID"
            Public Const MODIFICACOSTO As String = "MODIFICACOSTO"
            Public Const CONDICIONPAGO_ID As String = "CONDICIONPAGO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const EMAIL As String = "EMAIL"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
        End Class ' ColumnNames
    End Class
    Public Class TRAEORDENCOMPRADETALLE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEORDENCOMPRADETALLE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal ordencompra_id As Int32, ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.TRAEORDENCOMPRADETALLE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEORDENCOMPRADETALLE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, ordencompra_id)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEORDENCOMPRADETALLE
                    NewItem.codemp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordencompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.nroitem = IIf(Convert.IsDBNull(dr("nroitem")), Nothing, dr("nroitem"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.importe = IIf(Convert.IsDBNull(dr("importe")), Nothing, dr("importe"))
                    NewItem.detalle = IIf(Convert.IsDBNull(dr("detalle")), Nothing, dr("detalle"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEORDENCOMPRADETALLE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEORDENCOMPRADETALLE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEORDENCOMPRADETALLE
        ''' Fecha de Creación  : lunes, 11 de septiembre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEORDENCOMPRADETALLE. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const IMPORTE As String = "IMPORTE"
            Public Const DETALLE As String = "DETALLE"
        End Class ' ColumnNames
    End Class

    Public Class REQUERIMIENTOS_INERNO_DISPONIBLES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.REQUERIMIENTOS_INERNO_DISPONIBLES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.REQUERIMIENTOS_INERNO_DISPONIBLES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "REQUERIMIENTOS_INERNO_DISPONIBLES"

                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SqlParameter = {VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.REQUERIMIENTOS_INERNO_DISPONIBLES
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("OBS")), Nothing, dr("OBS"))
                    NewItem.Descripcion = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    NewItem.sectorRequerimiento_id = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.REQUERIMIENTOS_INERNO_DISPONIBLES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.REQUERIMIENTOS_INERNO_DISPONIBLES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla REQUERIMIENTOS_INERNO_DISPONIBLES
        ''' Fecha de Creación  : lunes, 9 de octubre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla REQUERIMIENTOS_INERNO_DISPONIBLES. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const OBS As String = "OBS"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const USUARIO As String = "USUARIO"
        End Class ' ColumnNames
    End Class

    Public Class TRAEREQUERIMIENTOINTERNOITEM
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOINTERNOITEM)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal requerimiento_id As Int32, ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.TRAEREQUERIMIENTOINTERNOITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREQUERIMIENTOINTERNOITEM"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, requerimiento_id)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOINTERNOITEM
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.nivelAut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaEntrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOINTERNOITEM)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREQUERIMIENTOINTERNOITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOINTERNOITEM
        ''' Fecha de Creación  : lunes, 9 de octubre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOINTERNOITEM. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const MARCA As String = "MARCA"
        End Class ' ColumnNames
    End Class

    Public Class MAXCOMPROBANTEREQUERIMIENTOINTERNO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MAXCOMPROBANTEREQUERIMIENTOINTERNO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String) As List(Of Entities.Procedures.MAXCOMPROBANTEREQUERIMIENTOINTERNO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MAXCOMPROBANTEREQUERIMIENTOINTERNO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim params() As SqlParameter = {VcodEmp}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MAXCOMPROBANTEREQUERIMIENTOINTERNO
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MAXCOMPROBANTEREQUERIMIENTOINTERNO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MAXCOMPROBANTEREQUERIMIENTOINTERNO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MAXCOMPROBANTEREQUERIMIENTO
        ''' Fecha de Creación  : jueves, 17 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla MAXCOMPROBANTEREQUERIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
        End Class ' ColumnNames
    End Class

    Public Class REQUERIMIENTO_INTERNO_PENDIENTE_ENTREGAR
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.REQUERIMIENTO_INTERNO_PENDIENTE_ENTREGAR)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal deposito_id As Int32, ByVal sector_id As Int32) As List(Of Entities.Procedures.REQUERIMIENTO_INTERNO_PENDIENTE_ENTREGAR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "REQUERIMIENTO_INTERNO_PENDIENTE_ENTREGAR"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vdeposito_id As New SqlParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, deposito_id)
                Dim Vsector_id As New SqlParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sector_id)
                Dim params() As SqlParameter = {VcodEmp, Vdeposito_id, Vsector_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.REQUERIMIENTO_INTERNO_PENDIENTE_ENTREGAR
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.obs = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.sectorEntrega_id = IIf(Convert.IsDBNull(dr("sectorEntrega_id")), Nothing, dr("sectorEntrega_id"))
                    NewItem.LugarEntrega = IIf(Convert.IsDBNull(dr("LugarEntrega")), Nothing, dr("LugarEntrega"))
                    NewItem.depositoOrigen_id = IIf(Convert.IsDBNull(dr("depositoOrigen_id")), Nothing, dr("depositoOrigen_id"))
                    NewItem.sectorDepositoOrigen_id = IIf(Convert.IsDBNull(dr("sectorDepositoOrigen_id")), Nothing, dr("sectorDepositoOrigen_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.REQUERIMIENTO_INTERNO_PENDIENTE_ENTREGAR)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.REQUERIMIENTO_INTERNO_PENDIENTE_ENTREGAR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla REQUERIMIENTO_INTERNO_PENDIENTE_ENTREGAR
        ''' Fecha de Creación  : lunes, 30 de octubre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla REQUERIMIENTO_INTERNO_PENDIENTE_ENTREGAR. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const USUARIO As String = "USUARIO"
            Public Const OBS As String = "OBS"
            Public Const SECTORENTREGA_ID As String = "SECTORENTREGA_ID"
            Public Const LUGARENTREGA As String = "LUGARENTREGA"
            Public Const DEPOSITOORIGEN_ID As String = "DEPOSITOORIGEN_ID"
            Public Const SECTORDEPOSITOORIGEN_ID As String = "SECTORDEPOSITOORIGEN_ID"
        End Class ' ColumnNames
    End Class

    Public Class TRAEREQUERIMIENTOITEM_PENDIENTE_DE_ENVIO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOITEM_PENDIENTE_DE_ENVIO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal requerimiento_id As Int32, ByVal nivelaut_id As Int32) As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEM_PENDIENTE_DE_ENVIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREQUERIMIENTOITEM_PENDIENTE_DE_ENVIO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, requerimiento_id)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nivelaut_id)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnivelAut_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOITEM_PENDIENTE_DE_ENVIO
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.nivelAut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaEntrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.CantidadAdeudada = IIf(Convert.IsDBNull(dr("CantidadAdeudada")), Nothing, dr("CantidadAdeudada"))
                    NewItem.marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEM_PENDIENTE_DE_ENVIO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREQUERIMIENTOITEM_PENDIENTE_DE_ENVIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEM_PENDIENTE_DE_ENVIO
        ''' Fecha de Creación  : miércoles, 11 de octubre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEM_PENDIENTE_DE_ENVIO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const CANTIDADADEUDADA As String = "CANTIDADADEUDADA"
            Public Const MARCA As String = "MARCA"
        End Class ' ColumnNames
    End Class

    Public Class ACTUALIZA_OBS_REQ_INTERNO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal nro As Int32, ByVal obs As String, ByVal depositoorigenid As Int32, ByVal sectordepositoorigenid As Int32, ByVal depositodestinoid As Int32, ByVal sectordepositodestinoid As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ACTUALIZA_OBS_REQ_INTERNO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vnro As New SqlParameter("@nro", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nro)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, obs)
                Dim VDepositoOrigenId As New SqlParameter("@DepositoOrigenId", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, depositoorigenid)
                Dim VSectorDepositoOrigenId As New SqlParameter("@SectorDepositoOrigenId", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sectordepositoorigenid)
                Dim VDepositoDestinoId As New SqlParameter("@DepositoDestinoId", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, depositodestinoid)
                Dim VSectorDepositoDestinoId As New SqlParameter("@SectorDepositoDestinoId", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sectordepositodestinoid)
                Dim params() As SqlParameter = {VcodEmp, Vnro, Vobs, VDepositoOrigenId, VSectorDepositoOrigenId, VDepositoDestinoId, VSectorDepositoDestinoId}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ACTUALIZA_OBS_REQ_INTERNO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ACTUALIZA_OBS_REQ_INTERNO
        ''' Fecha de Creación  : lunes, 6 de noviembre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla ACTUALIZA_OBS_REQ_INTERNO. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class EXCLUYEITEMSREQINTERNO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal idreq As Int32, ByVal nroitem As Int32, ByVal motivo As String, ByVal usuario As String, ByVal excluido As Boolean) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EXCLUYEITEMSREQINTERNO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim VidReq As New SqlParameter("@idReq", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, idreq)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nroitem)
                Dim VMotivo As New SqlParameter("@Motivo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, motivo)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, usuario)
                Dim Vexcluido As New SqlParameter("@excluido", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, excluido)
                Dim params() As SqlParameter = {VcodEmp, VidReq, VnroItem, VMotivo, Vusuario, Vexcluido}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.EXCLUYEITEMSREQINTERNO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EXCLUYEITEMSREQINTERNO
        ''' Fecha de Creación  : lunes, 6 de noviembre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla EXCLUYEITEMSREQINTERNO. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class TRAEREQUERIMIENTOITEMPARAEXCLUIR_INTERNO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMPARAEXCLUIR_INTERNO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal codemp As String, ByVal requerimiento_id As Int32) As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMPARAEXCLUIR_INTERNO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEREQUERIMIENTOITEMPARAEXCLUIR_INTERNO"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, codemp)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, requerimiento_id)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEREQUERIMIENTOITEMPARAEXCLUIR_INTERNO
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.art_DescGen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.nivelAut_id = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.fechaEntrega = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.marca = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEREQUERIMIENTOITEMPARAEXCLUIR_INTERNO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEREQUERIMIENTOITEMPARAEXCLUIR_INTERNO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMPARAEXCLUIR_INTERNO
        ''' Fecha de Creación  : lunes, 6 de noviembre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEREQUERIMIENTOITEMPARAEXCLUIR_INTERNO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const MARCA As String = "MARCA"
        End Class ' ColumnNames
    End Class
    Public Class AJUSTEVENCIMIENTOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function AjusteVtos(ByVal articulo As String, ByVal cantidad As Decimal, ByVal vto As DateTime) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "AJUSTEVENCIMIENTOS"

                Dim VArticulo As New SqlParameter("@Articulo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo)
                Dim VCantidad As New SqlParameter("@Cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cantidad)
                Dim Vvto As New SqlParameter("@vto", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, vto)
                Dim params() As SqlParameter = {VArticulo, VCantidad, Vvto}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.AJUSTEVENCIMIENTOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla AJUSTEVENCIMIENTOS
        ''' Fecha de Creación  : lunes, 19 de marzo de 2018
        ''' <remarks> Representa los Nombres de Columnas de la tabla AJUSTEVENCIMIENTOS. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class

    Public Class DESCUENTAINVENTARIOAJUSTE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Descontar(ByVal deposito As Int32, ByVal articulo As String, ByVal cantidad As Decimal) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "DESCUENTAINVENTARIOAJUSTE"

                Dim VDeposito As New SqlParameter("@Deposito", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, deposito)
                Dim VArticulo As New SqlParameter("@Articulo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, articulo)
                Dim VCantidad As New SqlParameter("@Cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cantidad)
                Dim params() As SqlParameter = {VDeposito, VArticulo, VCantidad}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.DESCUENTAINVENTARIOAJUSTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla DESCUENTAINVENTARIOAJUSTE
        ''' Fecha de Creación  : lunes, 19 de marzo de 2018
        ''' <remarks> Representa los Nombres de Columnas de la tabla DESCUENTAINVENTARIOAJUSTE. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
End Namespace 'Procedures 

 ' Generated by SOLAR Generation Studio .
 ' Plugin Version: 1.0.0.0
Imports System.Collections.Generic
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient
Imports Solar.DataHelper

 Namespace Tables 

    Public Class PROVSEGUIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            ccoemp_Codigo
            ccosuc_Cod
            cco_ID
            ccotco_Cod
            cco_Letra
            cco_CodPvt
            cco_Nro
            cco_FEmision
            cco_FVto
            cco_ImpMonLoc
            cco_SaldoMonLoc
            cco_CodPro
            ccopro_RazSoc
            tipoReclamo
            Estado_id
            usuario
            AdeudaNC
            fechaUltimoReclamo
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PROVSEGUIMIENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PROVSEGUIMIENTO) As Entities.Tables.PROVSEGUIMIENTO
            Dim result As Boolean

            Try
                _commandText = "_PROVSEGUIMIENTO_ADD"
                Dim vPKccoemp_Codigo As New SQLParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccoemp_Codigo)
                Dim vPKccosuc_Cod As New SQLParameter("@ccosuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccosuc_Cod)
                Dim vPKcco_ID As New SQLParameter("@cco_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ID)
                Dim Vccotco_Cod As New SQLParameter("@ccotco_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccotco_Cod)
                Dim Vcco_Letra As New SQLParameter("@cco_Letra", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_Letra)
                Dim Vcco_CodPvt As New SQLParameter("@cco_CodPvt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_CodPvt)
                Dim Vcco_Nro As New SQLParameter("@cco_Nro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_Nro)
                Dim Vcco_FEmision As New SQLParameter("@cco_FEmision", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.cco_FEmision = Date.minvalue, Nothing, Item.cco_FEmision))
                Dim Vcco_FVto As New SQLParameter("@cco_FVto", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.cco_FVto = Date.minvalue, Nothing, Item.cco_FVto))
                Dim Vcco_ImpMonLoc As New SQLParameter("@cco_ImpMonLoc", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ImpMonLoc)
                Dim Vcco_SaldoMonLoc As New SQLParameter("@cco_SaldoMonLoc", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_SaldoMonLoc)
                Dim Vcco_CodPro As New SQLParameter("@cco_CodPro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_CodPro)
                Dim Vccopro_RazSoc As New SQLParameter("@ccopro_RazSoc", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccopro_RazSoc)
                Dim VtipoReclamo As New SQLParameter("@tipoReclamo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipoReclamo)
                Dim VEstado_id As New SQLParameter("@Estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Estado_id)
                Dim Vusuario As New SQLParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario)
                Dim VAdeudaNC As New SQLParameter("@AdeudaNC", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.AdeudaNC)
                Dim VfechaUltimoReclamo As New SQLParameter("@fechaUltimoReclamo", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaUltimoReclamo = Date.minvalue, Nothing, Item.fechaUltimoReclamo))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKccoemp_Codigo, vPKccosuc_Cod, vPKcco_ID, Vccotco_Cod, Vcco_Letra, Vcco_CodPvt, Vcco_Nro, Vcco_FEmision, Vcco_FVto, Vcco_ImpMonLoc, Vcco_SaldoMonLoc, Vcco_CodPro, Vccopro_RazSoc, VtipoReclamo, VEstado_id, Vusuario, VAdeudaNC, VfechaUltimoReclamo, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.ccoemp_Codigo = vPKccoemp_Codigo.Value
                    Item.ccosuc_Cod = vPKccosuc_Cod.Value
                    Item.cco_ID = vPKcco_ID.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PROVSEGUIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_provSeguimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PROVSEGUIMIENTO
                    NewItem.ccoemp_Codigo = IIf(Convert.IsDBNull(dr("ccoemp_Codigo")), Nothing, dr("ccoemp_Codigo"))
                    NewItem.ccosuc_Cod = IIf(Convert.IsDBNull(dr("ccosuc_Cod")), Nothing, dr("ccosuc_Cod"))
                    NewItem.cco_ID = IIf(Convert.IsDBNull(dr("cco_ID")), Nothing, dr("cco_ID"))
                    NewItem.ccotco_Cod = IIf(Convert.IsDBNull(dr("ccotco_Cod")), Nothing, dr("ccotco_Cod"))
                    NewItem.cco_Letra = IIf(Convert.IsDBNull(dr("cco_Letra")), Nothing, dr("cco_Letra"))
                    NewItem.cco_CodPvt = IIf(Convert.IsDBNull(dr("cco_CodPvt")), Nothing, dr("cco_CodPvt"))
                    NewItem.cco_Nro = IIf(Convert.IsDBNull(dr("cco_Nro")), Nothing, dr("cco_Nro"))
                    NewItem.cco_FEmision = IIf(Convert.IsDBNull(dr("cco_FEmision")), Nothing, dr("cco_FEmision"))
                    NewItem.cco_FVto = IIf(Convert.IsDBNull(dr("cco_FVto")), Nothing, dr("cco_FVto"))
                    NewItem.cco_ImpMonLoc = IIf(Convert.IsDBNull(dr("cco_ImpMonLoc")), Nothing, dr("cco_ImpMonLoc"))
                    NewItem.cco_SaldoMonLoc = IIf(Convert.IsDBNull(dr("cco_SaldoMonLoc")), Nothing, dr("cco_SaldoMonLoc"))
                    NewItem.cco_CodPro = IIf(Convert.IsDBNull(dr("cco_CodPro")), Nothing, dr("cco_CodPro"))
                    NewItem.ccopro_RazSoc = IIf(Convert.IsDBNull(dr("ccopro_RazSoc")), Nothing, dr("ccopro_RazSoc"))
                    NewItem.tipoReclamo = IIf(Convert.IsDBNull(dr("tipoReclamo")), Nothing, dr("tipoReclamo"))
                    NewItem.Estado_id = IIf(Convert.IsDBNull(dr("Estado_id")), Nothing, dr("Estado_id"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.AdeudaNC = IIf(Convert.IsDBNull(dr("AdeudaNC")), Nothing, dr("AdeudaNC"))
                    NewItem.fechaUltimoReclamo = IIf(Convert.IsDBNull(dr("fechaUltimoReclamo")), Nothing, dr("fechaUltimoReclamo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PROVSEGUIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PROVSEGUIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PROVSEGUIMIENTO) As Boolean

            Try
                _commandText = "_provSeguimiento_REMOVE"
                Dim Vccoemp_Codigo As New SQLParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccoemp_Codigo)
                Dim Vccosuc_Cod As New SQLParameter("@ccosuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccosuc_Cod)
                Dim Vcco_ID As New SQLParameter("@cco_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {Vccoemp_Codigo, Vccosuc_Cod, Vcco_ID, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_provSeguimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PROVSEGUIMIENTO) As Boolean

            Try
                _commandText = "_provSeguimiento_UPDATE"

                Dim Vccoemp_Codigo As New SQLParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccoemp_Codigo)
                Dim Vccosuc_Cod As New SQLParameter("@ccosuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccosuc_Cod)
                Dim Vcco_ID As New SQLParameter("@cco_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ID)
                Dim Vccotco_Cod As New SQLParameter("@ccotco_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccotco_Cod)
                Dim Vcco_Letra As New SQLParameter("@cco_Letra", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_Letra)
                Dim Vcco_CodPvt As New SQLParameter("@cco_CodPvt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_CodPvt)
                Dim Vcco_Nro As New SQLParameter("@cco_Nro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_Nro)
                Dim Vcco_FEmision As New SQLParameter("@cco_FEmision", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.cco_FEmision = Date.minvalue, Nothing, Item.cco_FEmision))
                Dim Vcco_FVto As New SQLParameter("@cco_FVto", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.cco_FVto = Date.minvalue, Nothing, Item.cco_FVto))
                Dim Vcco_ImpMonLoc As New SQLParameter("@cco_ImpMonLoc", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ImpMonLoc)
                Dim Vcco_SaldoMonLoc As New SQLParameter("@cco_SaldoMonLoc", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_SaldoMonLoc)
                Dim Vcco_CodPro As New SQLParameter("@cco_CodPro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_CodPro)
                Dim Vccopro_RazSoc As New SQLParameter("@ccopro_RazSoc", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccopro_RazSoc)
                Dim VtipoReclamo As New SQLParameter("@tipoReclamo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipoReclamo)
                Dim VEstado_id As New SQLParameter("@Estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Estado_id)
                Dim Vusuario As New SQLParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario)
                Dim VAdeudaNC As New SQLParameter("@AdeudaNC", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.AdeudaNC)
                Dim VfechaUltimoReclamo As New SQLParameter("@fechaUltimoReclamo", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaUltimoReclamo = Date.minvalue, Nothing, Item.fechaUltimoReclamo))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {Vccoemp_Codigo, Vccosuc_Cod, Vcco_ID, Vccotco_Cod, Vcco_Letra, Vcco_CodPvt, Vcco_Nro, Vcco_FEmision, Vcco_FVto, Vcco_ImpMonLoc, Vcco_SaldoMonLoc, Vcco_CodPro, Vccopro_RazSoc, VtipoReclamo, VEstado_id, Vusuario, VAdeudaNC, VfechaUltimoReclamo, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PROVSEGUIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PROVSEGUIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PROVSEGUIMIENTO
        ''' Fecha de Creación  : jueves, 18 de junio de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla PROVSEGUIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const CCOEMP_CODIGO As String = "CCOEMP_CODIGO"
            Public Const CCOSUC_COD As String = "CCOSUC_COD"
            Public Const CCO_ID As String = "CCO_ID"
            Public Const CCOTCO_COD As String = "CCOTCO_COD"
            Public Const CCO_LETRA As String = "CCO_LETRA"
            Public Const CCO_CODPVT As String = "CCO_CODPVT"
            Public Const CCO_NRO As String = "CCO_NRO"
            Public Const CCO_FEMISION As String = "CCO_FEMISION"
            Public Const CCO_FVTO As String = "CCO_FVTO"
            Public Const CCO_IMPMONLOC As String = "CCO_IMPMONLOC"
            Public Const CCO_SALDOMONLOC As String = "CCO_SALDOMONLOC"
            Public Const CCO_CODPRO As String = "CCO_CODPRO"
            Public Const CCOPRO_RAZSOC As String = "CCOPRO_RAZSOC"
            Public Const TIPORECLAMO As String = "TIPORECLAMO"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const ADEUDANC As String = "ADEUDANC"
            Public Const FECHAULTIMORECLAMO As String = "FECHAULTIMORECLAMO"
        End Class ' ColumnNames
    End Class ' PROVSEGUIMIENTO
    Public Class TBL_MENUS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Menu
            Id_MenuPadre
            DescripcionMenu
            PosicionMenu
            HabilitadoMenu
            UrlMenu
            FormularioAsociado
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TBL_MENUS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TBL_MENUS) As Entities.Tables.TBL_MENUS
            Dim result As Boolean

            Try
                _commandText = "_TBL_MENUS_ADD"
                Dim vPKId_Menu As New SqlParameter("@Id_Menu", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VId_MenuPadre As New SqlParameter("@Id_MenuPadre", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENUPADRE)
                Dim VDescripcionMenu As New SqlParameter("@DescripcionMenu", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCIONMENU)
                Dim VPosicionMenu As New SqlParameter("@PosicionMenu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSICIONMENU)
                Dim VHabilitadoMenu As New SqlParameter("@HabilitadoMenu", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HABILITADOMENU)
                Dim VUrlMenu As New SqlParameter("@UrlMenu", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.URLMENU)
                Dim VFormularioAsociado As New SqlParameter("@FormularioAsociado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FORMULARIOASOCIADO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId_Menu, VId_MenuPadre, VDescripcionMenu, VPosicionMenu, VHabilitadoMenu, VUrlMenu, VFormularioAsociado, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_MENU = vPKId_Menu.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TBL_MENUS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TBL_Menus_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TBL_MENUS
                    NewItem.ID_MENU = IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu"))
                    NewItem.ID_MENUPADRE = IIf(Convert.IsDBNull(dr("Id_MenuPadre")), Nothing, dr("Id_MenuPadre"))
                    NewItem.DESCRIPCIONMENU = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    NewItem.POSICIONMENU = IIf(Convert.IsDBNull(dr("PosicionMenu")), Nothing, dr("PosicionMenu"))
                    NewItem.HABILITADOMENU = IIf(Convert.IsDBNull(dr("HabilitadoMenu")), Nothing, dr("HabilitadoMenu"))
                    NewItem.URLMENU = IIf(Convert.IsDBNull(dr("UrlMenu")), Nothing, dr("UrlMenu"))
                    NewItem.FORMULARIOASOCIADO = IIf(Convert.IsDBNull(dr("FormularioAsociado")), Nothing, dr("FormularioAsociado"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_MENUS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_MENUS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TBL_MENUS) As Boolean

            Try
                _commandText = "_TBL_Menus_REMOVE"
                Dim VId_Menu As New SqlParameter("@Id_Menu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENU)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId_Menu, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TBL_Menus_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TBL_MENUS) As Boolean

            Try
                _commandText = "_TBL_Menus_UPDATE"

                Dim VId_Menu As New SqlParameter("@Id_Menu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENU)
                Dim VId_MenuPadre As New SqlParameter("@Id_MenuPadre", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENUPADRE)
                Dim VDescripcionMenu As New SqlParameter("@DescripcionMenu", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCIONMENU)
                Dim VPosicionMenu As New SqlParameter("@PosicionMenu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSICIONMENU)
                Dim VHabilitadoMenu As New SqlParameter("@HabilitadoMenu", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HABILITADOMENU)
                Dim VUrlMenu As New SqlParameter("@UrlMenu", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.URLMENU)
                Dim VFormularioAsociado As New SqlParameter("@FormularioAsociado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FORMULARIOASOCIADO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_Menu, VId_MenuPadre, VDescripcionMenu, VPosicionMenu, VHabilitadoMenu, VUrlMenu, VFormularioAsociado, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TBL_MENUS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TBL_MENUS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TBL_MENUS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TBL_MENUS. </remarks>
        Public Class ColumnNames
            Public Const ID_MENU As String = "ID_MENU"
            Public Const ID_MENUPADRE As String = "ID_MENUPADRE"
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
            Public Const POSICIONMENU As String = "POSICIONMENU"
            Public Const HABILITADOMENU As String = "HABILITADOMENU"
            Public Const URLMENU As String = "URLMENU"
            Public Const FORMULARIOASOCIADO As String = "FORMULARIOASOCIADO"
        End Class ' ColumnNames
    End Class ' TBL_MENUS
    Public Class TBL_PERFILES
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Perfil
            NombrePerfil
            DescripcionPerfil
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TBL_PERFILES)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TBL_PERFILES) As Entities.Tables.TBL_PERFILES
            Dim result As Boolean

            Try
                _commandText = "_TBL_PERFILES_ADD"
                Dim vPKId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VNombrePerfil As New SqlParameter("@NombrePerfil", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREPERFIL)
                Dim VDescripcionPerfil As New SqlParameter("@DescripcionPerfil", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCIONPERFIL)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId_Perfil, VNombrePerfil, VDescripcionPerfil, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_PERFIL = vPKId_Perfil.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TBL_PERFILES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TBL_Perfiles_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TBL_PERFILES
                    NewItem.ID_PERFIL = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
                    NewItem.NOMBREPERFIL = IIf(Convert.IsDBNull(dr("NombrePerfil")), Nothing, dr("NombrePerfil"))
                    NewItem.DESCRIPCIONPERFIL = IIf(Convert.IsDBNull(dr("DescripcionPerfil")), Nothing, dr("DescripcionPerfil"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_PERFILES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_PERFILES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TBL_PERFILES) As Boolean

            Try
                _commandText = "_TBL_Perfiles_REMOVE"
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId_Perfil, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TBL_Perfiles_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TBL_PERFILES) As Boolean

            Try
                _commandText = "_TBL_Perfiles_UPDATE"

                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
                Dim VNombrePerfil As New SqlParameter("@NombrePerfil", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREPERFIL)
                Dim VDescripcionPerfil As New SqlParameter("@DescripcionPerfil", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCIONPERFIL)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_Perfil, VNombrePerfil, VDescripcionPerfil, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TBL_PERFILES)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TBL_PERFILES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TBL_PERFILES
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TBL_PERFILES. </remarks>
        Public Class ColumnNames
            Public Const ID_PERFIL As String = "ID_PERFIL"
            Public Const NOMBREPERFIL As String = "NOMBREPERFIL"
            Public Const DESCRIPCIONPERFIL As String = "DESCRIPCIONPERFIL"
        End Class ' ColumnNames
    End Class ' TBL_PERFILES
    Public Class TBL_PERFILESPERMISOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_PerfilPermisos
            Id_Perfil
            Id_Menu
            Lectura
            Escritura
            Eliminacion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TBL_PERFILESPERMISOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TBL_PERFILESPERMISOS) As Entities.Tables.TBL_PERFILESPERMISOS
            Dim result As Boolean

            Try
                _commandText = "_TBL_PERFILESPERMISOS_ADD"
                Dim vPKId_PerfilPermisos As New SqlParameter("@Id_PerfilPermisos", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
                Dim VId_Menu As New SqlParameter("@Id_Menu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENU)
                Dim VLectura As New SqlParameter("@Lectura", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LECTURA)
                Dim VEscritura As New SqlParameter("@Escritura", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESCRITURA)
                Dim VEliminacion As New SqlParameter("@Eliminacion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ELIMINACION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId_PerfilPermisos, VId_Perfil, VId_Menu, VLectura, VEscritura, VEliminacion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_PERFILPERMISOS = vPKId_PerfilPermisos.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TBL_PERFILESPERMISOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TBL_PerfilesPermisos_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TBL_PERFILESPERMISOS
                    NewItem.ID_PERFILPERMISOS = IIf(Convert.IsDBNull(dr("Id_PerfilPermisos")), Nothing, dr("Id_PerfilPermisos"))
                    NewItem.ID_PERFIL = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
                    NewItem.ID_MENU = IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu"))
                    NewItem.LECTURA = IIf(Convert.IsDBNull(dr("Lectura")), Nothing, dr("Lectura"))
                    NewItem.ESCRITURA = IIf(Convert.IsDBNull(dr("Escritura")), Nothing, dr("Escritura"))
                    NewItem.ELIMINACION = IIf(Convert.IsDBNull(dr("Eliminacion")), Nothing, dr("Eliminacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_PERFILESPERMISOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_PERFILESPERMISOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TBL_PERFILESPERMISOS) As Boolean

            Try
                _commandText = "_TBL_PerfilesPermisos_REMOVE"
                Dim VId_PerfilPermisos As New SqlParameter("@Id_PerfilPermisos", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFILPERMISOS)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId_PerfilPermisos, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TBL_PerfilesPermisos_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TBL_PERFILESPERMISOS) As Boolean

            Try
                _commandText = "_TBL_PerfilesPermisos_UPDATE"

                Dim VId_PerfilPermisos As New SqlParameter("@Id_PerfilPermisos", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFILPERMISOS)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
                Dim VId_Menu As New SqlParameter("@Id_Menu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENU)
                Dim VLectura As New SqlParameter("@Lectura", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LECTURA)
                Dim VEscritura As New SqlParameter("@Escritura", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESCRITURA)
                Dim VEliminacion As New SqlParameter("@Eliminacion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ELIMINACION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_PerfilPermisos, VId_Perfil, VId_Menu, VLectura, VEscritura, VEliminacion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TBL_PERFILESPERMISOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TBL_PERFILESPERMISOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TBL_PERFILESPERMISOS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TBL_PERFILESPERMISOS. </remarks>
        Public Class ColumnNames
            Public Const ID_PERFILPERMISOS As String = "ID_PERFILPERMISOS"
            Public Const ID_PERFIL As String = "ID_PERFIL"
            Public Const ID_MENU As String = "ID_MENU"
            Public Const LECTURA As String = "LECTURA"
            Public Const ESCRITURA As String = "ESCRITURA"
            Public Const ELIMINACION As String = "ELIMINACION"
        End Class ' ColumnNames
    End Class ' TBL_PERFILESPERMISOS
    'Public Class TBL_USUARIOS
    '    Public Enum ExceptionHandlingEnum
    '        ThrowExceptionHandling
    '        RaiseExceptionHandling
    '    End Enum
    '    Public Enum ColumnEnum
    '        Id_Usuario
    '        Id_Perfil
    '        IdentificadorUsuario
    '        ContraseniaUsuario
    '        NombreUsuario
    '        Inactivo
    '        Sector_id
    '        Email
    '    End Enum

    '    Private _commandText As String = Nothing
    '    Private _sqlErr As String = Nothing
    '    Private _sql As String = Nothing
    '    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    '    Private _connectionstring As String = Nothing
    '    Private _commandTimeout As Int32 = 30
    '    Protected _connection As System.Data.SqlClient.SqlConnection
    '    Private _transaction As Data.SqlClient.SqlTransaction
    '    Protected _whereParameterObject As New WhereParameterObject
    '    Protected _orderByParameterObject As New OrderByParameterObject
    '    Protected _aggregateParameterObject As New AggregateParameterObject
    '    Protected _itemList As New List(Of Entities.Tables.TBL_USUARIOS)
    '    Protected _aggregateItemList As New ArrayList

    '    Public Property Transaction() As Data.SqlClient.SqlTransaction
    '        Get
    '            Return _transaction
    '        End Get
    '        Set(ByVal value As Data.SqlClient.SqlTransaction)
    '            _transaction = value
    '        End Set
    '    End Property
    '    Public Sub New()
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub

    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _transaction = Transaction
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    Public Event OnError(ByVal ex As Exception)
    '    Public Property ExceptionHandling() As ExceptionHandlingEnum
    '        Get
    '            Return _exceptionHandling
    '        End Get
    '        Set(ByVal value As ExceptionHandlingEnum)
    '            _exceptionHandling = value
    '        End Set
    '    End Property


    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction por Reflexión
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal TransactionOwner As Object)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            Try
    '                Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
    '            Catch ex As Exception
    '                RaiseEvent OnError(New Exception("Error al asignar transacción"))
    '            End Try
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    ''' <summary>
    '    ''' Agrega un Registro a la base.
    '    ''' </summary>
    '    ''' <param name="ITEM"></param>
    '    ''' <remarks> </remarks>
    '    Public Overridable Function Add(ByVal Item As Entities.Tables.TBL_USUARIOS) As Entities.Tables.TBL_USUARIOS
    '        Dim result As Boolean

    '        Try
    '            _commandText = "_TBL_USUARIOS_ADD"
    '            Dim vPKId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
    '            Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
    '            Dim VIdentificadorUsuario As New SqlParameter("@IdentificadorUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IDENTIFICADORUSUARIO)
    '            Dim VContraseniaUsuario As New SqlParameter("@ContraseniaUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTRASENIAUSUARIO)
    '            Dim VNombreUsuario As New SqlParameter("@NombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREUSUARIO)
    '            Dim VInactivo As New SqlParameter("@Inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
    '            Dim VSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)
    '            Dim VEmail As New SqlParameter("@Email", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMAIL)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

    '            Dim params() As SqlParameter = {vPKId_Usuario, VId_Perfil, VIdentificadorUsuario, VContraseniaUsuario, VNombreUsuario, VInactivo, VSector_id, VEmail, Verr}
    '            If _transaction Is Nothing Then
    '                result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If
    '            If result Then
    '                Item.ID_USUARIO = vPKId_Usuario.Value
    '                Return Item
    '            Else
    '                Return Nothing
    '            End If
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        End Try
    '    End Function


    '    ''' <summary>
    '    ''' Retorna una consulta.
    '    ''' </summary>
    '    ''' <remarks> </remarks>
    '    Public Overridable Function Items() As List(Of Entities.Tables.TBL_USUARIOS)
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Try
    '            _commandText = "_TBL_Usuarios_ITEMS"
    '            _itemList.Clear()
    '            _sql = GetSQL()

    '            Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {Vsql, Verr}

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '            While dr.Read
    '                Dim NewItem As New Entities.Tables.TBL_USUARIOS
    '                NewItem.ID_USUARIO = IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario"))
    '                NewItem.ID_PERFIL = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
    '                NewItem.IDENTIFICADORUSUARIO = IIf(Convert.IsDBNull(dr("IdentificadorUsuario")), Nothing, dr("IdentificadorUsuario"))
    '                NewItem.CONTRASENIAUSUARIO = IIf(Convert.IsDBNull(dr("ContraseniaUsuario")), Nothing, dr("ContraseniaUsuario"))
    '                NewItem.NOMBREUSUARIO = IIf(Convert.IsDBNull(dr("NombreUsuario")), Nothing, dr("NombreUsuario"))
    '                NewItem.INACTIVO = IIf(Convert.IsDBNull(dr("Inactivo")), Nothing, dr("Inactivo"))
    '                NewItem.SECTOR_ID = IIf(Convert.IsDBNull(dr("Sector_id")), Nothing, dr("Sector_id"))
    '                NewItem.EMAIL = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
    '                _itemList.Add(NewItem)
    '            End While
    '            Return _itemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    Public Overridable Function AggregateItems() As ArrayList
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Try

    '            _commandText = "_AGGREGATE_ITEMS"
    '            _sql = GetSQL()
    '            Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
    '            Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_USUARIOS")
    '            Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If
    '            While dr.Read
    '                Dim _rowsItemList As New ArrayList
    '                For count As Int32 = 0 To dr.FieldCount - 1
    '                    _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

    '                Next
    '                _aggregateItemList.Add(_rowsItemList)

    '            End While
    '            Return _aggregateItemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Elimina registros de la base de datos.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Delete() As Boolean

    '        Try

    '            _commandText = "_DELETE_ITEMS"
    '            _sql = GetSQL()
    '            Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_USUARIOS")
    '            Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {VTable, Vsql, Verr}

    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        Finally
    '            _sqlErr = Nothing
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Elimina una instancia de tipo ITEM de la base.
    '    ''' </summary>
    '    ''' <param name="Item"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Remove(ByVal Item As Entities.Tables.TBL_USUARIOS) As Boolean

    '        Try
    '            _commandText = "_TBL_Usuarios_REMOVE"
    '            Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)

    '            Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {VId_Usuario, VSqlErr}
    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
    '    ''' </summary>
    '    ''' <param name="Truncate"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

    '        Try
    '            _commandText = "_TBL_Usuarios_CLEAR"
    '            Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

    '            Dim params() As SqlParameter = {VTRUNCATE, Verr}
    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        End Try
    '    End Function


    '    ''' <summary>
    '    ''' Actualiza una instancia de tipo ITEM en la base.
    '    ''' </summary>
    '    ''' <param name="Item"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Update(ByVal Item As Entities.Tables.TBL_USUARIOS) As Boolean

    '        Try
    '            _commandText = "_TBL_Usuarios_UPDATE"

    '            Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
    '            Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
    '            Dim VIdentificadorUsuario As New SqlParameter("@IdentificadorUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IDENTIFICADORUSUARIO)
    '            Dim VContraseniaUsuario As New SqlParameter("@ContraseniaUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTRASENIAUSUARIO)
    '            Dim VNombreUsuario As New SqlParameter("@NombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREUSUARIO)
    '            Dim VInactivo As New SqlParameter("@Inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
    '            Dim VSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)
    '            Dim VEmail As New SqlParameter("@Email", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMAIL)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

    '            Dim params() As SqlParameter = {VId_Usuario, VId_Perfil, VIdentificadorUsuario, VContraseniaUsuario, VNombreUsuario, VInactivo, VSector_id, VEmail, Verr}
    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        End Try
    '    End Function


    '    ''' <summary>
    '    ''' Inicia una Transaccion.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
    '        Try
    '            If _connection Is Nothing Then
    '                _connection = New SqlConnection(_connectionstring)
    '                _connection.Open()
    '                _transaction = _connection.BeginTransaction()
    '                Return _transaction
    '            Else
    '                RaiseEvent OnError(New Exception("Transaction already opened"))
    '                Return Nothing
    '            End If
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        End Try
    '    End Function
    '    ''' <summary>
    '    ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
    '    ''' </summary>
    '    ''' <param name="Commit"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
    '        Try
    '            If _connection Is Nothing Then
    '                RaiseEvent OnError(New Exception("Transaction not opened yet"))
    '            Else
    '                If Commit Then
    '                    _transaction.Commit()
    '                Else
    '                    _transaction.Rollback()
    '                End If
    '                _connection.Close()
    '                _connection = Nothing
    '                _transaction = Nothing
    '                Return True
    '            End If
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '        Return True
    '    End Function

    '    ''' <summary>
    '    ''' Conserva el resultado de la última consulta.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public ReadOnly Property Resultset() As List(Of Entities.Tables.TBL_USUARIOS)
    '        Get
    '            Return _itemList
    '        End Get

    '    End Property

    '    Private Function GetSQL() As String
    '        Try
    '            Dim _buff As String = String.Empty
    '            _buff &= Me.WhereParameter.GetSQL()
    '            _buff &= Me.OrderByParameter.GetSQL()
    '            Return _buff
    '        Catch ex As Exception
    '            Return Nothing
    '        End Try
    '    End Function
    '    Private Function GetAggregateSQL() As String
    '        Try
    '            Dim _buff As String = Nothing

    '            _buff &= Me.AggregateParameter.GetSQL()

    '            Return _buff
    '        Catch ex As Exception
    '            Return Nothing
    '        End Try
    '    End Function
    '    Public Property WhereParameter() As WhereParameterObject
    '        Get
    '            Return _whereParameterObject

    '        End Get
    '        Set(ByVal value As WhereParameterObject)
    '            _whereParameterObject = value
    '        End Set
    '    End Property
    '    Public Property OrderByParameter() As OrderByParameterObject
    '        Get
    '            Return _orderByParameterObject
    '        End Get
    '        Set(ByVal value As OrderByParameterObject)
    '            _orderByParameterObject = value
    '        End Set
    '    End Property
    '    Public Property AggregateParameter() As AggregateParameterObject
    '        Get
    '            Return _aggregateParameterObject
    '        End Get
    '        Set(ByVal value As AggregateParameterObject)
    '            _aggregateParameterObject = value
    '        End Set
    '    End Property

    '    Public Class OrderByParameterObject
    '        Inherits OrderByParameter

    '        Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
    '            Try
    '                _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

    '            Catch ex As Exception

    '            End Try

    '        End Sub
    '    End Class

    '    Public Class WhereParameterObject
    '        Inherits WhereParameter

    '        Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
    '            Try
    '                Select Case Operand
    '                    Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
    '                        Dim _buff As String = Nothing
    '                        For Each obj As Object In Value
    '                            _buff &= obj.ToString & ","
    '                        Next
    '                        _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
    '                    Case Else
    '                        If Value.Length > 1 Then
    '                            Throw New Exception("Demasiados argumentos para la consulta.")
    '                        Else
    '                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
    '                        End If
    '                End Select


    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Sub
    '        Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

    '            Try
    '                Select Case Operand
    '                    Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
    '                        Dim _buff As String = Nothing
    '                        For Each obj As Object In Value
    '                            _buff &= obj.ToString & ","
    '                        Next
    '                        MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
    '                    Case Else
    '                        If Value.Length > 1 Then
    '                            Throw New Exception("Demasiados argumentos para la consulta.")
    '                        Else
    '                            _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
    '                        End If
    '                End Select


    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Sub
    '        Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
    '            Try
    '                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Sub
    '        Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

    '            If _whereParams.Count Then
    '                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
    '            Else
    '                Throw New Exception("Error de sobrecarga")
    '            End If

    '        End Sub
    '        Private Function FormatValue(ByVal Value As Object) As String
    '            Try
    '                Select Case Value.GetType.FullName
    '                    Case "System.String", "System.DateTime"
    '                        Return "'" & Value & "'"
    '                    Case Else
    '                        Return Value
    '                End Select
    '            Catch ex As Exception
    '                Throw New Exception("Error Convirtiendo valor")
    '            End Try
    '        End Function
    '    End Class


    '    Public Class AggregateParameterObject
    '        Inherits AggregateParameter

    '        Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
    '            Try
    '                _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

    '            Catch ex As Exception

    '            End Try

    '        End Sub
    '    End Class
    '    ''' <summary>
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Public Class ITEM
    '        Inherits Entities.Tables.TBL_USUARIOS
    '    End Class 'ITEM

    '    ''' Clase         : ColumnNames 
    '    ''' Descripción   : Nombres de Columnas de la tabla TBL_USUARIOS
    '    ''' Fecha de Creación  : lunes, 25 de julio de 2016
    '    ''' <remarks> Representa los Nombres de Columnas de la tabla TBL_USUARIOS. </remarks>
    '    Public Class ColumnNames
    '        Public Const ID_USUARIO As String = "ID_USUARIO"
    '        Public Const ID_PERFIL As String = "ID_PERFIL"
    '        Public Const IDENTIFICADORUSUARIO As String = "IDENTIFICADORUSUARIO"
    '        Public Const CONTRASENIAUSUARIO As String = "CONTRASENIAUSUARIO"
    '        Public Const NOMBREUSUARIO As String = "NOMBREUSUARIO"
    '        Public Const INACTIVO As String = "INACTIVO"
    '        Public Const SECTOR_ID As String = "SECTOR_ID"
    '        Public Const EMAIL As String = "EMAIL"
    '    End Class ' ColumnNames
    'End Class ' TBL_USUARIOS
    Public Class TBL_USUARIOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Usuario
            Id_Perfil
            IdentificadorUsuario
            ContraseniaUsuario
            NombreUsuario
            Inactivo
            Sector_id
            Email
            Empresa
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TBL_USUARIOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TBL_USUARIOS) As Entities.Tables.TBL_USUARIOS
            Dim result As Boolean

            Try
                _commandText = "_TBL_USUARIOS_ADD"
                Dim vPKId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
                Dim VIdentificadorUsuario As New SqlParameter("@IdentificadorUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IDENTIFICADORUSUARIO)
                Dim VContraseniaUsuario As New SqlParameter("@ContraseniaUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTRASENIAUSUARIO)
                Dim VNombreUsuario As New SqlParameter("@NombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREUSUARIO)
                Dim VInactivo As New SqlParameter("@Inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim VSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)
                Dim VEmail As New SqlParameter("@Email", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMAIL)
                Dim VEmpresa As New SqlParameter("@Empresa", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMPRESA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId_Usuario, VId_Perfil, VIdentificadorUsuario, VContraseniaUsuario, VNombreUsuario, VInactivo, VSector_id, VEmail, VEmpresa, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_USUARIO = vPKId_Usuario.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TBL_USUARIOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TBL_Usuarios_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TBL_USUARIOS
                    NewItem.ID_USUARIO = IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario"))
                    NewItem.ID_PERFIL = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
                    NewItem.IDENTIFICADORUSUARIO = IIf(Convert.IsDBNull(dr("IdentificadorUsuario")), Nothing, dr("IdentificadorUsuario"))
                    NewItem.CONTRASENIAUSUARIO = IIf(Convert.IsDBNull(dr("ContraseniaUsuario")), Nothing, dr("ContraseniaUsuario"))
                    NewItem.NOMBREUSUARIO = IIf(Convert.IsDBNull(dr("NombreUsuario")), Nothing, dr("NombreUsuario"))
                    NewItem.INACTIVO = IIf(Convert.IsDBNull(dr("Inactivo")), Nothing, dr("Inactivo"))
                    NewItem.SECTOR_ID = IIf(Convert.IsDBNull(dr("Sector_id")), Nothing, dr("Sector_id"))
                    NewItem.EMAIL = IIf(Convert.IsDBNull(dr("Email")), Nothing, dr("Email"))
                    NewItem.EMPRESA = IIf(Convert.IsDBNull(dr("Empresa")), Nothing, dr("Empresa"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_USUARIOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_USUARIOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TBL_USUARIOS) As Boolean

            Try
                _commandText = "_TBL_Usuarios_REMOVE"
                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId_Usuario, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TBL_Usuarios_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TBL_USUARIOS) As Boolean

            Try
                _commandText = "_TBL_Usuarios_UPDATE"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
                Dim VIdentificadorUsuario As New SqlParameter("@IdentificadorUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IDENTIFICADORUSUARIO)
                Dim VContraseniaUsuario As New SqlParameter("@ContraseniaUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTRASENIAUSUARIO)
                Dim VNombreUsuario As New SqlParameter("@NombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREUSUARIO)
                Dim VInactivo As New SqlParameter("@Inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim VSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)
                Dim VEmail As New SqlParameter("@Email", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMAIL)
                Dim VEmpresa As New SqlParameter("@Empresa", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMPRESA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_Usuario, VId_Perfil, VIdentificadorUsuario, VContraseniaUsuario, VNombreUsuario, VInactivo, VSector_id, VEmail, VEmpresa, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TBL_USUARIOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TBL_USUARIOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TBL_USUARIOS
        ''' Fecha de Creación  : lunes, 12 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TBL_USUARIOS. </remarks>
        Public Class ColumnNames
            Public Const ID_USUARIO As String = "ID_USUARIO"
            Public Const ID_PERFIL As String = "ID_PERFIL"
            Public Const IDENTIFICADORUSUARIO As String = "IDENTIFICADORUSUARIO"
            Public Const CONTRASENIAUSUARIO As String = "CONTRASENIAUSUARIO"
            Public Const NOMBREUSUARIO As String = "NOMBREUSUARIO"
            Public Const INACTIVO As String = "INACTIVO"
            Public Const SECTOR_ID As String = "SECTOR_ID"
            Public Const EMAIL As String = "EMAIL"
            Public Const EMPRESA As String = "EMPRESA"
        End Class ' ColumnNames
    End Class ' TBL_USUARIOS
    Public Class ESTADORECLAMOPROVEEDOR
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Estado_id
            Descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.ESTADORECLAMOPROVEEDOR)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.ESTADORECLAMOPROVEEDOR) As Entities.Tables.ESTADORECLAMOPROVEEDOR
            Dim result As Boolean

            Try
                _commandText = "_ESTADORECLAMOPROVEEDOR_ADD"
                Dim vPKEstado_id As New SqlParameter("@Estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKEstado_id, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ESTADO_ID = vPKEstado_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.ESTADORECLAMOPROVEEDOR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EstadoReclamoProveedor_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.ESTADORECLAMOPROVEEDOR
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("Estado_id")), Nothing, dr("Estado_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "ESTADORECLAMOPROVEEDOR")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "ESTADORECLAMOPROVEEDOR")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.ESTADORECLAMOPROVEEDOR) As Boolean

            Try
                _commandText = "_EstadoReclamoProveedor_REMOVE"
                Dim VEstado_id As New SqlParameter("@Estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VEstado_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EstadoReclamoProveedor_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.ESTADORECLAMOPROVEEDOR) As Boolean

            Try
                _commandText = "_EstadoReclamoProveedor_UPDATE"

                Dim VEstado_id As New SqlParameter("@Estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VEstado_id, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.ESTADORECLAMOPROVEEDOR)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.ESTADORECLAMOPROVEEDOR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ESTADORECLAMOPROVEEDOR
        ''' Fecha de Creación  : domingo, 24 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla ESTADORECLAMOPROVEEDOR. </remarks>
        Public Class ColumnNames
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' ESTADORECLAMOPROVEEDOR
    Public Class TIPORECLAMOPROVEEDOR
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            tipoReclamo
            Descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TIPORECLAMOPROVEEDOR)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TIPORECLAMOPROVEEDOR) As Entities.Tables.TIPORECLAMOPROVEEDOR
            Dim result As Boolean

            Try
                _commandText = "_TIPORECLAMOPROVEEDOR_ADD"
                Dim vPKtipoReclamo As New SqlParameter("@tipoReclamo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPORECLAMO)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKtipoReclamo, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.TIPORECLAMO = vPKtipoReclamo.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TIPORECLAMOPROVEEDOR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TipoReclamoProveedor_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TIPORECLAMOPROVEEDOR
                    NewItem.TIPORECLAMO = IIf(Convert.IsDBNull(dr("tipoReclamo")), Nothing, dr("tipoReclamo"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TIPORECLAMOPROVEEDOR")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TIPORECLAMOPROVEEDOR")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TIPORECLAMOPROVEEDOR) As Boolean

            Try
                _commandText = "_TipoReclamoProveedor_REMOVE"
                Dim VtipoReclamo As New SqlParameter("@tipoReclamo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPORECLAMO)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VtipoReclamo, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TipoReclamoProveedor_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TIPORECLAMOPROVEEDOR) As Boolean

            Try
                _commandText = "_TipoReclamoProveedor_UPDATE"

                Dim VtipoReclamo As New SqlParameter("@tipoReclamo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPORECLAMO)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VtipoReclamo, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TIPORECLAMOPROVEEDOR)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TIPORECLAMOPROVEEDOR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TIPORECLAMOPROVEEDOR
        ''' Fecha de Creación  : domingo, 24 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TIPORECLAMOPROVEEDOR. </remarks>
        Public Class ColumnNames
            Public Const TIPORECLAMO As String = "TIPORECLAMO"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' TIPORECLAMOPROVEEDOR
    Public Class ENTREGAORDENPAGO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            ccoemp_Codigo
            ccosuc_Cod
            cco_ID
            cco_Nro
            cco_FEmision
            cco_ImpMonLoc
            cco_CodPro
            ccopro_RazSoc
            fechaRetiro
            usuario
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.ENTREGAORDENPAGO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.ENTREGAORDENPAGO) As Entities.Tables.ENTREGAORDENPAGO
            Dim result As Boolean

            Try
                _commandText = "_ENTREGAORDENPAGO_ADD"
                Dim vPKccoemp_Codigo As New SQLParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccoemp_Codigo)
                Dim vPKccosuc_Cod As New SQLParameter("@ccosuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccosuc_Cod)
                Dim vPKcco_ID As New SQLParameter("@cco_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ID)
                Dim Vcco_Nro As New SQLParameter("@cco_Nro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_Nro)
                Dim Vcco_FEmision As New SQLParameter("@cco_FEmision", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.cco_FEmision = Date.minvalue, Nothing, Item.cco_FEmision))
                Dim Vcco_ImpMonLoc As New SQLParameter("@cco_ImpMonLoc", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ImpMonLoc)
                Dim Vcco_CodPro As New SQLParameter("@cco_CodPro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_CodPro)
                Dim Vccopro_RazSoc As New SQLParameter("@ccopro_RazSoc", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccopro_RazSoc)
                Dim VfechaRetiro As New SQLParameter("@fechaRetiro", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaRetiro = Date.minvalue, Nothing, Item.fechaRetiro))
                Dim Vusuario As New SQLParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKccoemp_Codigo, vPKccosuc_Cod, vPKcco_ID, Vcco_Nro, Vcco_FEmision, Vcco_ImpMonLoc, Vcco_CodPro, Vccopro_RazSoc, VfechaRetiro, Vusuario, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.ccoemp_Codigo = vPKccoemp_Codigo.Value
                    Item.ccosuc_Cod = vPKccosuc_Cod.Value
                    Item.cco_ID = vPKcco_ID.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.ENTREGAORDENPAGO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EntregaOrdenPago_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.ENTREGAORDENPAGO
                    NewItem.ccoemp_Codigo = IIf(Convert.IsDBNull(dr("ccoemp_Codigo")), Nothing, dr("ccoemp_Codigo"))
                    NewItem.ccosuc_Cod = IIf(Convert.IsDBNull(dr("ccosuc_Cod")), Nothing, dr("ccosuc_Cod"))
                    NewItem.cco_ID = IIf(Convert.IsDBNull(dr("cco_ID")), Nothing, dr("cco_ID"))
                    NewItem.cco_Nro = IIf(Convert.IsDBNull(dr("cco_Nro")), Nothing, dr("cco_Nro"))
                    NewItem.cco_FEmision = IIf(Convert.IsDBNull(dr("cco_FEmision")), Nothing, dr("cco_FEmision"))
                    NewItem.cco_ImpMonLoc = IIf(Convert.IsDBNull(dr("cco_ImpMonLoc")), Nothing, dr("cco_ImpMonLoc"))
                    NewItem.cco_CodPro = IIf(Convert.IsDBNull(dr("cco_CodPro")), Nothing, dr("cco_CodPro"))
                    NewItem.ccopro_RazSoc = IIf(Convert.IsDBNull(dr("ccopro_RazSoc")), Nothing, dr("ccopro_RazSoc"))
                    NewItem.fechaRetiro = IIf(Convert.IsDBNull(dr("fechaRetiro")), Nothing, dr("fechaRetiro"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "ENTREGAORDENPAGO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "ENTREGAORDENPAGO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.ENTREGAORDENPAGO) As Boolean

            Try
                _commandText = "_EntregaOrdenPago_REMOVE"
                Dim Vccoemp_Codigo As New SQLParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccoemp_Codigo)
                Dim Vccosuc_Cod As New SQLParameter("@ccosuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccosuc_Cod)
                Dim Vcco_ID As New SQLParameter("@cco_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {Vccoemp_Codigo, Vccosuc_Cod, Vcco_ID, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EntregaOrdenPago_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.ENTREGAORDENPAGO) As Boolean

            Try
                _commandText = "_EntregaOrdenPago_UPDATE"

                Dim Vccoemp_Codigo As New SQLParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccoemp_Codigo)
                Dim Vccosuc_Cod As New SQLParameter("@ccosuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccosuc_Cod)
                Dim Vcco_ID As New SQLParameter("@cco_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ID)
                Dim Vcco_Nro As New SQLParameter("@cco_Nro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_Nro)
                Dim Vcco_FEmision As New SQLParameter("@cco_FEmision", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.cco_FEmision = Date.minvalue, Nothing, Item.cco_FEmision))
                Dim Vcco_ImpMonLoc As New SQLParameter("@cco_ImpMonLoc", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ImpMonLoc)
                Dim Vcco_CodPro As New SQLParameter("@cco_CodPro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_CodPro)
                Dim Vccopro_RazSoc As New SQLParameter("@ccopro_RazSoc", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccopro_RazSoc)
                Dim VfechaRetiro As New SQLParameter("@fechaRetiro", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaRetiro = Date.minvalue, Nothing, Item.fechaRetiro))
                Dim Vusuario As New SQLParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {Vccoemp_Codigo, Vccosuc_Cod, Vcco_ID, Vcco_Nro, Vcco_FEmision, Vcco_ImpMonLoc, Vcco_CodPro, Vccopro_RazSoc, VfechaRetiro, Vusuario, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.ENTREGAORDENPAGO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.ENTREGAORDENPAGO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ENTREGAORDENPAGO
        ''' Fecha de Creación  : viernes, 12 de junio de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla ENTREGAORDENPAGO. </remarks>
        Public Class ColumnNames
            Public Const CCOEMP_CODIGO As String = "CCOEMP_CODIGO"
            Public Const CCOSUC_COD As String = "CCOSUC_COD"
            Public Const CCO_ID As String = "CCO_ID"
            Public Const CCO_NRO As String = "CCO_NRO"
            Public Const CCO_FEMISION As String = "CCO_FEMISION"
            Public Const CCO_IMPMONLOC As String = "CCO_IMPMONLOC"
            Public Const CCO_CODPRO As String = "CCO_CODPRO"
            Public Const CCOPRO_RAZSOC As String = "CCOPRO_RAZSOC"
            Public Const FECHARETIRO As String = "FECHARETIRO"
            Public Const USUARIO As String = "USUARIO"
        End Class ' ColumnNames
    End Class ' ENTREGAORDENPAGO
    Public Class HISTORIALSEGUIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id
            ccoemp_Codigo
            ccosuc_Cod
            cco_ID
            fecha
            Obs
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.HISTORIALSEGUIMIENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.HISTORIALSEGUIMIENTO) As Entities.Tables.HISTORIALSEGUIMIENTO
            Dim result As Boolean

            Try
                _commandText = "_HISTORIALSEGUIMIENTO_ADD"
                Dim vPKId As New SQLParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim vPKccoemp_Codigo As New SQLParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccoemp_Codigo)
                Dim vPKccosuc_Cod As New SQLParameter("@ccosuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccosuc_Cod)
                Dim vPKcco_ID As New SQLParameter("@cco_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ID)
                Dim Vfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.minvalue, Nothing, Item.fecha))
                Dim VObs As New SQLParameter("@Obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Obs)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKId, vPKccoemp_Codigo, vPKccosuc_Cod, vPKcco_ID, Vfecha, VObs, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.Id = vPKId.Value
                    Item.ccoemp_Codigo = vPKccoemp_Codigo.Value
                    Item.ccosuc_Cod = vPKccosuc_Cod.Value
                    Item.cco_ID = vPKcco_ID.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.HISTORIALSEGUIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_historialSeguimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.HISTORIALSEGUIMIENTO
                    NewItem.Id = IIf(Convert.IsDBNull(dr("Id")), Nothing, dr("Id"))
                    NewItem.ccoemp_Codigo = IIf(Convert.IsDBNull(dr("ccoemp_Codigo")), Nothing, dr("ccoemp_Codigo"))
                    NewItem.ccosuc_Cod = IIf(Convert.IsDBNull(dr("ccosuc_Cod")), Nothing, dr("ccosuc_Cod"))
                    NewItem.cco_ID = IIf(Convert.IsDBNull(dr("cco_ID")), Nothing, dr("cco_ID"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.Obs = IIf(Convert.IsDBNull(dr("Obs")), Nothing, dr("Obs"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "HISTORIALSEGUIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "HISTORIALSEGUIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.HISTORIALSEGUIMIENTO) As Boolean

            Try
                _commandText = "_historialSeguimiento_REMOVE"
                Dim VId As New SQLParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Id)
                Dim Vccoemp_Codigo As New SQLParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccoemp_Codigo)
                Dim Vccosuc_Cod As New SQLParameter("@ccosuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccosuc_Cod)
                Dim Vcco_ID As New SQLParameter("@cco_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VId, Vccoemp_Codigo, Vccosuc_Cod, Vcco_ID, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_historialSeguimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.HISTORIALSEGUIMIENTO) As Boolean

            Try
                _commandText = "_historialSeguimiento_UPDATE"

                Dim VId As New SQLParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Id)
                Dim Vccoemp_Codigo As New SQLParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccoemp_Codigo)
                Dim Vccosuc_Cod As New SQLParameter("@ccosuc_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccosuc_Cod)
                Dim Vcco_ID As New SQLParameter("@cco_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ID)
                Dim Vfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.minvalue, Nothing, Item.fecha))
                Dim VObs As New SQLParameter("@Obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Obs)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {VId, Vccoemp_Codigo, Vccosuc_Cod, Vcco_ID, Vfecha, VObs, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.HISTORIALSEGUIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.HISTORIALSEGUIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla HISTORIALSEGUIMIENTO
        ''' Fecha de Creación  : jueves, 18 de junio de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla HISTORIALSEGUIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const CCOEMP_CODIGO As String = "CCOEMP_CODIGO"
            Public Const CCOSUC_COD As String = "CCOSUC_COD"
            Public Const CCO_ID As String = "CCO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const OBS As String = "OBS"
        End Class ' ColumnNames
    End Class ' HISTORIALSEGUIMIENTO

    Public Class RECLAMOFACTURASINCARGAR
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id
            ccoemp_Codigo
            cco_CodPro
            ccopro_RazSoc
            cco_Nro
            cco_FEmision
            cco_ImpMonLoc
            fechaReclamo
            usuario
            EnBejerman
            Obs
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.RECLAMOFACTURASINCARGAR)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.RECLAMOFACTURASINCARGAR) As Entities.Tables.RECLAMOFACTURASINCARGAR
            Dim result As Boolean

            Try
                _commandText = "_RECLAMOFACTURASINCARGAR_ADD"
                Dim vPKId As New SqlParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vccoemp_Codigo As New SqlParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CCOEMP_CODIGO)
                Dim Vcco_CodPro As New SQLParameter("@cco_CodPro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_CodPro)
                Dim Vccopro_RazSoc As New SQLParameter("@ccopro_RazSoc", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccopro_RazSoc)
                Dim Vcco_Nro As New SQLParameter("@cco_Nro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_Nro)
                Dim Vcco_FEmision As New SQLParameter("@cco_FEmision", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.cco_FEmision = Date.minvalue, Nothing, Item.cco_FEmision))
                Dim Vcco_ImpMonLoc As New SQLParameter("@cco_ImpMonLoc", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ImpMonLoc)
                Dim VfechaReclamo As New SQLParameter("@fechaReclamo", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaReclamo = Date.minvalue, Nothing, Item.fechaReclamo))
                Dim Vusuario As New SQLParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario)
                Dim VEnBejerman As New SQLParameter("@EnBejerman", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EnBejerman)
                Dim VObs As New SQLParameter("@Obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Obs)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId, Vccoemp_Codigo, Vcco_CodPro, Vccopro_RazSoc, Vcco_Nro, Vcco_FEmision, Vcco_ImpMonLoc, VfechaReclamo, Vusuario, VEnBejerman, VObs, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.Id = vPKId.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.RECLAMOFACTURASINCARGAR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_ReclamoFacturaSinCargar_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.RECLAMOFACTURASINCARGAR
                    NewItem.ID = IIf(Convert.IsDBNull(dr("Id")), Nothing, dr("Id"))
                    NewItem.CCOEMP_CODIGO = IIf(Convert.IsDBNull(dr("ccoemp_Codigo")), Nothing, dr("ccoemp_Codigo"))
                    NewItem.cco_CodPro = IIf(Convert.IsDBNull(dr("cco_CodPro")), Nothing, dr("cco_CodPro"))
                    NewItem.ccopro_RazSoc = IIf(Convert.IsDBNull(dr("ccopro_RazSoc")), Nothing, dr("ccopro_RazSoc"))
                    NewItem.cco_Nro = IIf(Convert.IsDBNull(dr("cco_Nro")), Nothing, dr("cco_Nro"))
                    NewItem.cco_FEmision = IIf(Convert.IsDBNull(dr("cco_FEmision")), Nothing, dr("cco_FEmision"))
                    NewItem.cco_ImpMonLoc = IIf(Convert.IsDBNull(dr("cco_ImpMonLoc")), Nothing, dr("cco_ImpMonLoc"))
                    NewItem.fechaReclamo = IIf(Convert.IsDBNull(dr("fechaReclamo")), Nothing, dr("fechaReclamo"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.EnBejerman = IIf(Convert.IsDBNull(dr("EnBejerman")), Nothing, dr("EnBejerman"))
                    NewItem.Obs = IIf(Convert.IsDBNull(dr("Obs")), Nothing, dr("Obs"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "RECLAMOFACTURASINCARGAR")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "RECLAMOFACTURASINCARGAR")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.RECLAMOFACTURASINCARGAR) As Boolean

            Try
                _commandText = "_ReclamoFacturaSinCargar_REMOVE"
                Dim VId As New SQLParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Id)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VId, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_ReclamoFacturaSinCargar_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.RECLAMOFACTURASINCARGAR) As Boolean

            Try
                _commandText = "_ReclamoFacturaSinCargar_UPDATE"

                Dim VId As New SqlParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)
                Dim Vccoemp_Codigo As New SqlParameter("@ccoemp_Codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CCOEMP_CODIGO)
                Dim Vcco_CodPro As New SQLParameter("@cco_CodPro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_CodPro)
                Dim Vccopro_RazSoc As New SQLParameter("@ccopro_RazSoc", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ccopro_RazSoc)
                Dim Vcco_Nro As New SQLParameter("@cco_Nro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_Nro)
                Dim Vcco_FEmision As New SQLParameter("@cco_FEmision", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.cco_FEmision = Date.minvalue, Nothing, Item.cco_FEmision))
                Dim Vcco_ImpMonLoc As New SQLParameter("@cco_ImpMonLoc", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cco_ImpMonLoc)
                Dim VfechaReclamo As New SQLParameter("@fechaReclamo", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaReclamo = Date.minvalue, Nothing, Item.fechaReclamo))
                Dim Vusuario As New SQLParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario)
                Dim VEnBejerman As New SQLParameter("@EnBejerman", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EnBejerman)
                Dim VObs As New SQLParameter("@Obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Obs)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId, Vccoemp_Codigo, Vcco_CodPro, Vccopro_RazSoc, Vcco_Nro, Vcco_FEmision, Vcco_ImpMonLoc, VfechaReclamo, Vusuario, VEnBejerman, VObs, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.RECLAMOFACTURASINCARGAR)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.RECLAMOFACTURASINCARGAR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla RECLAMOFACTURASINCARGAR
        ''' Fecha de Creación  : miércoles, 29 de julio de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla RECLAMOFACTURASINCARGAR. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const CCOEMP_CODIGO As String = "CCOEMP_CODIGO"
            Public Const CCO_CODPRO As String = "CCO_CODPRO"
            Public Const CCOPRO_RAZSOC As String = "CCOPRO_RAZSOC"
            Public Const CCO_NRO As String = "CCO_NRO"
            Public Const CCO_FEMISION As String = "CCO_FEMISION"
            Public Const CCO_IMPMONLOC As String = "CCO_IMPMONLOC"
            Public Const FECHARECLAMO As String = "FECHARECLAMO"
            Public Const USUARIO As String = "USUARIO"
            Public Const ENBEJERMAN As String = "ENBEJERMAN"
            Public Const OBS As String = "OBS"
        End Class ' ColumnNames
    End Class ' RECLAMOFACTURASINCARGAR
    Public Class STKENVIOSARTICULOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            fecha
            ID_Articulo
            uniMed
            cantidad
            usuario
            Obs
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKENVIOSARTICULOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKENVIOSARTICULOS) As Entities.Tables.STKENVIOSARTICULOS
            Dim result As Boolean

            Try
                _commandText = "_STKENVIOSARTICULOS_ADD"
                Dim vPKcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim vPKfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.fecha)
                Dim VID_Articulo As New SQLParameter("@ID_Articulo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_Articulo)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim Vcantidad As New SQLParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidad)
                Dim Vusuario As New SQLParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario)
                Dim VObs As New SQLParameter("@Obs", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Obs)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKcodEmp, vPKfecha, VID_Articulo, VuniMed, Vcantidad, Vusuario, VObs, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.codEmp = vPKcodEmp.Value
                    Item.fecha = vPKfecha.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKENVIOSARTICULOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkEnviosArticulos_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKENVIOSARTICULOS
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.ID_Articulo = IIf(Convert.IsDBNull(dr("ID_Articulo")), Nothing, dr("ID_Articulo"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.Obs = IIf(Convert.IsDBNull(dr("Obs")), Nothing, dr("Obs"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKENVIOSARTICULOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKENVIOSARTICULOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKENVIOSARTICULOS) As Boolean

            Try
                _commandText = "_stkEnviosArticulos_REMOVE"
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim Vfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.fecha)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VcodEmp, Vfecha, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkEnviosArticulos_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKENVIOSARTICULOS) As Boolean

            Try
                _commandText = "_stkEnviosArticulos_UPDATE"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim Vfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.minvalue, Nothing, Item.fecha))
                Dim VID_Articulo As New SQLParameter("@ID_Articulo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_Articulo)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim Vcantidad As New SQLParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidad)
                Dim Vusuario As New SQLParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario)
                Dim VObs As New SQLParameter("@Obs", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Obs)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {VcodEmp, Vfecha, VID_Articulo, VuniMed, Vcantidad, Vusuario, VObs, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKENVIOSARTICULOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKENVIOSARTICULOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKENVIOSARTICULOS
        ''' Fecha de Creación  : lunes, 10 de agosto de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKENVIOSARTICULOS. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const FECHA As String = "FECHA"
            Public Const ID_ARTICULO As String = "ID_ARTICULO"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const USUARIO As String = "USUARIO"
            Public Const OBS As String = "OBS"
        End Class ' ColumnNames
    End Class ' STKENVIOSARTICULOS

    Public Class COMAUTORIZACION
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            nivel_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMAUTORIZACION)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMAUTORIZACION) As Entities.Tables.COMAUTORIZACION
            Dim result As Boolean

            Try
                _commandText = "_COMAUTORIZACION_ADD"
                Dim vPKnivel_id As New SqlParameter("@nivel_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKnivel_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.NIVEL_ID = vPKnivel_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMAUTORIZACION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comAutorizacion_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMAUTORIZACION
                    NewItem.NIVEL_ID = IIf(Convert.IsDBNull(dr("nivel_id")), Nothing, dr("nivel_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMAUTORIZACION")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMAUTORIZACION")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMAUTORIZACION) As Boolean

            Try
                _commandText = "_comAutorizacion_REMOVE"
                Dim Vnivel_id As New SqlParameter("@nivel_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVEL_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vnivel_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comAutorizacion_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMAUTORIZACION) As Boolean

            Try
                _commandText = "_comAutorizacion_UPDATE"

                Dim Vnivel_id As New SqlParameter("@nivel_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVEL_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vnivel_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMAUTORIZACION)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMAUTORIZACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMAUTORIZACION
        ''' Fecha de Creación  : miércoles, 02 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMAUTORIZACION. </remarks>
        Public Class ColumnNames
            Public Const NIVEL_ID As String = "NIVEL_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' COMAUTORIZACION

    Public Class COMESTADO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            estado_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMESTADO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMESTADO) As Entities.Tables.COMESTADO
            Dim result As Boolean

            Try
                _commandText = "_COMESTADO_ADD"
                Dim vPKestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKestado_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ESTADO_ID = vPKestado_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMESTADO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comEstado_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMESTADO
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMESTADO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMESTADO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMESTADO) As Boolean

            Try
                _commandText = "_comEstado_REMOVE"
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vestado_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comEstado_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMESTADO) As Boolean

            Try
                _commandText = "_comEstado_UPDATE"

                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vestado_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMESTADO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMESTADO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMESTADO
        ''' Fecha de Creación  : miércoles, 02 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMESTADO. </remarks>
        Public Class ColumnNames
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' COMESTADO

    'Public Class COMORDENCOMPRA
    '    Public Enum ExceptionHandlingEnum
    '        ThrowExceptionHandling
    '        RaiseExceptionHandling
    '    End Enum
    '    Public Enum ColumnEnum
    '        codEmp
    '        ordenCompra_id
    '        codEmpRequerimiento
    '        requerimiento_id
    '        fecha
    '        proveed_id
    '        sectorRequerimiento_id
    '        estado_id
    '        tipoOc_id
    '        modificaCosto
    '        condicionPago_id
    '        obs
    '        usuario
    '        usuarioAutoriza
    '        PDC
    '        fechaAutorizacion
    '        motivoFinaliz_Anulacion
    '        fechaFinaliz_Anulacion
    '        pedidoDiario
    '        proveed_Original
    '        sectorEntrega_id
    '    End Enum

    '    Private _commandText As String = Nothing
    '    Private _sqlErr As String = Nothing
    '    Private _sql As String = Nothing
    '    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    '    Private _connectionstring As String = Nothing
    '    Private _commandTimeout As Int32 = 30
    '    Protected _connection As System.Data.SqlClient.SqlConnection
    '    Private _transaction As Data.SqlClient.SqlTransaction
    '    Protected _whereParameterObject As New WhereParameterObject
    '    Protected _orderByParameterObject As New OrderByParameterObject
    '    Protected _aggregateParameterObject As New AggregateParameterObject
    '    Protected _itemList As New List(Of Entities.Tables.COMORDENCOMPRA)
    '    Protected _aggregateItemList As New ArrayList

    '    Public Property Transaction() As Data.SqlClient.SqlTransaction
    '        Get
    '            Return _transaction
    '        End Get
    '        Set(ByVal value As Data.SqlClient.SqlTransaction)
    '            _transaction = value
    '        End Set
    '    End Property
    '    Public Sub New()
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub

    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _transaction = Transaction
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    Public Event OnError(ByVal ex As Exception)
    '    Public Property ExceptionHandling() As ExceptionHandlingEnum
    '        Get
    '            Return _exceptionHandling
    '        End Get
    '        Set(ByVal value As ExceptionHandlingEnum)
    '            _exceptionHandling = value
    '        End Set
    '    End Property


    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction por Reflexión
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal TransactionOwner As Object)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            Try
    '                Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
    '            Catch ex As Exception
    '                RaiseEvent OnError(New Exception("Error al asignar transacción"))
    '            End Try
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    ''' <summary>
    '    ''' Agrega un Registro a la base.
    '    ''' </summary>
    '    ''' <param name="ITEM"></param>
    '    ''' <remarks> </remarks>
    '    Public Overridable Function Add(ByVal Item As Entities.Tables.COMORDENCOMPRA) As Entities.Tables.COMORDENCOMPRA
    '        Dim result As Boolean

    '        Try
    '            _commandText = "_COMORDENCOMPRA_ADD"
    '            Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
    '            Dim vPKordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
    '            Dim VcodEmpRequerimiento As New SqlParameter("@codEmpRequerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPREQUERIMIENTO)
    '            Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
    '            Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
    '            Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
    '            Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
    '            Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
    '            Dim VtipoOc_id As New SqlParameter("@tipoOc_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOOC_ID)
    '            Dim VmodificaCosto As New SqlParameter("@modificaCosto", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MODIFICACOSTO)
    '            Dim VcondicionPago_id As New SqlParameter("@condicionPago_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONDICIONPAGO_ID)
    '            Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
    '            Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
    '            Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
    '            Dim VPDC As New SqlParameter("@PDC", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PDC)
    '            Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
    '            Dim VmotivoFinaliz_Anulacion As New SqlParameter("@motivoFinaliz_Anulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOFINALIZ_ANULACION)
    '            Dim VfechaFinaliz_Anulacion As New SqlParameter("@fechaFinaliz_Anulacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAFINALIZ_ANULACION = Date.MinValue, Nothing, Item.FECHAFINALIZ_ANULACION))
    '            Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
    '            Dim Vproveed_Original As New SqlParameter("@proveed_Original", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ORIGINAL)
    '            Dim VsectorEntrega_id As New SqlParameter("@sectorEntrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORENTREGA_ID)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

    '            Dim params() As SqlParameter = {vPKcodEmp, vPKordenCompra_id, VcodEmpRequerimiento, Vrequerimiento_id, Vfecha, Vproveed_id, VsectorRequerimiento_id, Vestado_id, VtipoOc_id, VmodificaCosto, VcondicionPago_id, Vobs, Vusuario, VusuarioAutoriza, VPDC, VfechaAutorizacion, VmotivoFinaliz_Anulacion, VfechaFinaliz_Anulacion, VpedidoDiario, Vproveed_Original, VsectorEntrega_id, Verr}
    '            If _transaction Is Nothing Then
    '                result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If
    '            If result Then
    '                Item.CODEMP = vPKcodEmp.Value
    '                Item.ORDENCOMPRA_ID = vPKordenCompra_id.Value
    '                Return Item
    '            Else
    '                Return Nothing
    '            End If
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        End Try
    '    End Function


    '    ''' <summary>
    '    ''' Retorna una consulta.
    '    ''' </summary>
    '    ''' <remarks> </remarks>
    '    Public Overridable Function Items() As List(Of Entities.Tables.COMORDENCOMPRA)
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Try
    '            _commandText = "_comOrdenCompra_ITEMS"
    '            _itemList.Clear()
    '            _sql = GetSQL()

    '            Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {Vsql, Verr}

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '            While dr.Read
    '                Dim NewItem As New Entities.Tables.COMORDENCOMPRA
    '                NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
    '                NewItem.ORDENCOMPRA_ID = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
    '                NewItem.CODEMPREQUERIMIENTO = IIf(Convert.IsDBNull(dr("codEmpRequerimiento")), Nothing, dr("codEmpRequerimiento"))
    '                NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
    '                NewItem.FECHA = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
    '                NewItem.PROVEED_ID = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
    '                NewItem.SECTORREQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
    '                NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
    '                NewItem.TIPOOC_ID = IIf(Convert.IsDBNull(dr("tipoOc_id")), Nothing, dr("tipoOc_id"))
    '                NewItem.MODIFICACOSTO = IIf(Convert.IsDBNull(dr("modificaCosto")), Nothing, dr("modificaCosto"))
    '                NewItem.CONDICIONPAGO_ID = IIf(Convert.IsDBNull(dr("condicionPago_id")), Nothing, dr("condicionPago_id"))
    '                NewItem.OBS = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
    '                NewItem.USUARIO = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
    '                NewItem.USUARIOAUTORIZA = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
    '                NewItem.PDC = IIf(Convert.IsDBNull(dr("PDC")), Nothing, dr("PDC"))
    '                NewItem.FECHAAUTORIZACION = IIf(Convert.IsDBNull(dr("fechaAutorizacion")), Nothing, dr("fechaAutorizacion"))
    '                NewItem.MOTIVOFINALIZ_ANULACION = IIf(Convert.IsDBNull(dr("motivoFinaliz_Anulacion")), Nothing, dr("motivoFinaliz_Anulacion"))
    '                NewItem.FECHAFINALIZ_ANULACION = IIf(Convert.IsDBNull(dr("fechaFinaliz_Anulacion")), Nothing, dr("fechaFinaliz_Anulacion"))
    '                NewItem.PEDIDODIARIO = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
    '                NewItem.PROVEED_ORIGINAL = IIf(Convert.IsDBNull(dr("proveed_Original")), Nothing, dr("proveed_Original"))
    '                NewItem.SECTORENTREGA_ID = IIf(Convert.IsDBNull(dr("sectorEntrega_id")), Nothing, dr("sectorEntrega_id"))
    '                _itemList.Add(NewItem)
    '            End While
    '            Return _itemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    Public Overridable Function AggregateItems() As ArrayList
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Try

    '            _commandText = "_AGGREGATE_ITEMS"
    '            _sql = GetSQL()
    '            Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
    '            Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRA")
    '            Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If
    '            While dr.Read
    '                Dim _rowsItemList As New ArrayList
    '                For count As Int32 = 0 To dr.FieldCount - 1
    '                    _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

    '                Next
    '                _aggregateItemList.Add(_rowsItemList)

    '            End While
    '            Return _aggregateItemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Elimina registros de la base de datos.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Delete() As Boolean

    '        Try

    '            _commandText = "_DELETE_ITEMS"
    '            _sql = GetSQL()
    '            Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRA")
    '            Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {VTable, Vsql, Verr}

    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        Finally
    '            _sqlErr = Nothing
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Elimina una instancia de tipo ITEM de la base.
    '    ''' </summary>
    '    ''' <param name="Item"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Remove(ByVal Item As Entities.Tables.COMORDENCOMPRA) As Boolean

    '        Try
    '            _commandText = "_comOrdenCompra_REMOVE"
    '            Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
    '            Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)

    '            Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VSqlErr}
    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
    '    ''' </summary>
    '    ''' <param name="Truncate"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

    '        Try
    '            _commandText = "_comOrdenCompra_CLEAR"
    '            Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

    '            Dim params() As SqlParameter = {VTRUNCATE, Verr}
    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        End Try
    '    End Function


    '    ''' <summary>
    '    ''' Actualiza una instancia de tipo ITEM en la base.
    '    ''' </summary>
    '    ''' <param name="Item"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Update(ByVal Item As Entities.Tables.COMORDENCOMPRA) As Boolean

    '        Try
    '            _commandText = "_comOrdenCompra_UPDATE"

    '            Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
    '            Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
    '            Dim VcodEmpRequerimiento As New SqlParameter("@codEmpRequerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPREQUERIMIENTO)
    '            Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
    '            Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
    '            Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
    '            Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
    '            Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
    '            Dim VtipoOc_id As New SqlParameter("@tipoOc_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOOC_ID)
    '            Dim VmodificaCosto As New SqlParameter("@modificaCosto", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MODIFICACOSTO)
    '            Dim VcondicionPago_id As New SqlParameter("@condicionPago_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONDICIONPAGO_ID)
    '            Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
    '            Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
    '            Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
    '            Dim VPDC As New SqlParameter("@PDC", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PDC)
    '            Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
    '            Dim VmotivoFinaliz_Anulacion As New SqlParameter("@motivoFinaliz_Anulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOFINALIZ_ANULACION)
    '            Dim VfechaFinaliz_Anulacion As New SqlParameter("@fechaFinaliz_Anulacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAFINALIZ_ANULACION = Date.MinValue, Nothing, Item.FECHAFINALIZ_ANULACION))
    '            Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
    '            Dim Vproveed_Original As New SqlParameter("@proveed_Original", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ORIGINAL)
    '            Dim VsectorEntrega_id As New SqlParameter("@sectorEntrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORENTREGA_ID)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

    '            Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VcodEmpRequerimiento, Vrequerimiento_id, Vfecha, Vproveed_id, VsectorRequerimiento_id, Vestado_id, VtipoOc_id, VmodificaCosto, VcondicionPago_id, Vobs, Vusuario, VusuarioAutoriza, VPDC, VfechaAutorizacion, VmotivoFinaliz_Anulacion, VfechaFinaliz_Anulacion, VpedidoDiario, Vproveed_Original, VsectorEntrega_id, Verr}
    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        End Try
    '    End Function


    '    ''' <summary>
    '    ''' Inicia una Transaccion.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
    '        Try
    '            If _connection Is Nothing Then
    '                _connection = New SqlConnection(_connectionstring)
    '                _connection.Open()
    '                _transaction = _connection.BeginTransaction()
    '                Return _transaction
    '            Else
    '                RaiseEvent OnError(New Exception("Transaction already opened"))
    '                Return Nothing
    '            End If
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        End Try
    '    End Function
    '    ''' <summary>
    '    ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
    '    ''' </summary>
    '    ''' <param name="Commit"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
    '        Try
    '            If _connection Is Nothing Then
    '                RaiseEvent OnError(New Exception("Transaction not opened yet"))
    '            Else
    '                If Commit Then
    '                    _transaction.Commit()
    '                Else
    '                    _transaction.Rollback()
    '                End If
    '                _connection.Close()
    '                _connection = Nothing
    '                _transaction = Nothing
    '                Return True
    '            End If
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '        Return True
    '    End Function

    '    ''' <summary>
    '    ''' Conserva el resultado de la última consulta.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMORDENCOMPRA)
    '        Get
    '            Return _itemList
    '        End Get

    '    End Property

    '    Private Function GetSQL() As String
    '        Try
    '            Dim _buff As String = String.Empty
    '            _buff &= Me.WhereParameter.GetSQL()
    '            _buff &= Me.OrderByParameter.GetSQL()
    '            Return _buff
    '        Catch ex As Exception
    '            Return Nothing
    '        End Try
    '    End Function
    '    Private Function GetAggregateSQL() As String
    '        Try
    '            Dim _buff As String = Nothing

    '            _buff &= Me.AggregateParameter.GetSQL()

    '            Return _buff
    '        Catch ex As Exception
    '            Return Nothing
    '        End Try
    '    End Function
    '    Public Property WhereParameter() As WhereParameterObject
    '        Get
    '            Return _whereParameterObject

    '        End Get
    '        Set(ByVal value As WhereParameterObject)
    '            _whereParameterObject = value
    '        End Set
    '    End Property
    '    Public Property OrderByParameter() As OrderByParameterObject
    '        Get
    '            Return _orderByParameterObject
    '        End Get
    '        Set(ByVal value As OrderByParameterObject)
    '            _orderByParameterObject = value
    '        End Set
    '    End Property
    '    Public Property AggregateParameter() As AggregateParameterObject
    '        Get
    '            Return _aggregateParameterObject
    '        End Get
    '        Set(ByVal value As AggregateParameterObject)
    '            _aggregateParameterObject = value
    '        End Set
    '    End Property

    '    Public Class OrderByParameterObject
    '        Inherits OrderByParameter

    '        Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
    '            Try
    '                _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

    '            Catch ex As Exception

    '            End Try

    '        End Sub
    '    End Class

    '    Public Class WhereParameterObject
    '        Inherits WhereParameter

    '        Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
    '            Try
    '                Select Case Operand
    '                    Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
    '                        Dim _buff As String = Nothing
    '                        For Each obj As Object In Value
    '                            _buff &= obj.ToString & ","
    '                        Next
    '                        _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
    '                    Case Else
    '                        If Value.Length > 1 Then
    '                            Throw New Exception("Demasiados argumentos para la consulta.")
    '                        Else
    '                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
    '                        End If
    '                End Select


    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Sub
    '        Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

    '            Try
    '                Select Case Operand
    '                    Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
    '                        Dim _buff As String = Nothing
    '                        For Each obj As Object In Value
    '                            _buff &= obj.ToString & ","
    '                        Next
    '                        MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
    '                    Case Else
    '                        If Value.Length > 1 Then
    '                            Throw New Exception("Demasiados argumentos para la consulta.")
    '                        Else
    '                            _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
    '                        End If
    '                End Select


    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Sub
    '        Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
    '            Try
    '                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Sub
    '        Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

    '            If _whereParams.Count Then
    '                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
    '            Else
    '                Throw New Exception("Error de sobrecarga")
    '            End If

    '        End Sub
    '        Private Function FormatValue(ByVal Value As Object) As String
    '            Try
    '                Select Case Value.GetType.FullName
    '                    Case "System.String", "System.DateTime"
    '                        Return "'" & Value & "'"
    '                    Case Else
    '                        Return Value
    '                End Select
    '            Catch ex As Exception
    '                Throw New Exception("Error Convirtiendo valor")
    '            End Try
    '        End Function
    '    End Class


    '    Public Class AggregateParameterObject
    '        Inherits AggregateParameter

    '        Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
    '            Try
    '                _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

    '            Catch ex As Exception

    '            End Try

    '        End Sub
    '    End Class
    '    ''' <summary>
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Public Class ITEM
    '        Inherits Entities.Tables.COMORDENCOMPRA
    '    End Class 'ITEM

    '    ''' Clase         : ColumnNames 
    '    ''' Descripción   : Nombres de Columnas de la tabla COMORDENCOMPRA
    '    ''' Fecha de Creación  : miércoles, 9 de noviembre de 2016
    '    ''' <remarks> Representa los Nombres de Columnas de la tabla COMORDENCOMPRA. </remarks>
    '    Public Class ColumnNames
    '        Public Const CODEMP As String = "CODEMP"
    '        Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
    '        Public Const CODEMPREQUERIMIENTO As String = "CODEMPREQUERIMIENTO"
    '        Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
    '        Public Const FECHA As String = "FECHA"
    '        Public Const PROVEED_ID As String = "PROVEED_ID"
    '        Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
    '        Public Const ESTADO_ID As String = "ESTADO_ID"
    '        Public Const TIPOOC_ID As String = "TIPOOC_ID"
    '        Public Const MODIFICACOSTO As String = "MODIFICACOSTO"
    '        Public Const CONDICIONPAGO_ID As String = "CONDICIONPAGO_ID"
    '        Public Const OBS As String = "OBS"
    '        Public Const USUARIO As String = "USUARIO"
    '        Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
    '        Public Const PDC As String = "PDC"
    '        Public Const FECHAAUTORIZACION As String = "FECHAAUTORIZACION"
    '        Public Const MOTIVOFINALIZ_ANULACION As String = "MOTIVOFINALIZ_ANULACION"
    '        Public Const FECHAFINALIZ_ANULACION As String = "FECHAFINALIZ_ANULACION"
    '        Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
    '        Public Const PROVEED_ORIGINAL As String = "PROVEED_ORIGINAL"
    '        Public Const SECTORENTREGA_ID As String = "SECTORENTREGA_ID"
    '    End Class ' ColumnNames
    'End Class ' COMORDENCOMPRA

    Public Class COMORDENCOMPRA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            ordenCompra_id
            codEmpRequerimiento
            requerimiento_id
            fecha
            proveed_id
            sectorRequerimiento_id
            estado_id
            tipoOc_id
            modificaCosto
            condicionPago_id
            obs
            usuario
            usuarioAutoriza
            PDC
            fechaAutorizacion
            motivoFinaliz_Anulacion
            fechaFinaliz_Anulacion
            pedidoDiario
            proveed_Original
            sectorEntrega_id
            tipoProrrateo
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMORDENCOMPRA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMORDENCOMPRA) As Entities.Tables.COMORDENCOMPRA
            Dim result As Boolean

            Try
                _commandText = "_COMORDENCOMPRA_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VcodEmpRequerimiento As New SqlParameter("@codEmpRequerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPREQUERIMIENTO)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VtipoOc_id As New SqlParameter("@tipoOc_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOOC_ID)
                Dim VmodificaCosto As New SqlParameter("@modificaCosto", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MODIFICACOSTO)
                Dim VcondicionPago_id As New SqlParameter("@condicionPago_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONDICIONPAGO_ID)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
                Dim VPDC As New SqlParameter("@PDC", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PDC)
                Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
                Dim VmotivoFinaliz_Anulacion As New SqlParameter("@motivoFinaliz_Anulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOFINALIZ_ANULACION)
                Dim VfechaFinaliz_Anulacion As New SqlParameter("@fechaFinaliz_Anulacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAFINALIZ_ANULACION = Date.MinValue, Nothing, Item.FECHAFINALIZ_ANULACION))
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
                Dim Vproveed_Original As New SqlParameter("@proveed_Original", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ORIGINAL)
                Dim VsectorEntrega_id As New SqlParameter("@sectorEntrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORENTREGA_ID)
                Dim VtipoProrrateo As New SqlParameter("@tipoProrrateo", SqlDbType.SmallInt, 5, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOPRORRATEO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKordenCompra_id, VcodEmpRequerimiento, Vrequerimiento_id, Vfecha, Vproveed_id, VsectorRequerimiento_id, Vestado_id, VtipoOc_id, VmodificaCosto, VcondicionPago_id, Vobs, Vusuario, VusuarioAutoriza, VPDC, VfechaAutorizacion, VmotivoFinaliz_Anulacion, VfechaFinaliz_Anulacion, VpedidoDiario, Vproveed_Original, VsectorEntrega_id, VtipoProrrateo, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.ORDENCOMPRA_ID = vPKordenCompra_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMORDENCOMPRA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comOrdenCompra_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMORDENCOMPRA
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ORDENCOMPRA_ID = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.CODEMPREQUERIMIENTO = IIf(Convert.IsDBNull(dr("codEmpRequerimiento")), Nothing, dr("codEmpRequerimiento"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.FECHA = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.PROVEED_ID = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.SECTORREQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.TIPOOC_ID = IIf(Convert.IsDBNull(dr("tipoOc_id")), Nothing, dr("tipoOc_id"))
                    NewItem.MODIFICACOSTO = IIf(Convert.IsDBNull(dr("modificaCosto")), Nothing, dr("modificaCosto"))
                    NewItem.CONDICIONPAGO_ID = IIf(Convert.IsDBNull(dr("condicionPago_id")), Nothing, dr("condicionPago_id"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.USUARIO = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.USUARIOAUTORIZA = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.PDC = IIf(Convert.IsDBNull(dr("PDC")), Nothing, dr("PDC"))
                    NewItem.FECHAAUTORIZACION = IIf(Convert.IsDBNull(dr("fechaAutorizacion")), Nothing, dr("fechaAutorizacion"))
                    NewItem.MOTIVOFINALIZ_ANULACION = IIf(Convert.IsDBNull(dr("motivoFinaliz_Anulacion")), Nothing, dr("motivoFinaliz_Anulacion"))
                    NewItem.FECHAFINALIZ_ANULACION = IIf(Convert.IsDBNull(dr("fechaFinaliz_Anulacion")), Nothing, dr("fechaFinaliz_Anulacion"))
                    NewItem.PEDIDODIARIO = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    NewItem.PROVEED_ORIGINAL = IIf(Convert.IsDBNull(dr("proveed_Original")), Nothing, dr("proveed_Original"))
                    NewItem.SECTORENTREGA_ID = IIf(Convert.IsDBNull(dr("sectorEntrega_id")), Nothing, dr("sectorEntrega_id"))
                    NewItem.TIPOPRORRATEO = IIf(Convert.IsDBNull(dr("tipoProrrateo")), Nothing, dr("tipoProrrateo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMORDENCOMPRA) As Boolean

            Try
                _commandText = "_comOrdenCompra_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comOrdenCompra_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMORDENCOMPRA) As Boolean

            Try
                _commandText = "_comOrdenCompra_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VcodEmpRequerimiento As New SqlParameter("@codEmpRequerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPREQUERIMIENTO)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VtipoOc_id As New SqlParameter("@tipoOc_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOOC_ID)
                Dim VmodificaCosto As New SqlParameter("@modificaCosto", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MODIFICACOSTO)
                Dim VcondicionPago_id As New SqlParameter("@condicionPago_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONDICIONPAGO_ID)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
                Dim VPDC As New SqlParameter("@PDC", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PDC)
                Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
                Dim VmotivoFinaliz_Anulacion As New SqlParameter("@motivoFinaliz_Anulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOFINALIZ_ANULACION)
                Dim VfechaFinaliz_Anulacion As New SqlParameter("@fechaFinaliz_Anulacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAFINALIZ_ANULACION = Date.MinValue, Nothing, Item.FECHAFINALIZ_ANULACION))
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
                Dim Vproveed_Original As New SqlParameter("@proveed_Original", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ORIGINAL)
                Dim VsectorEntrega_id As New SqlParameter("@sectorEntrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORENTREGA_ID)
                Dim VtipoProrrateo As New SqlParameter("@tipoProrrateo", SqlDbType.SmallInt, 5, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOPRORRATEO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VcodEmpRequerimiento, Vrequerimiento_id, Vfecha, Vproveed_id, VsectorRequerimiento_id, Vestado_id, VtipoOc_id, VmodificaCosto, VcondicionPago_id, Vobs, Vusuario, VusuarioAutoriza, VPDC, VfechaAutorizacion, VmotivoFinaliz_Anulacion, VfechaFinaliz_Anulacion, VpedidoDiario, Vproveed_Original, VsectorEntrega_id, VtipoProrrateo, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMORDENCOMPRA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMORDENCOMPRA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMORDENCOMPRA
        ''' Fecha de Creación  : miércoles, 7 de marzo de 2018
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMORDENCOMPRA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const CODEMPREQUERIMIENTO As String = "CODEMPREQUERIMIENTO"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const TIPOOC_ID As String = "TIPOOC_ID"
            Public Const MODIFICACOSTO As String = "MODIFICACOSTO"
            Public Const CONDICIONPAGO_ID As String = "CONDICIONPAGO_ID"
            Public Const OBS As String = "OBS"
            Public Const USUARIO As String = "USUARIO"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const PDC As String = "PDC"
            Public Const FECHAAUTORIZACION As String = "FECHAAUTORIZACION"
            Public Const MOTIVOFINALIZ_ANULACION As String = "MOTIVOFINALIZ_ANULACION"
            Public Const FECHAFINALIZ_ANULACION As String = "FECHAFINALIZ_ANULACION"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
            Public Const PROVEED_ORIGINAL As String = "PROVEED_ORIGINAL"
            Public Const SECTORENTREGA_ID As String = "SECTORENTREGA_ID"
            Public Const TIPOPRORRATEO As String = "TIPOPRORRATEO"
        End Class ' ColumnNames
    End Class ' COMORDENCOMPRA


    Public Class COMORDENCOMPRAITEM
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            ordenCompra_id
            nroItem
            articulo_id
            uniMed
            cantidad
            precio
            nivelAut_id
            fechaEntrega
            fechaEntrega1
            cantidad1
            embalaje
            marca
            codEmpRequerimiento
            Requerimiento_id
            cantidadOriginal
            precioOriginal

        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMORDENCOMPRAITEM)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMORDENCOMPRAITEM) As Entities.Tables.COMORDENCOMPRAITEM
            Dim result As Boolean

            Try
                _commandText = "_COMORDENCOMPRAITEM_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Vprecio As New SqlParameter("@precio", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRECIO)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID)
                Dim VfechaEntrega As New SqlParameter("@fechaEntrega", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA = Date.MinValue, Nothing, Item.FECHAENTREGA))
                Dim VfechaEntrega1 As New SqlParameter("@fechaEntrega1", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA1 = Date.MinValue, Nothing, Item.FECHAENTREGA1))
                Dim Vcantidad1 As New SqlParameter("@cantidad1", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD1)
                Dim Vembalaje As New SqlParameter("@embalaje", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMBALAJE)
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim VcodEmpRequerimiento As New SqlParameter("@codEmpRequerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPREQUERIMIENTO)
                Dim VRequerimiento_id As New SqlParameter("@Requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VcantidadOriginal As New SqlParameter("@cantidadOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDADORIGINAL)
                Dim VprecioOriginal As New SqlParameter("@precioOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRECIOORIGINAL)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKordenCompra_id, vPKnroItem, Varticulo_id, VuniMed, Vcantidad, Vprecio, VnivelAut_id, VfechaEntrega, VfechaEntrega1, Vcantidad1, Vembalaje, Vmarca, VcodEmpRequerimiento, VRequerimiento_id, VcantidadOriginal, VprecioOriginal, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.ORDENCOMPRA_ID = vPKordenCompra_id.Value
                    Item.NROITEM = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMORDENCOMPRAITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comOrdenCompraItem_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMORDENCOMPRAITEM
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ORDENCOMPRA_ID = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.PRECIO = IIf(Convert.IsDBNull(dr("precio")), Nothing, dr("precio"))
                    NewItem.NIVELAUT_ID = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.FECHAENTREGA = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.FECHAENTREGA1 = IIf(Convert.IsDBNull(dr("fechaEntrega1")), Nothing, dr("fechaEntrega1"))
                    NewItem.CANTIDAD1 = IIf(Convert.IsDBNull(dr("cantidad1")), Nothing, dr("cantidad1"))
                    NewItem.EMBALAJE = IIf(Convert.IsDBNull(dr("embalaje")), Nothing, dr("embalaje"))
                    NewItem.MARCA = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    NewItem.CODEMPREQUERIMIENTO = IIf(Convert.IsDBNull(dr("codEmpRequerimiento")), Nothing, dr("codEmpRequerimiento"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("Requerimiento_id")), Nothing, dr("Requerimiento_id"))
                    NewItem.CANTIDADORIGINAL = IIf(Convert.IsDBNull(dr("cantidadOriginal")), Nothing, dr("cantidadOriginal"))
                    NewItem.PRECIOORIGINAL = IIf(Convert.IsDBNull(dr("precioOriginal")), Nothing, dr("precioOriginal"))

                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRAITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRAITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMORDENCOMPRAITEM) As Boolean

            Try
                _commandText = "_comOrdenCompraItem_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comOrdenCompraItem_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMORDENCOMPRAITEM) As Boolean

            Try
                _commandText = "_comOrdenCompraItem_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Vprecio As New SqlParameter("@precio", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRECIO)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID)
                Dim VfechaEntrega As New SqlParameter("@fechaEntrega", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA = Date.MinValue, Nothing, Item.FECHAENTREGA))
                Dim VfechaEntrega1 As New SqlParameter("@fechaEntrega1", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA1 = Date.MinValue, Nothing, Item.FECHAENTREGA1))
                Dim Vcantidad1 As New SqlParameter("@cantidad1", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD1)
                Dim Vembalaje As New SqlParameter("@embalaje", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMBALAJE)
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim VcodEmpRequerimiento As New SqlParameter("@codEmpRequerimiento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPREQUERIMIENTO)
                Dim VRequerimiento_id As New SqlParameter("@Requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VcantidadOriginal As New SqlParameter("@cantidadOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDADORIGINAL)
                Dim VprecioOriginal As New SqlParameter("@precioOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRECIOORIGINAL)

                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VnroItem, Varticulo_id, VuniMed, Vcantidad, Vprecio, VnivelAut_id, VfechaEntrega, VfechaEntrega1, Vcantidad1, Vembalaje, Vmarca, VcodEmpRequerimiento, VRequerimiento_id, VcantidadOriginal, VprecioOriginal, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMORDENCOMPRAITEM)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMORDENCOMPRAITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMORDENCOMPRAITEM
        ''' Fecha de Creación  : lunes, 3 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMORDENCOMPRAITEM. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const PRECIO As String = "PRECIO"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const FECHAENTREGA1 As String = "FECHAENTREGA1"
            Public Const CANTIDAD1 As String = "CANTIDAD1"
            Public Const EMBALAJE As String = "EMBALAJE"
            Public Const MARCA As String = "MARCA"
            Public Const CODEMPREQUERIMIENTO As String = "CODEMPREQUERIMIENTO"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const CANTIDADORIGINAL As String = "CANTIDADORIGINAL"
            Public Const PRECIOORIGINAL As String = "PRECIOORIGINAL"

        End Class ' ColumnNames
    End Class ' COMORDENCOMPRAITEM

    Public Class COMREQUERIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            requerimiento_id
            fecha
            sectorRequerimiento_id
            proveed_id
            estado_id
            obs
            usuario
            usuarioAutoriza
            fechaAutorizacion
            motivoAnulacion
            pedidoDiario
            sectorEntrega_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMREQUERIMIENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMREQUERIMIENTO) As Entities.Tables.COMREQUERIMIENTO
            Dim result As Boolean

            Try
                _commandText = "_COMREQUERIMIENTO_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
                Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
                Dim VmotivoAnulacion As New SqlParameter("@motivoAnulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOANULACION)
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
                Dim VsectorEntrega_id As New SqlParameter("@sectorEntrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORENTREGA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKrequerimiento_id, Vfecha, VsectorRequerimiento_id, Vproveed_id, Vestado_id, Vobs, Vusuario, VusuarioAutoriza, VfechaAutorizacion, VmotivoAnulacion, VpedidoDiario, VsectorEntrega_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.REQUERIMIENTO_ID = vPKrequerimiento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMREQUERIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comRequerimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMREQUERIMIENTO
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.FECHA = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.SECTORREQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.PROVEED_ID = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.USUARIO = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.USUARIOAUTORIZA = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.FECHAAUTORIZACION = IIf(Convert.IsDBNull(dr("fechaAutorizacion")), Nothing, dr("fechaAutorizacion"))
                    NewItem.MOTIVOANULACION = IIf(Convert.IsDBNull(dr("motivoAnulacion")), Nothing, dr("motivoAnulacion"))
                    NewItem.PEDIDODIARIO = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    NewItem.SECTORENTREGA_ID = IIf(Convert.IsDBNull(dr("sectorEntrega_id")), Nothing, dr("sectorEntrega_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMREQUERIMIENTO) As Boolean

            Try
                _commandText = "_comRequerimiento_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comRequerimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMREQUERIMIENTO) As Boolean

            Try
                _commandText = "_comRequerimiento_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
                Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
                Dim VmotivoAnulacion As New SqlParameter("@motivoAnulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOANULACION)
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
                Dim VsectorEntrega_id As New SqlParameter("@sectorEntrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORENTREGA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, Vfecha, VsectorRequerimiento_id, Vproveed_id, Vestado_id, Vobs, Vusuario, VusuarioAutoriza, VfechaAutorizacion, VmotivoAnulacion, VpedidoDiario, VsectorEntrega_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMREQUERIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMREQUERIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMREQUERIMIENTO
        ''' Fecha de Creación  : martes, 18 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMREQUERIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const OBS As String = "OBS"
            Public Const USUARIO As String = "USUARIO"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const FECHAAUTORIZACION As String = "FECHAAUTORIZACION"
            Public Const MOTIVOANULACION As String = "MOTIVOANULACION"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
            Public Const SECTORENTREGA_ID As String = "SECTORENTREGA_ID"
        End Class ' ColumnNames
    End Class ' COMREQUERIMIENTO

    Public Class COMREQUERIMIENTOITEM
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            requerimiento_id
            nroItem
            articulo_id
            uniMed
            cantidad
            nivelAut_id
            fechaEntrega
            marca
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMREQUERIMIENTOITEM)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMREQUERIMIENTOITEM) As Entities.Tables.COMREQUERIMIENTOITEM
            Dim result As Boolean

            Try
                _commandText = "_COMREQUERIMIENTOITEM_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID)
                Dim VfechaEntrega As New SqlParameter("@fechaEntrega", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA = Date.MinValue, Nothing, Item.FECHAENTREGA))
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKrequerimiento_id, vPKnroItem, Varticulo_id, VuniMed, Vcantidad, VnivelAut_id, VfechaEntrega, Vmarca, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.REQUERIMIENTO_ID = vPKrequerimiento_id.Value
                    Item.NROITEM = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMREQUERIMIENTOITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comRequerimientoItem_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMREQUERIMIENTOITEM
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.NIVELAUT_ID = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.FECHAENTREGA = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.MARCA = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMREQUERIMIENTOITEM) As Boolean

            Try
                _commandText = "_comRequerimientoItem_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comRequerimientoItem_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMREQUERIMIENTOITEM) As Boolean

            Try
                _commandText = "_comRequerimientoItem_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID)
                Dim VfechaEntrega As New SqlParameter("@fechaEntrega", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA = Date.MinValue, Nothing, Item.FECHAENTREGA))
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnroItem, Varticulo_id, VuniMed, Vcantidad, VnivelAut_id, VfechaEntrega, Vmarca, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMREQUERIMIENTOITEM)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMREQUERIMIENTOITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMREQUERIMIENTOITEM
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMREQUERIMIENTOITEM. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const MARCA As String = "MARCA"
        End Class ' ColumnNames
    End Class ' COMREQUERIMIENTOITEM

    Public Class COMREQUERIMIENTOORDENCOMPRA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            requerimiento_id
            nroItem
            codEmpOC
            ordenCompra_id
            nroItemOC
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMREQUERIMIENTOORDENCOMPRA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMREQUERIMIENTOORDENCOMPRA) As Entities.Tables.COMREQUERIMIENTOORDENCOMPRA
            Dim result As Boolean

            Try
                _commandText = "_COMREQUERIMIENTOORDENCOMPRA_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim vPKcodEmpOC As New SqlParameter("@codEmpOC", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPOC)
                Dim vPKordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim vPKnroItemOC As New SqlParameter("@nroItemOC", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEMOC)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKrequerimiento_id, vPKnroItem, vPKcodEmpOC, vPKordenCompra_id, vPKnroItemOC, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.REQUERIMIENTO_ID = vPKrequerimiento_id.Value
                    Item.NROITEM = vPKnroItem.Value
                    Item.CODEMPOC = vPKcodEmpOC.Value
                    Item.ORDENCOMPRA_ID = vPKordenCompra_id.Value
                    Item.NROITEMOC = vPKnroItemOC.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMREQUERIMIENTOORDENCOMPRA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comRequerimientoOrdenCompra_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMREQUERIMIENTOORDENCOMPRA
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.CODEMPOC = IIf(Convert.IsDBNull(dr("codEmpOC")), Nothing, dr("codEmpOC"))
                    NewItem.ORDENCOMPRA_ID = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.NROITEMOC = IIf(Convert.IsDBNull(dr("nroItemOC")), Nothing, dr("nroItemOC"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOORDENCOMPRA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOORDENCOMPRA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMREQUERIMIENTOORDENCOMPRA) As Boolean

            Try
                _commandText = "_comRequerimientoOrdenCompra_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VcodEmpOC As New SqlParameter("@codEmpOC", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPOC)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VnroItemOC As New SqlParameter("@nroItemOC", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEMOC)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnroItem, VcodEmpOC, VordenCompra_id, VnroItemOC, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comRequerimientoOrdenCompra_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMREQUERIMIENTOORDENCOMPRA) As Boolean

            Try
                _commandText = "_comRequerimientoOrdenCompra_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VcodEmpOC As New SqlParameter("@codEmpOC", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPOC)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VnroItemOC As New SqlParameter("@nroItemOC", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEMOC)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnroItem, VcodEmpOC, VordenCompra_id, VnroItemOC, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMREQUERIMIENTOORDENCOMPRA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMREQUERIMIENTOORDENCOMPRA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMREQUERIMIENTOORDENCOMPRA
        ''' Fecha de Creación  : jueves, 08 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMREQUERIMIENTOORDENCOMPRA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const CODEMPOC As String = "CODEMPOC"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const NROITEMOC As String = "NROITEMOC"
        End Class ' ColumnNames
    End Class ' COMREQUERIMIENTOORDENCOMPRA

    Public Class COMSECTORREQUERIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            sectorRequerimiento_id
            Descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMSECTORREQUERIMIENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMSECTORREQUERIMIENTO) As Entities.Tables.COMSECTORREQUERIMIENTO
            Dim result As Boolean

            Try
                _commandText = "_COMSECTORREQUERIMIENTO_ADD"
                Dim vPKsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKsectorRequerimiento_id, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.SECTORREQUERIMIENTO_ID = vPKsectorRequerimiento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMSECTORREQUERIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comSectorRequerimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMSECTORREQUERIMIENTO
                    NewItem.SECTORREQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMSECTORREQUERIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMSECTORREQUERIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMSECTORREQUERIMIENTO) As Boolean

            Try
                _commandText = "_comSectorRequerimiento_REMOVE"
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VsectorRequerimiento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comSectorRequerimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMSECTORREQUERIMIENTO) As Boolean

            Try
                _commandText = "_comSectorRequerimiento_UPDATE"

                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VsectorRequerimiento_id, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMSECTORREQUERIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMSECTORREQUERIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMSECTORREQUERIMIENTO
        ''' Fecha de Creación  : viernes, 04 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMSECTORREQUERIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' COMSECTORREQUERIMIENTO


    Public Class COMTIPOOC
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            tipoOC_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMTIPOOC)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMTIPOOC) As Entities.Tables.COMTIPOOC
            Dim result As Boolean

            Try
                _commandText = "_COMTIPOOC_ADD"
                Dim vPKtipoOC_id As New SqlParameter("@tipoOC_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKtipoOC_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.TIPOOC_ID = vPKtipoOC_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMTIPOOC)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comTipoOC_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMTIPOOC
                    NewItem.TIPOOC_ID = IIf(Convert.IsDBNull(dr("tipoOC_id")), Nothing, dr("tipoOC_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMTIPOOC")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMTIPOOC")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMTIPOOC) As Boolean

            Try
                _commandText = "_comTipoOC_REMOVE"
                Dim VtipoOC_id As New SqlParameter("@tipoOC_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOOC_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VtipoOC_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comTipoOC_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMTIPOOC) As Boolean

            Try
                _commandText = "_comTipoOC_UPDATE"

                Dim VtipoOC_id As New SqlParameter("@tipoOC_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOOC_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VtipoOC_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMTIPOOC)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMTIPOOC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMTIPOOC
        ''' Fecha de Creación  : miércoles, 02 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMTIPOOC. </remarks>
        Public Class ColumnNames
            Public Const TIPOOC_ID As String = "TIPOOC_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' COMTIPOOC


    'Public Class STKARTICULOS
    '    Public Enum ExceptionHandlingEnum
    '        ThrowExceptionHandling
    '        RaiseExceptionHandling
    '    End Enum
    '    Public Enum ColumnEnum
    '        codEmp
    '        articulo_id
    '        Descripcion
    '        toleranciaIngStock
    '        stockMinimo
    '        stockMaximo
    '        vaAStock
    '        uniMedPpal
    '        uniMedSec
    '        factorConversion
    '        codigoFacturacion
    '        factorCorreccion
    '    End Enum

    '    Private _commandText As String = Nothing
    '    Private _sqlErr As String = Nothing
    '    Private _sql As String = Nothing
    '    Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
    '    Private _connectionstring As String = Nothing
    '    Private _commandTimeout As Int32 = 30
    '    Protected _connection As System.Data.SqlClient.SqlConnection
    '    Private _transaction As Data.SqlClient.SqlTransaction
    '    Protected _whereParameterObject As New WhereParameterObject
    '    Protected _orderByParameterObject As New OrderByParameterObject
    '    Protected _aggregateParameterObject As New AggregateParameterObject
    '    Protected _itemList As New List(Of Entities.Tables.STKARTICULOS)
    '    Protected _aggregateItemList As New ArrayList

    '    Public Property Transaction() As Data.SqlClient.SqlTransaction
    '        Get
    '            Return _transaction
    '        End Get
    '        Set(ByVal value As Data.SqlClient.SqlTransaction)
    '            _transaction = value
    '        End Set
    '    End Property
    '    Public Sub New()
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub

    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            _transaction = Transaction
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    Public Event OnError(ByVal ex As Exception)
    '    Public Property ExceptionHandling() As ExceptionHandlingEnum
    '        Get
    '            Return _exceptionHandling
    '        End Get
    '        Set(ByVal value As ExceptionHandlingEnum)
    '            _exceptionHandling = value
    '        End Set
    '    End Property


    '    ''' <summary>
    '    ''' Constructor para manipular la Transaction por Reflexión
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Sub New(ByVal TransactionOwner As Object)
    '        MyBase.New()
    '        Try
    '            _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
    '            Try
    '                Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
    '            Catch ex As Exception
    '                RaiseEvent OnError(New Exception("Error al asignar transacción"))
    '            End Try
    '        Catch ex As Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '    End Sub
    '    ''' <summary>
    '    ''' Agrega un Registro a la base.
    '    ''' </summary>
    '    ''' <param name="ITEM"></param>
    '    ''' <remarks> </remarks>
    '    Public Overridable Function Add(ByVal Item As Entities.Tables.STKARTICULOS) As Entities.Tables.STKARTICULOS
    '        Dim result As Boolean

    '        Try
    '            _commandText = "_STKARTICULOS_ADD"
    '            Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
    '            Dim vPKarticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
    '            Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
    '            Dim VtoleranciaIngStock As New SqlParameter("@toleranciaIngStock", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TOLERANCIAINGSTOCK)
    '            Dim VstockMinimo As New SqlParameter("@stockMinimo", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.STOCKMINIMO)
    '            Dim VstockMaximo As New SqlParameter("@stockMaximo", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.STOCKMAXIMO)
    '            Dim VvaAStock As New SqlParameter("@vaAStock", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VAASTOCK)
    '            Dim VuniMedPpal As New SqlParameter("@uniMedPpal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMEDPPAL)
    '            Dim VuniMedSec As New SqlParameter("@uniMedSec", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMEDSEC)
    '            Dim VfactorConversion As New SqlParameter("@factorConversion", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FACTORCONVERSION)
    '            Dim VcodigoFacturacion As New SqlParameter("@codigoFacturacion", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODIGOFACTURACION)
    '            Dim VfactorCorreccion As New SqlParameter("@factorCorreccion", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FACTORCORRECCION)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

    '            Dim params() As SqlParameter = {vPKcodEmp, vPKarticulo_id, VDescripcion, VtoleranciaIngStock, VstockMinimo, VstockMaximo, VvaAStock, VuniMedPpal, VuniMedSec, VfactorConversion, VcodigoFacturacion, VfactorCorreccion, Verr}
    '            If _transaction Is Nothing Then
    '                result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If
    '            If result Then
    '                Item.CODEMP = vPKcodEmp.Value
    '                Item.ARTICULO_ID = vPKarticulo_id.Value
    '                Return Item
    '            Else
    '                Return Nothing
    '            End If
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        End Try
    '    End Function


    '    ''' <summary>
    '    ''' Retorna una consulta.
    '    ''' </summary>
    '    ''' <remarks> </remarks>
    '    Public Overridable Function Items() As List(Of Entities.Tables.STKARTICULOS)
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Try
    '            _commandText = "_stkArticulos_ITEMS"
    '            _itemList.Clear()
    '            _sql = GetSQL()

    '            Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {Vsql, Verr}

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '            While dr.Read
    '                Dim NewItem As New Entities.Tables.STKARTICULOS
    '                NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
    '                NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
    '                NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
    '                NewItem.TOLERANCIAINGSTOCK = IIf(Convert.IsDBNull(dr("toleranciaIngStock")), Nothing, dr("toleranciaIngStock"))
    '                NewItem.STOCKMINIMO = IIf(Convert.IsDBNull(dr("stockMinimo")), Nothing, dr("stockMinimo"))
    '                NewItem.STOCKMAXIMO = IIf(Convert.IsDBNull(dr("stockMaximo")), Nothing, dr("stockMaximo"))
    '                NewItem.VAASTOCK = IIf(Convert.IsDBNull(dr("vaAStock")), Nothing, dr("vaAStock"))
    '                NewItem.UNIMEDPPAL = IIf(Convert.IsDBNull(dr("uniMedPpal")), Nothing, dr("uniMedPpal"))
    '                NewItem.UNIMEDSEC = IIf(Convert.IsDBNull(dr("uniMedSec")), Nothing, dr("uniMedSec"))
    '                NewItem.FACTORCONVERSION = IIf(Convert.IsDBNull(dr("factorConversion")), Nothing, dr("factorConversion"))
    '                NewItem.CODIGOFACTURACION = IIf(Convert.IsDBNull(dr("codigoFacturacion")), Nothing, dr("codigoFacturacion"))
    '                NewItem.FACTORCORRECCION = IIf(Convert.IsDBNull(dr("factorCorreccion")), Nothing, dr("factorCorreccion"))
    '                _itemList.Add(NewItem)
    '            End While
    '            Return _itemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    Public Overridable Function AggregateItems() As ArrayList
    '        Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
    '        Try

    '            _commandText = "_AGGREGATE_ITEMS"
    '            _sql = GetSQL()
    '            Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
    '            Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKARTICULOS")
    '            Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

    '            If _transaction Is Nothing Then
    '                dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If
    '            While dr.Read
    '                Dim _rowsItemList As New ArrayList
    '                For count As Int32 = 0 To dr.FieldCount - 1
    '                    _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

    '                Next
    '                _aggregateItemList.Add(_rowsItemList)

    '            End While
    '            Return _aggregateItemList
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        Finally
    '            _sqlErr = Nothing
    '            If dr IsNot Nothing Then dr.Close()
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Elimina registros de la base de datos.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Delete() As Boolean

    '        Try

    '            _commandText = "_DELETE_ITEMS"
    '            _sql = GetSQL()
    '            Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKARTICULOS")
    '            Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {VTable, Vsql, Verr}

    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        Finally
    '            _sqlErr = Nothing
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Elimina una instancia de tipo ITEM de la base.
    '    ''' </summary>
    '    ''' <param name="Item"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Remove(ByVal Item As Entities.Tables.STKARTICULOS) As Boolean

    '        Try
    '            _commandText = "_stkArticulos_REMOVE"
    '            Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
    '            Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)

    '            Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
    '            Dim params() As SqlParameter = {VcodEmp, Varticulo_id, VSqlErr}
    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        End Try
    '    End Function

    '    ''' <summary>
    '    ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
    '    ''' </summary>
    '    ''' <param name="Truncate"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

    '        Try
    '            _commandText = "_stkArticulos_CLEAR"
    '            Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

    '            Dim params() As SqlParameter = {VTRUNCATE, Verr}
    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        End Try
    '    End Function


    '    ''' <summary>
    '    ''' Actualiza una instancia de tipo ITEM en la base.
    '    ''' </summary>
    '    ''' <param name="Item"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function Update(ByVal Item As Entities.Tables.STKARTICULOS) As Boolean

    '        Try
    '            _commandText = "_stkArticulos_UPDATE"

    '            Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
    '            Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
    '            Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
    '            Dim VtoleranciaIngStock As New SqlParameter("@toleranciaIngStock", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TOLERANCIAINGSTOCK)
    '            Dim VstockMinimo As New SqlParameter("@stockMinimo", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.STOCKMINIMO)
    '            Dim VstockMaximo As New SqlParameter("@stockMaximo", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.STOCKMAXIMO)
    '            Dim VvaAStock As New SqlParameter("@vaAStock", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VAASTOCK)
    '            Dim VuniMedPpal As New SqlParameter("@uniMedPpal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMEDPPAL)
    '            Dim VuniMedSec As New SqlParameter("@uniMedSec", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMEDSEC)
    '            Dim VfactorConversion As New SqlParameter("@factorConversion", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FACTORCONVERSION)
    '            Dim VcodigoFacturacion As New SqlParameter("@codigoFacturacion", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODIGOFACTURACION)
    '            Dim VfactorCorreccion As New SqlParameter("@factorCorreccion", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FACTORCORRECCION)
    '            Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

    '            Dim params() As SqlParameter = {VcodEmp, Varticulo_id, VDescripcion, VtoleranciaIngStock, VstockMinimo, VstockMaximo, VvaAStock, VuniMedPpal, VuniMedSec, VfactorConversion, VcodigoFacturacion, VfactorCorreccion, Verr}
    '            If _transaction Is Nothing Then
    '                Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
    '            Else
    '                Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
    '            End If

    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return False
    '        End Try
    '    End Function


    '    ''' <summary>
    '    ''' Inicia una Transaccion.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
    '        Try
    '            If _connection Is Nothing Then
    '                _connection = New SqlConnection(_connectionstring)
    '                _connection.Open()
    '                _transaction = _connection.BeginTransaction()
    '                Return _transaction
    '            Else
    '                RaiseEvent OnError(New Exception("Transaction already opened"))
    '                Return Nothing
    '            End If
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '            Return Nothing
    '        End Try
    '    End Function
    '    ''' <summary>
    '    ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
    '    ''' </summary>
    '    ''' <param name="Commit"></param>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
    '        Try
    '            If _connection Is Nothing Then
    '                RaiseEvent OnError(New Exception("Transaction not opened yet"))
    '            Else
    '                If Commit Then
    '                    _transaction.Commit()
    '                Else
    '                    _transaction.Rollback()
    '                End If
    '                _connection.Close()
    '                _connection = Nothing
    '                _transaction = Nothing
    '                Return True
    '            End If
    '        Catch ex As System.Exception
    '            Select Case Me.ExceptionHandling
    '                Case ExceptionHandlingEnum.RaiseExceptionHandling
    '                    RaiseEvent OnError(ex)
    '                Case ExceptionHandlingEnum.ThrowExceptionHandling
    '                    Throw (ex)
    '            End Select
    '        End Try
    '        Return True
    '    End Function

    '    ''' <summary>
    '    ''' Conserva el resultado de la última consulta.
    '    ''' </summary>
    '    ''' <returns></returns>
    '    ''' <remarks></remarks>
    '    Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKARTICULOS)
    '        Get
    '            Return _itemList
    '        End Get

    '    End Property

    '    Private Function GetSQL() As String
    '        Try
    '            Dim _buff As String = String.Empty
    '            _buff &= Me.WhereParameter.GetSQL()
    '            _buff &= Me.OrderByParameter.GetSQL()
    '            Return _buff
    '        Catch ex As Exception
    '            Return Nothing
    '        End Try
    '    End Function
    '    Private Function GetAggregateSQL() As String
    '        Try
    '            Dim _buff As String = Nothing

    '            _buff &= Me.AggregateParameter.GetSQL()

    '            Return _buff
    '        Catch ex As Exception
    '            Return Nothing
    '        End Try
    '    End Function
    '    Public Property WhereParameter() As WhereParameterObject
    '        Get
    '            Return _whereParameterObject

    '        End Get
    '        Set(ByVal value As WhereParameterObject)
    '            _whereParameterObject = value
    '        End Set
    '    End Property
    '    Public Property OrderByParameter() As OrderByParameterObject
    '        Get
    '            Return _orderByParameterObject
    '        End Get
    '        Set(ByVal value As OrderByParameterObject)
    '            _orderByParameterObject = value
    '        End Set
    '    End Property
    '    Public Property AggregateParameter() As AggregateParameterObject
    '        Get
    '            Return _aggregateParameterObject
    '        End Get
    '        Set(ByVal value As AggregateParameterObject)
    '            _aggregateParameterObject = value
    '        End Set
    '    End Property

    '    Public Class OrderByParameterObject
    '        Inherits OrderByParameter

    '        Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
    '            Try
    '                _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

    '            Catch ex As Exception

    '            End Try

    '        End Sub
    '    End Class

    '    Public Class WhereParameterObject
    '        Inherits WhereParameter

    '        Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
    '            Try
    '                Select Case Operand
    '                    Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
    '                        Dim _buff As String = Nothing
    '                        For Each obj As Object In Value
    '                            _buff &= obj.ToString & ","
    '                        Next
    '                        _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
    '                    Case Else
    '                        If Value.Length > 1 Then
    '                            Throw New Exception("Demasiados argumentos para la consulta.")
    '                        Else
    '                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
    '                        End If
    '                End Select


    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Sub
    '        Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

    '            Try
    '                Select Case Operand
    '                    Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
    '                        Dim _buff As String = Nothing
    '                        For Each obj As Object In Value
    '                            _buff &= obj.ToString & ","
    '                        Next
    '                        MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
    '                    Case Else
    '                        If Value.Length > 1 Then
    '                            Throw New Exception("Demasiados argumentos para la consulta.")
    '                        Else
    '                            _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
    '                        End If
    '                End Select


    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Sub
    '        Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
    '            Try
    '                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
    '            Catch ex As Exception
    '                Throw ex
    '            End Try
    '        End Sub
    '        Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

    '            If _whereParams.Count Then
    '                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
    '            Else
    '                Throw New Exception("Error de sobrecarga")
    '            End If

    '        End Sub
    '        Private Function FormatValue(ByVal Value As Object) As String
    '            Try
    '                Select Case Value.GetType.FullName
    '                    Case "System.String", "System.DateTime"
    '                        Return "'" & Value & "'"
    '                    Case Else
    '                        Return Value
    '                End Select
    '            Catch ex As Exception
    '                Throw New Exception("Error Convirtiendo valor")
    '            End Try
    '        End Function
    '    End Class


    '    Public Class AggregateParameterObject
    '        Inherits AggregateParameter

    '        Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
    '            Try
    '                _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

    '            Catch ex As Exception

    '            End Try

    '        End Sub
    '    End Class
    '    ''' <summary>
    '    ''' </summary>
    '    ''' <remarks></remarks>
    '    Public Class ITEM
    '        Inherits Entities.Tables.STKARTICULOS
    '    End Class 'ITEM

    '    ''' Clase         : ColumnNames 
    '    ''' Descripción   : Nombres de Columnas de la tabla STKARTICULOS
    '    ''' Fecha de Creación  : lunes, 14 de marzo de 2016
    '    ''' <remarks> Representa los Nombres de Columnas de la tabla STKARTICULOS. </remarks>
    '    Public Class ColumnNames
    '        Public Const CODEMP As String = "CODEMP"
    '        Public Const ARTICULO_ID As String = "ARTICULO_ID"
    '        Public Const DESCRIPCION As String = "DESCRIPCION"
    '        Public Const TOLERANCIAINGSTOCK As String = "TOLERANCIAINGSTOCK"
    '        Public Const STOCKMINIMO As String = "STOCKMINIMO"
    '        Public Const STOCKMAXIMO As String = "STOCKMAXIMO"
    '        Public Const VAASTOCK As String = "VAASTOCK"
    '        Public Const UNIMEDPPAL As String = "UNIMEDPPAL"
    '        Public Const UNIMEDSEC As String = "UNIMEDSEC"
    '        Public Const FACTORCONVERSION As String = "FACTORCONVERSION"
    '        Public Const CODIGOFACTURACION As String = "CODIGOFACTURACION"
    '        Public Const FACTORCORRECCION As String = "FACTORCORRECCION"
    '    End Class ' ColumnNames
    'End Class ' STKARTICULOS


    Public Class STKARTICULOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            articulo_id
            Descripcion
            toleranciaIngStock
            stockMinimo
            stockMaximo
            vaAStock
            uniMedPpal
            uniMedSec
            factorConversion
            codigoIM
            mostrarEnRequerimiento
            trazable
            codigoSubcuenta
            LlevaReceta
            LlevaVencimiento
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKARTICULOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKARTICULOS) As Entities.Tables.STKARTICULOS
            Dim result As Boolean

            Try
                _commandText = "_STKARTICULOS_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKarticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim VtoleranciaIngStock As New SqlParameter("@toleranciaIngStock", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TOLERANCIAINGSTOCK)
                Dim VstockMinimo As New SqlParameter("@stockMinimo", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.STOCKMINIMO)
                Dim VstockMaximo As New SqlParameter("@stockMaximo", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.STOCKMAXIMO)
                Dim VvaAStock As New SqlParameter("@vaAStock", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VAASTOCK)
                Dim VuniMedPpal As New SqlParameter("@uniMedPpal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMEDPPAL)
                Dim VuniMedSec As New SqlParameter("@uniMedSec", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMEDSEC)
                Dim VfactorConversion As New SqlParameter("@factorConversion", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FACTORCONVERSION)
                Dim VcodigoIM As New SqlParameter("@codigoIM", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODIGOIM)
                Dim VmostrarEnRequerimiento As New SqlParameter("@mostrarEnRequerimiento", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOSTRARENREQUERIMIENTO)
                Dim Vtrazable As New SqlParameter("@trazable", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TRAZABLE)
                Dim VcodigoSubcuenta As New SqlParameter("@codigoSubcuenta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODIGOSUBCUENTA)
                Dim VLlevaReceta As New SqlParameter("@LlevaReceta", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LLEVARECETA)
                Dim VLlevaVencimiento As New SqlParameter("@LlevaVencimiento", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LLEVAVENCIMIENTO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKarticulo_id, VDescripcion, VtoleranciaIngStock, VstockMinimo, VstockMaximo, VvaAStock, VuniMedPpal, VuniMedSec, VfactorConversion, VcodigoIM, VmostrarEnRequerimiento, Vtrazable, VcodigoSubcuenta, VLlevaReceta, VLlevaVencimiento, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.ARTICULO_ID = vPKarticulo_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKARTICULOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkArticulos_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKARTICULOS
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    NewItem.TOLERANCIAINGSTOCK = IIf(Convert.IsDBNull(dr("toleranciaIngStock")), Nothing, dr("toleranciaIngStock"))
                    NewItem.STOCKMINIMO = IIf(Convert.IsDBNull(dr("stockMinimo")), Nothing, dr("stockMinimo"))
                    NewItem.STOCKMAXIMO = IIf(Convert.IsDBNull(dr("stockMaximo")), Nothing, dr("stockMaximo"))
                    NewItem.VAASTOCK = IIf(Convert.IsDBNull(dr("vaAStock")), Nothing, dr("vaAStock"))
                    NewItem.UNIMEDPPAL = IIf(Convert.IsDBNull(dr("uniMedPpal")), Nothing, dr("uniMedPpal"))
                    NewItem.UNIMEDSEC = IIf(Convert.IsDBNull(dr("uniMedSec")), Nothing, dr("uniMedSec"))
                    NewItem.FACTORCONVERSION = IIf(Convert.IsDBNull(dr("factorConversion")), Nothing, dr("factorConversion"))
                    NewItem.CODIGOIM = IIf(Convert.IsDBNull(dr("codigoIM")), Nothing, dr("codigoIM"))
                    NewItem.MOSTRARENREQUERIMIENTO = IIf(Convert.IsDBNull(dr("mostrarEnRequerimiento")), Nothing, dr("mostrarEnRequerimiento"))
                    NewItem.TRAZABLE = IIf(Convert.IsDBNull(dr("trazable")), Nothing, dr("trazable"))
                    NewItem.CODIGOSUBCUENTA = IIf(Convert.IsDBNull(dr("codigoSubcuenta")), Nothing, dr("codigoSubcuenta"))
                    NewItem.LLEVARECETA = IIf(Convert.IsDBNull(dr("LlevaReceta")), Nothing, dr("LlevaReceta"))
                    NewItem.LLEVAVENCIMIENTO = IIf(Convert.IsDBNull(dr("LlevaVencimiento")), Nothing, dr("LlevaVencimiento"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKARTICULOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKARTICULOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKARTICULOS) As Boolean

            Try
                _commandText = "_stkArticulos_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Varticulo_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkArticulos_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKARTICULOS) As Boolean

            Try
                _commandText = "_stkArticulos_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim VtoleranciaIngStock As New SqlParameter("@toleranciaIngStock", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TOLERANCIAINGSTOCK)
                Dim VstockMinimo As New SqlParameter("@stockMinimo", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.STOCKMINIMO)
                Dim VstockMaximo As New SqlParameter("@stockMaximo", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.STOCKMAXIMO)
                Dim VvaAStock As New SqlParameter("@vaAStock", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VAASTOCK)
                Dim VuniMedPpal As New SqlParameter("@uniMedPpal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMEDPPAL)
                Dim VuniMedSec As New SqlParameter("@uniMedSec", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMEDSEC)
                Dim VfactorConversion As New SqlParameter("@factorConversion", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FACTORCONVERSION)
                Dim VcodigoIM As New SqlParameter("@codigoIM", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODIGOIM)
                Dim VmostrarEnRequerimiento As New SqlParameter("@mostrarEnRequerimiento", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOSTRARENREQUERIMIENTO)
                Dim Vtrazable As New SqlParameter("@trazable", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TRAZABLE)
                Dim VcodigoSubcuenta As New SqlParameter("@codigoSubcuenta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODIGOSUBCUENTA)
                Dim VLlevaReceta As New SqlParameter("@LlevaReceta", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LLEVARECETA)
                Dim VLlevaVencimiento As New SqlParameter("@LlevaVencimiento", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LLEVAVENCIMIENTO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Varticulo_id, VDescripcion, VtoleranciaIngStock, VstockMinimo, VstockMaximo, VvaAStock, VuniMedPpal, VuniMedSec, VfactorConversion, VcodigoIM, VmostrarEnRequerimiento, Vtrazable, VcodigoSubcuenta, VLlevaReceta, VLlevaVencimiento, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKARTICULOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKARTICULOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKARTICULOS
        ''' Fecha de Creación  : miércoles, 1 de marzo de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKARTICULOS. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const TOLERANCIAINGSTOCK As String = "TOLERANCIAINGSTOCK"
            Public Const STOCKMINIMO As String = "STOCKMINIMO"
            Public Const STOCKMAXIMO As String = "STOCKMAXIMO"
            Public Const VAASTOCK As String = "VAASTOCK"
            Public Const UNIMEDPPAL As String = "UNIMEDPPAL"
            Public Const UNIMEDSEC As String = "UNIMEDSEC"
            Public Const FACTORCONVERSION As String = "FACTORCONVERSION"
            Public Const CODIGOIM As String = "CODIGOIM"
            Public Const MOSTRARENREQUERIMIENTO As String = "MOSTRARENREQUERIMIENTO"
            Public Const TRAZABLE As String = "TRAZABLE"
            Public Const CODIGOSUBCUENTA As String = "CODIGOSUBCUENTA"
            Public Const LLEVARECETA As String = "LLEVARECETA"
            Public Const LLEVAVENCIMIENTO As String = "LLEVAVENCIMIENTO"
        End Class ' ColumnNames
    End Class ' STKARTICULOS

    Public Class STKDEPOSITO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            deposito_id
            descripcion
            stockNegativo
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKDEPOSITO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKDEPOSITO) As Entities.Tables.STKDEPOSITO
            Dim result As Boolean

            Try
                _commandText = "_STKDEPOSITO_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKdeposito_id As New SqlParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim VstockNegativo As New SqlParameter("@stockNegativo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.STOCKNEGATIVO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKdeposito_id, Vdescripcion, VstockNegativo, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.DEPOSITO_ID = vPKdeposito_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKDEPOSITO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkDeposito_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKDEPOSITO
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.DEPOSITO_ID = IIf(Convert.IsDBNull(dr("deposito_id")), Nothing, dr("deposito_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.STOCKNEGATIVO = IIf(Convert.IsDBNull(dr("stockNegativo")), Nothing, dr("stockNegativo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKDEPOSITO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKDEPOSITO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKDEPOSITO) As Boolean

            Try
                _commandText = "_stkDeposito_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vdeposito_id As New SqlParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vdeposito_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkDeposito_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKDEPOSITO) As Boolean

            Try
                _commandText = "_stkDeposito_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vdeposito_id As New SqlParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim VstockNegativo As New SqlParameter("@stockNegativo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.STOCKNEGATIVO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vdeposito_id, Vdescripcion, VstockNegativo, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKDEPOSITO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKDEPOSITO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKDEPOSITO
        ''' Fecha de Creación  : miércoles, 02 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKDEPOSITO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const DEPOSITO_ID As String = "DEPOSITO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const STOCKNEGATIVO As String = "STOCKNEGATIVO"
        End Class ' ColumnNames
    End Class ' STKDEPOSITO

    Public Class STKENTRANSITO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            comprobante
            nroItem
            cantOriginal
            cantRecibida
            uniMed
            estado_id
            usuarioGenera
            usuarioRecibe
            fechaRecepcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKENTRANSITO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKENTRANSITO) As Entities.Tables.STKENTRANSITO
            Dim result As Boolean

            Try
                _commandText = "_STKENTRANSITO_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VcantOriginal As New SqlParameter("@cantOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTORIGINAL)
                Dim VcantRecibida As New SqlParameter("@cantRecibida", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTRECIBIDA)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VusuarioGenera As New SqlParameter("@usuarioGenera", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOGENERA)
                Dim VusuarioRecibe As New SqlParameter("@usuarioRecibe", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIORECIBE)
                Dim VfechaRecepcion As New SqlParameter("@fechaRecepcion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHARECEPCION = Date.MinValue, Nothing, Item.FECHARECEPCION))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKcomprobante, vPKnroItem, VcantOriginal, VcantRecibida, VuniMed, Vestado_id, VusuarioGenera, VusuarioRecibe, VfechaRecepcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.COMPROBANTE = vPKcomprobante.Value
                    Item.NROITEM = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKENTRANSITO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkEnTransito_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKENTRANSITO
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.COMPROBANTE = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.CANTORIGINAL = IIf(Convert.IsDBNull(dr("cantOriginal")), Nothing, dr("cantOriginal"))
                    NewItem.CANTRECIBIDA = IIf(Convert.IsDBNull(dr("cantRecibida")), Nothing, dr("cantRecibida"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.USUARIOGENERA = IIf(Convert.IsDBNull(dr("usuarioGenera")), Nothing, dr("usuarioGenera"))
                    NewItem.USUARIORECIBE = IIf(Convert.IsDBNull(dr("usuarioRecibe")), Nothing, dr("usuarioRecibe"))
                    NewItem.FECHARECEPCION = IIf(Convert.IsDBNull(dr("fechaRecepcion")), Nothing, dr("fechaRecepcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKENTRANSITO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKENTRANSITO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKENTRANSITO) As Boolean

            Try
                _commandText = "_stkEnTransito_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vcomprobante, VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkEnTransito_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKENTRANSITO) As Boolean

            Try
                _commandText = "_stkEnTransito_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VcantOriginal As New SqlParameter("@cantOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTORIGINAL)
                Dim VcantRecibida As New SqlParameter("@cantRecibida", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTRECIBIDA)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VusuarioGenera As New SqlParameter("@usuarioGenera", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOGENERA)
                Dim VusuarioRecibe As New SqlParameter("@usuarioRecibe", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIORECIBE)
                Dim VfechaRecepcion As New SqlParameter("@fechaRecepcion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHARECEPCION = Date.MinValue, Nothing, Item.FECHARECEPCION))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vcomprobante, VnroItem, VcantOriginal, VcantRecibida, VuniMed, Vestado_id, VusuarioGenera, VusuarioRecibe, VfechaRecepcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKENTRANSITO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKENTRANSITO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKENTRANSITO
        ''' Fecha de Creación  : lunes, 31 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKENTRANSITO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const NROITEM As String = "NROITEM"
            Public Const CANTORIGINAL As String = "CANTORIGINAL"
            Public Const CANTRECIBIDA As String = "CANTRECIBIDA"
            Public Const UNIMED As String = "UNIMED"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const USUARIOGENERA As String = "USUARIOGENERA"
            Public Const USUARIORECIBE As String = "USUARIORECIBE"
            Public Const FECHARECEPCION As String = "FECHARECEPCION"
        End Class ' ColumnNames
    End Class ' STKENTRANSITO

    Public Class STKMOVIOC
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmpStk
            comprobanteStk
            nroItemStk
            codEmp
            ordenCompra_id
            nroItem
            uniMed
            cantOriginal
            cantIngresada
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKMOVIOC)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKMOVIOC) As Entities.Tables.STKMOVIOC
            Dim result As Boolean

            Try
                _commandText = "_STKMOVIOC_ADD"
                Dim vPKcodEmpStk As New SQLParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpStk)
                Dim vPKcomprobanteStk As New SQLParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobanteStk)
                Dim vPKnroItemStk As New SQLParameter("@nroItemStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItemStk)
                Dim vPKcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim vPKordenCompra_id As New SQLParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ordenCompra_id)
                Dim vPKnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim VcantOriginal As New SQLParameter("@cantOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantOriginal)
                Dim VcantIngresada As New SqlParameter("@cantIngresada", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTINGRESADA)
                Dim VremSucursal As New SqlParameter("@remSucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RemSucursal)
                Dim VremComprobante As New SqlParameter("@remComprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RemComprobante)

                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmpStk, vPKcomprobanteStk, vPKnroItemStk, vPKcodEmp, vPKordenCompra_id, vPKnroItem, VuniMed, VcantOriginal, VcantIngresada, VremSucursal, VremComprobante, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.codEmpStk = vPKcodEmpStk.Value
                    Item.comprobanteStk = vPKcomprobanteStk.Value
                    Item.nroItemStk = vPKnroItemStk.Value
                    Item.codEmp = vPKcodEmp.Value
                    Item.ordenCompra_id = vPKordenCompra_id.Value
                    Item.nroItem = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKMOVIOC)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkMoviOC_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKMOVIOC
                    NewItem.codEmpStk = IIf(Convert.IsDBNull(dr("codEmpStk")), Nothing, dr("codEmpStk"))
                    NewItem.comprobanteStk = IIf(Convert.IsDBNull(dr("comprobanteStk")), Nothing, dr("comprobanteStk"))
                    NewItem.nroItemStk = IIf(Convert.IsDBNull(dr("nroItemStk")), Nothing, dr("nroItemStk"))
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ordenCompra_id = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantOriginal = IIf(Convert.IsDBNull(dr("cantOriginal")), Nothing, dr("cantOriginal"))
                    NewItem.CANTINGRESADA = IIf(Convert.IsDBNull(dr("cantIngresada")), Nothing, dr("cantIngresada"))
                    NewItem.RemSucursal = IIf(Convert.IsDBNull(dr("remSucursal")), Nothing, dr("remSucursal"))
                    NewItem.RemComprobante = IIf(Convert.IsDBNull(dr("remComprobante")), Nothing, dr("remComprobante"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIOC")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIOC")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKMOVIOC) As Boolean

            Try
                _commandText = "_stkMoviOC_REMOVE"
                Dim VcodEmpStk As New SQLParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpStk)
                Dim VcomprobanteStk As New SQLParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobanteStk)
                Dim VnroItemStk As New SQLParameter("@nroItemStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItemStk)
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim VordenCompra_id As New SQLParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ordenCompra_id)
                Dim VnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VcodEmpStk, VcomprobanteStk, VnroItemStk, VcodEmp, VordenCompra_id, VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkMoviOC_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKMOVIOC) As Boolean

            Try
                _commandText = "_stkMoviOC_UPDATE"

                Dim VcodEmpStk As New SQLParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmpStk)
                Dim VcomprobanteStk As New SQLParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobanteStk)
                Dim VnroItemStk As New SQLParameter("@nroItemStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItemStk)
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim VordenCompra_id As New SQLParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ordenCompra_id)
                Dim VnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim VcantOriginal As New SQLParameter("@cantOriginal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantOriginal)
                Dim VcantIngresada As New SqlParameter("@cantIngresada", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTINGRESADA)
                Dim VremSucursal As New SqlParameter("@remSucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RemSucursal)
                Dim VremComprobante As New SqlParameter("@remComprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RemComprobante)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmpStk, VcomprobanteStk, VnroItemStk, VcodEmp, VordenCompra_id, VnroItem, VuniMed, VcantOriginal, VcantIngresada, VremSucursal, VremComprobante, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKMOVIOC)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKMOVIOC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKMOVIOC
        ''' Fecha de Creación  : lunes, 19 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKMOVIOC. </remarks>
        Public Class ColumnNames
            Public Const CODEMPSTK As String = "CODEMPSTK"
            Public Const COMPROBANTESTK As String = "COMPROBANTESTK"
            Public Const NROITEMSTK As String = "NROITEMSTK"
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTORIGINAL As String = "CANTORIGINAL"
            Public Const CANTINGRESADA As String = "CANTINGRESADA"
            Public Const REMSUCURSAL As String = "REMSUCURSAL"
            Public Const REMCOMPROBANTE As String = "REMCOMPROBANTE"
        End Class ' ColumnNames
    End Class ' STKMOVIOC


    Public Class STKREMITO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            sucursal
            comprobante
            letra
            fecha
            codEmpStk
            comprobanteStk
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKREMITO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKREMITO) As Entities.Tables.STKREMITO
            Dim result As Boolean

            Try
                _commandText = "_STKREMITO_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKsucursal As New SqlParameter("@sucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUCURSAL)
                Dim vPKcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim vPKletra As New SqlParameter("@letra", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LETRA)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim VcodEmpStk As New SqlParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPSTK)
                Dim VcomprobanteStk As New SqlParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTESTK)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKsucursal, vPKcomprobante, vPKletra, Vfecha, VcodEmpStk, VcomprobanteStk, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.SUCURSAL = vPKsucursal.Value
                    Item.COMPROBANTE = vPKcomprobante.Value
                    Item.LETRA = vPKletra.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKREMITO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkRemito_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKREMITO
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.SUCURSAL = IIf(Convert.IsDBNull(dr("sucursal")), Nothing, dr("sucursal"))
                    NewItem.COMPROBANTE = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    NewItem.LETRA = IIf(Convert.IsDBNull(dr("letra")), Nothing, dr("letra"))
                    NewItem.FECHA = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.CODEMPSTK = IIf(Convert.IsDBNull(dr("codEmpStk")), Nothing, dr("codEmpStk"))
                    NewItem.COMPROBANTESTK = IIf(Convert.IsDBNull(dr("comprobanteStk")), Nothing, dr("comprobanteStk"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKREMITO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKREMITO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKREMITO) As Boolean

            Try
                _commandText = "_stkRemito_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vsucursal As New SqlParameter("@sucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUCURSAL)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim Vletra As New SqlParameter("@letra", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LETRA)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vsucursal, Vcomprobante, Vletra, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkRemito_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKREMITO) As Boolean

            Try
                _commandText = "_stkRemito_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vsucursal As New SqlParameter("@sucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUCURSAL)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim Vletra As New SqlParameter("@letra", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LETRA)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim VcodEmpStk As New SqlParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPSTK)
                Dim VcomprobanteStk As New SqlParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTESTK)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vsucursal, Vcomprobante, Vletra, Vfecha, VcodEmpStk, VcomprobanteStk, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKREMITO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKREMITO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKREMITO
        ''' Fecha de Creación  : miércoles, 02 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKREMITO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const SUCURSAL As String = "SUCURSAL"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const LETRA As String = "LETRA"
            Public Const FECHA As String = "FECHA"
            Public Const CODEMPSTK As String = "CODEMPSTK"
            Public Const COMPROBANTESTK As String = "COMPROBANTESTK"
        End Class ' ColumnNames
    End Class ' STKREMITO

    Public Class STKINVENTARIO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            articulo_id
            deposito_id
            sector_id
            uniMed
            cantidad
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKINVENTARIO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKINVENTARIO) As Entities.Tables.STKINVENTARIO
            Dim result As Boolean

            Try
                _commandText = "_STKINVENTARIO_ADD"
                Dim vPKarticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim vPKdeposito_id As New SQLParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.deposito_id)
                Dim vPKsector_id As New SQLParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sector_id)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim Vcantidad As New SQLParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidad)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKarticulo_id, vPKdeposito_id, vPKsector_id, VuniMed, Vcantidad, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.ARTICULO_ID = vPKarticulo_id.Value
                    Item.deposito_id = vPKdeposito_id.Value
                    Item.sector_id = vPKsector_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKINVENTARIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkInventario_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKINVENTARIO

                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.deposito_id = IIf(Convert.IsDBNull(dr("deposito_id")), Nothing, dr("deposito_id"))
                    NewItem.sector_id = IIf(Convert.IsDBNull(dr("sector_id")), Nothing, dr("sector_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKINVENTARIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKINVENTARIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKINVENTARIO) As Boolean

            Try
                _commandText = "_stkInventario_REMOVE"

                Dim Varticulo_id As New SQLParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.articulo_id)
                Dim Vdeposito_id As New SQLParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.deposito_id)
                Dim Vsector_id As New SQLParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sector_id)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Varticulo_id, Vdeposito_id, Vsector_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkInventario_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKINVENTARIO) As Boolean

            Try
                _commandText = "_stkInventario_UPDATE"


                Dim Varticulo_id As New SQLParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.articulo_id)
                Dim Vdeposito_id As New SQLParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.deposito_id)
                Dim Vsector_id As New SQLParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sector_id)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim Vcantidad As New SQLParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidad)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Varticulo_id, Vdeposito_id, Vsector_id, VuniMed, Vcantidad, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKINVENTARIO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKINVENTARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKINVENTARIO
        ''' Fecha de Creación  : viernes, 25 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKINVENTARIO. </remarks>
        Public Class ColumnNames

            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const DEPOSITO_ID As String = "DEPOSITO_ID"
            Public Const SECTOR_ID As String = "SECTOR_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
        End Class ' ColumnNames
    End Class ' STKINVENTARIO

    Public Class STKMOVIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            comprobante
            tipoMov_id
            subTipoMov_id
            fechaMov
            depositoOrigen_id
            sectorOrigen_id
            depositoDestino_id
            sectorDestino_id
            usuario
            anulado
            obs
            motivoAjuste_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKMOVIMIENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKMOVIMIENTO) As Entities.Tables.STKMOVIMIENTO
            Dim result As Boolean

            Try
                _commandText = "_STKMOVIMIENTO_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim VtipoMov_id As New SqlParameter("@tipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOMOV_ID)
                Dim VsubTipoMov_id As New SqlParameter("@subTipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUBTIPOMOV_ID)
                Dim VfechaMov As New SqlParameter("@fechaMov", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMOV = Date.MinValue, Nothing, Item.FECHAMOV))
                Dim VdepositoOrigen_id As New SqlParameter("@depositoOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITOORIGEN_ID)
                Dim VsectorOrigen_id As New SqlParameter("@sectorOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORORIGEN_ID)
                Dim VdepositoDestino_id As New SqlParameter("@depositoDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITODESTINO_ID)
                Dim VsectorDestino_id As New SqlParameter("@sectorDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORDESTINO_ID)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim Vanulado As New SqlParameter("@anulado", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ANULADO)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim VmotivoAjuste_id As New SqlParameter("@motivoAjuste_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOAJUSTE_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKcomprobante, VtipoMov_id, VsubTipoMov_id, VfechaMov, VdepositoOrigen_id, VsectorOrigen_id, VdepositoDestino_id, VsectorDestino_id, Vusuario, Vanulado, Vobs, VmotivoAjuste_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.COMPROBANTE = vPKcomprobante.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKMOVIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkMovimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKMOVIMIENTO
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.COMPROBANTE = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    NewItem.TIPOMOV_ID = IIf(Convert.IsDBNull(dr("tipoMov_id")), Nothing, dr("tipoMov_id"))
                    NewItem.SUBTIPOMOV_ID = IIf(Convert.IsDBNull(dr("subTipoMov_id")), Nothing, dr("subTipoMov_id"))
                    NewItem.FECHAMOV = IIf(Convert.IsDBNull(dr("fechaMov")), Nothing, dr("fechaMov"))
                    NewItem.DEPOSITOORIGEN_ID = IIf(Convert.IsDBNull(dr("depositoOrigen_id")), Nothing, dr("depositoOrigen_id"))
                    NewItem.SECTORORIGEN_ID = IIf(Convert.IsDBNull(dr("sectorOrigen_id")), Nothing, dr("sectorOrigen_id"))
                    NewItem.DEPOSITODESTINO_ID = IIf(Convert.IsDBNull(dr("depositoDestino_id")), Nothing, dr("depositoDestino_id"))
                    NewItem.SECTORDESTINO_ID = IIf(Convert.IsDBNull(dr("sectorDestino_id")), Nothing, dr("sectorDestino_id"))
                    NewItem.USUARIO = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.ANULADO = IIf(Convert.IsDBNull(dr("anulado")), Nothing, dr("anulado"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.MOTIVOAJUSTE_ID = IIf(Convert.IsDBNull(dr("motivoAjuste_id")), Nothing, dr("motivoAjuste_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKMOVIMIENTO) As Boolean

            Try
                _commandText = "_stkMovimiento_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vcomprobante, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkMovimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKMOVIMIENTO) As Boolean

            Try
                _commandText = "_stkMovimiento_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim VtipoMov_id As New SqlParameter("@tipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOMOV_ID)
                Dim VsubTipoMov_id As New SqlParameter("@subTipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUBTIPOMOV_ID)
                Dim VfechaMov As New SqlParameter("@fechaMov", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMOV = Date.MinValue, Nothing, Item.FECHAMOV))
                Dim VdepositoOrigen_id As New SqlParameter("@depositoOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITOORIGEN_ID)
                Dim VsectorOrigen_id As New SqlParameter("@sectorOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORORIGEN_ID)
                Dim VdepositoDestino_id As New SqlParameter("@depositoDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITODESTINO_ID)
                Dim VsectorDestino_id As New SqlParameter("@sectorDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORDESTINO_ID)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim Vanulado As New SqlParameter("@anulado", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ANULADO)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim VmotivoAjuste_id As New SqlParameter("@motivoAjuste_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOAJUSTE_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vcomprobante, VtipoMov_id, VsubTipoMov_id, VfechaMov, VdepositoOrigen_id, VsectorOrigen_id, VdepositoDestino_id, VsectorDestino_id, Vusuario, Vanulado, Vobs, VmotivoAjuste_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKMOVIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKMOVIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKMOVIMIENTO
        ''' Fecha de Creación  : lunes, 19 de marzo de 2018
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKMOVIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const TIPOMOV_ID As String = "TIPOMOV_ID"
            Public Const SUBTIPOMOV_ID As String = "SUBTIPOMOV_ID"
            Public Const FECHAMOV As String = "FECHAMOV"
            Public Const DEPOSITOORIGEN_ID As String = "DEPOSITOORIGEN_ID"
            Public Const SECTORORIGEN_ID As String = "SECTORORIGEN_ID"
            Public Const DEPOSITODESTINO_ID As String = "DEPOSITODESTINO_ID"
            Public Const SECTORDESTINO_ID As String = "SECTORDESTINO_ID"
            Public Const USUARIO As String = "USUARIO"
            Public Const ANULADO As String = "ANULADO"
            Public Const OBS As String = "OBS"
            Public Const MOTIVOAJUSTE_ID As String = "MOTIVOAJUSTE_ID"
        End Class ' ColumnNames
    End Class ' STKMOVIMIENTO

    Public Class STKMOVIMIENTOITEM
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            comprobante
            nroItem
            articulo_id
            uniMed
            cantidad
            costoUni
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKMOVIMIENTOITEM)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKMOVIMIENTOITEM) As Entities.Tables.STKMOVIMIENTOITEM
            Dim result As Boolean

            Try
                _commandText = "_STKMOVIMIENTOITEM_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VcostoUni As New SqlParameter("@costoUni", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COSTOUNI)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKcomprobante, vPKnroItem, Varticulo_id, VuniMed, Vcantidad, VcostoUni, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.COMPROBANTE = vPKcomprobante.Value
                    Item.NROITEM = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKMOVIMIENTOITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkMovimientoItem_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKMOVIMIENTOITEM
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.COMPROBANTE = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.COSTOUNI = IIf(Convert.IsDBNull(dr("costoUni")), Nothing, dr("costoUni"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIMIENTOITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIMIENTOITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKMOVIMIENTOITEM) As Boolean

            Try
                _commandText = "_stkMovimientoItem_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vcomprobante, VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkMovimientoItem_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKMOVIMIENTOITEM) As Boolean

            Try
                _commandText = "_stkMovimientoItem_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VcostoUni As New SqlParameter("@costoUni", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COSTOUNI)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vcomprobante, VnroItem, Varticulo_id, VuniMed, Vcantidad, VcostoUni, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKMOVIMIENTOITEM)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKMOVIMIENTOITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKMOVIMIENTOITEM
        ''' Fecha de Creación  : lunes, 31 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKMOVIMIENTOITEM. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const NROITEM As String = "NROITEM"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const COSTOUNI As String = "COSTOUNI"
        End Class ' ColumnNames
    End Class ' STKMOVIMIENTOITEM

    Public Class STKSECTOR
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            deposito_id
            sector_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKSECTOR)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKSECTOR) As Entities.Tables.STKSECTOR
            Dim result As Boolean

            Try
                _commandText = "_STKSECTOR_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKdeposito_id As New SqlParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITO_ID)
                Dim vPKsector_id As New SqlParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKdeposito_id, vPKsector_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.DEPOSITO_ID = vPKdeposito_id.Value
                    Item.SECTOR_ID = vPKsector_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKSECTOR)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkSector_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKSECTOR
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.DEPOSITO_ID = IIf(Convert.IsDBNull(dr("deposito_id")), Nothing, dr("deposito_id"))
                    NewItem.SECTOR_ID = IIf(Convert.IsDBNull(dr("sector_id")), Nothing, dr("sector_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKSECTOR")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKSECTOR")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKSECTOR) As Boolean

            Try
                _commandText = "_stkSector_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vdeposito_id As New SqlParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITO_ID)
                Dim Vsector_id As New SqlParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vdeposito_id, Vsector_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkSector_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKSECTOR) As Boolean

            Try
                _commandText = "_stkSector_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vdeposito_id As New SqlParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITO_ID)
                Dim Vsector_id As New SqlParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vdeposito_id, Vsector_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKSECTOR)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKSECTOR
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKSECTOR
        ''' Fecha de Creación  : viernes, 25 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKSECTOR. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const DEPOSITO_ID As String = "DEPOSITO_ID"
            Public Const SECTOR_ID As String = "SECTOR_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' STKSECTOR

    Public Class STKSUBTIPOMOV
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            subTipoMov_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKSUBTIPOMOV)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKSUBTIPOMOV) As Entities.Tables.STKSUBTIPOMOV
            Dim result As Boolean

            Try
                _commandText = "_STKSUBTIPOMOV_ADD"
                Dim vPKsubTipoMov_id As New SqlParameter("@subTipoMov_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKsubTipoMov_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.SUBTIPOMOV_ID = vPKsubTipoMov_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKSUBTIPOMOV)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkSubTipoMov_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKSUBTIPOMOV
                    NewItem.SUBTIPOMOV_ID = IIf(Convert.IsDBNull(dr("subTipoMov_id")), Nothing, dr("subTipoMov_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKSUBTIPOMOV")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKSUBTIPOMOV")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKSUBTIPOMOV) As Boolean

            Try
                _commandText = "_stkSubTipoMov_REMOVE"
                Dim VsubTipoMov_id As New SqlParameter("@subTipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUBTIPOMOV_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VsubTipoMov_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkSubTipoMov_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKSUBTIPOMOV) As Boolean

            Try
                _commandText = "_stkSubTipoMov_UPDATE"

                Dim VsubTipoMov_id As New SqlParameter("@subTipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUBTIPOMOV_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VsubTipoMov_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKSUBTIPOMOV)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKSUBTIPOMOV
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKSUBTIPOMOV
        ''' Fecha de Creación  : viernes, 25 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKSUBTIPOMOV. </remarks>
        Public Class ColumnNames
            Public Const SUBTIPOMOV_ID As String = "SUBTIPOMOV_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' STKSUBTIPOMOV


    Public Class STKTIPOMOV
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            tipoMov_id
            descripcion
            signo
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKTIPOMOV)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKTIPOMOV) As Entities.Tables.STKTIPOMOV
            Dim result As Boolean

            Try
                _commandText = "_STKTIPOMOV_ADD"
                Dim vPKtipoMov_id As New SqlParameter("@tipoMov_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vsigno As New SqlParameter("@signo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SIGNO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKtipoMov_id, Vdescripcion, Vsigno, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.TIPOMOV_ID = vPKtipoMov_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKTIPOMOV)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkTipoMov_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKTIPOMOV
                    NewItem.TIPOMOV_ID = IIf(Convert.IsDBNull(dr("tipoMov_id")), Nothing, dr("tipoMov_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.SIGNO = IIf(Convert.IsDBNull(dr("signo")), Nothing, dr("signo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKTIPOMOV")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKTIPOMOV")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKTIPOMOV) As Boolean

            Try
                _commandText = "_stkTipoMov_REMOVE"
                Dim VtipoMov_id As New SqlParameter("@tipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOMOV_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VtipoMov_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkTipoMov_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKTIPOMOV) As Boolean

            Try
                _commandText = "_stkTipoMov_UPDATE"

                Dim VtipoMov_id As New SqlParameter("@tipoMov_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOMOV_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vsigno As New SqlParameter("@signo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SIGNO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VtipoMov_id, Vdescripcion, Vsigno, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKTIPOMOV)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKTIPOMOV
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKTIPOMOV
        ''' Fecha de Creación  : viernes, 25 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKTIPOMOV. </remarks>
        Public Class ColumnNames
            Public Const TIPOMOV_ID As String = "TIPOMOV_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const SIGNO As String = "SIGNO"
        End Class ' ColumnNames
    End Class ' STKTIPOMOV

    Public Class STKCIERRESTOCK
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            Anio
            Mes
            articulo_id
            uniMed
            stockReal
            cantReponer
            fechaMov
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKCIERRESTOCK)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKCIERRESTOCK) As Entities.Tables.STKCIERRESTOCK
            Dim result As Boolean

            Try
                _commandText = "_STKCIERRESTOCK_ADD"
                Dim vPKcodEmp As New SQLParameter("@codEmp", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim vPKAnio As New SQLParameter("@Anio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Anio)
                Dim vPKMes As New SQLParameter("@Mes", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Mes)
                Dim vPKarticulo_id As New SQLParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.articulo_id)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim VstockReal As New SQLParameter("@stockReal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.stockReal)
                Dim VcantReponer As New SQLParameter("@cantReponer", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantReponer)
                Dim VfechaMov As New SQLParameter("@fechaMov", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaMov = Date.minvalue, Nothing, Item.fechaMov))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKcodEmp, vPKAnio, vPKMes, vPKarticulo_id, VuniMed, VstockReal, VcantReponer, VfechaMov, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.codEmp = vPKcodEmp.Value
                    Item.Anio = vPKAnio.Value
                    Item.Mes = vPKMes.Value
                    Item.articulo_id = vPKarticulo_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKCIERRESTOCK)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkCierreStock_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKCIERRESTOCK
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.Anio = IIf(Convert.IsDBNull(dr("Anio")), Nothing, dr("Anio"))
                    NewItem.Mes = IIf(Convert.IsDBNull(dr("Mes")), Nothing, dr("Mes"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.uniMed = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.stockReal = IIf(Convert.IsDBNull(dr("stockReal")), Nothing, dr("stockReal"))
                    NewItem.cantReponer = IIf(Convert.IsDBNull(dr("cantReponer")), Nothing, dr("cantReponer"))
                    NewItem.fechaMov = IIf(Convert.IsDBNull(dr("fechaMov")), Nothing, dr("fechaMov"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKCIERRESTOCK")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKCIERRESTOCK")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKCIERRESTOCK) As Boolean

            Try
                _commandText = "_stkCierreStock_REMOVE"
                Dim VAnio As New SqlParameter("@Anio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ANIO)
                Dim VMes As New SQLParameter("@Mes", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Mes)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAnio, VMes, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkCierreStock_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKCIERRESTOCK) As Boolean

            Try
                _commandText = "_stkCierreStock_UPDATE"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim VAnio As New SQLParameter("@Anio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Anio)
                Dim VMes As New SQLParameter("@Mes", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Mes)
                Dim Varticulo_id As New SQLParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.articulo_id)
                Dim VuniMed As New SQLParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.uniMed)
                Dim VstockReal As New SQLParameter("@stockReal", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.stockReal)
                Dim VcantReponer As New SQLParameter("@cantReponer", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantReponer)
                Dim VfechaMov As New SQLParameter("@fechaMov", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaMov = Date.minvalue, Nothing, Item.fechaMov))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {VcodEmp, VAnio, VMes, Varticulo_id, VuniMed, VstockReal, VcantReponer, VfechaMov, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKCIERRESTOCK)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKCIERRESTOCK
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKCIERRESTOCK
        ''' Fecha de Creación  : lunes, 28 de septiembre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKCIERRESTOCK. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ANIO As String = "ANIO"
            Public Const MES As String = "MES"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const STOCKREAL As String = "STOCKREAL"
            Public Const CANTREPONER As String = "CANTREPONER"
            Public Const FECHAMOV As String = "FECHAMOV"
        End Class ' ColumnNames
    End Class ' STKCIERRESTOCK

    Public Class TESFACTURAPROVEED
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            sucFactura
            comprobante
            tipo
            pro_Cod
            fechaFact
            importe
            codigoBarra
            fechaLectura
            usuario
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TESFACTURAPROVEED)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TESFACTURAPROVEED) As Entities.Tables.TESFACTURAPROVEED
            Dim result As Boolean

            Try
                _commandText = "_TESFACTURAPROVEED_ADD"
                Dim vPKcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim vPKsucFactura As New SQLParameter("@sucFactura", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sucFactura)
                Dim vPKcomprobante As New SQLParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobante)
                Dim vPKtipo As New SQLParameter("@tipo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipo)
                Dim vPKpro_Cod As New SQLParameter("@pro_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.pro_Cod)
                Dim VfechaFact As New SQLParameter("@fechaFact", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaFact = Date.minvalue, Nothing, Item.fechaFact))
                Dim Vimporte As New SQLParameter("@importe", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.importe)
                Dim VcodigoBarra As New SQLParameter("@codigoBarra", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codigoBarra)
                Dim VfechaLectura As New SQLParameter("@fechaLectura", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaLectura = Date.minvalue, Nothing, Item.fechaLectura))
                Dim Vusuario As New SQLParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKcodEmp, vPKsucFactura, vPKcomprobante, vPKtipo, vPKpro_Cod, VfechaFact, Vimporte, VcodigoBarra, VfechaLectura, Vusuario, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.codEmp = vPKcodEmp.Value
                    Item.sucFactura = vPKsucFactura.Value
                    Item.comprobante = vPKcomprobante.Value
                    Item.tipo = vPKtipo.Value
                    Item.pro_Cod = vPKpro_Cod.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TESFACTURAPROVEED)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_tesFacturaProveed_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TESFACTURAPROVEED
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.sucFactura = IIf(Convert.IsDBNull(dr("sucFactura")), Nothing, dr("sucFactura"))
                    NewItem.comprobante = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    NewItem.tipo = IIf(Convert.IsDBNull(dr("tipo")), Nothing, dr("tipo"))
                    NewItem.pro_Cod = IIf(Convert.IsDBNull(dr("pro_Cod")), Nothing, dr("pro_Cod"))
                    NewItem.fechaFact = IIf(Convert.IsDBNull(dr("fechaFact")), Nothing, dr("fechaFact"))
                    NewItem.importe = IIf(Convert.IsDBNull(dr("importe")), Nothing, dr("importe"))
                    NewItem.codigoBarra = IIf(Convert.IsDBNull(dr("codigoBarra")), Nothing, dr("codigoBarra"))
                    NewItem.fechaLectura = IIf(Convert.IsDBNull(dr("fechaLectura")), Nothing, dr("fechaLectura"))
                    NewItem.usuario = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TESFACTURAPROVEED")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TESFACTURAPROVEED")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TESFACTURAPROVEED) As Boolean

            Try
                _commandText = "_tesFacturaProveed_REMOVE"
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim VsucFactura As New SQLParameter("@sucFactura", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sucFactura)
                Dim Vcomprobante As New SQLParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobante)
                Dim Vtipo As New SQLParameter("@tipo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipo)
                Dim Vpro_Cod As New SQLParameter("@pro_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.pro_Cod)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VcodEmp, VsucFactura, Vcomprobante, Vtipo, Vpro_Cod, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_tesFacturaProveed_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TESFACTURAPROVEED) As Boolean

            Try
                _commandText = "_tesFacturaProveed_UPDATE"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim VsucFactura As New SQLParameter("@sucFactura", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sucFactura)
                Dim Vcomprobante As New SQLParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.comprobante)
                Dim Vtipo As New SQLParameter("@tipo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipo)
                Dim Vpro_Cod As New SQLParameter("@pro_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.pro_Cod)
                Dim VfechaFact As New SQLParameter("@fechaFact", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaFact = Date.minvalue, Nothing, Item.fechaFact))
                Dim Vimporte As New SQLParameter("@importe", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.importe)
                Dim VcodigoBarra As New SQLParameter("@codigoBarra", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codigoBarra)
                Dim VfechaLectura As New SQLParameter("@fechaLectura", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaLectura = Date.minvalue, Nothing, Item.fechaLectura))
                Dim Vusuario As New SQLParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {VcodEmp, VsucFactura, Vcomprobante, Vtipo, Vpro_Cod, VfechaFact, Vimporte, VcodigoBarra, VfechaLectura, Vusuario, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TESFACTURAPROVEED)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TESFACTURAPROVEED
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TESFACTURAPROVEED
        ''' Fecha de Creación  : miércoles, 21 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TESFACTURAPROVEED. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const SUCFACTURA As String = "SUCFACTURA"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const TIPO As String = "TIPO"
            Public Const PRO_COD As String = "PRO_COD"
            Public Const FECHAFACT As String = "FECHAFACT"
            Public Const IMPORTE As String = "IMPORTE"
            Public Const CODIGOBARRA As String = "CODIGOBARRA"
            Public Const FECHALECTURA As String = "FECHALECTURA"
            Public Const USUARIO As String = "USUARIO"
        End Class ' ColumnNames
    End Class ' TESFACTURAPROVEED

    Public Class COMREQUERIMIENTOBIONEXO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            requerimiento_id
            nroItem
            nroSolicitud
            cantidad
            fecha
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMREQUERIMIENTOBIONEXO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMREQUERIMIENTOBIONEXO) As Entities.Tables.COMREQUERIMIENTOBIONEXO
            Dim result As Boolean

            Try
                _commandText = "_COMREQUERIMIENTOBIONEXO_ADD"
                Dim vPKcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim vPKrequerimiento_id As New SQLParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.requerimiento_id)
                Dim vPKnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem)
                Dim vPKnroSolicitud As New SQLParameter("@nroSolicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroSolicitud)
                Dim Vcantidad As New SQLParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidad)
                Dim Vfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.minvalue, Nothing, Item.fecha))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKcodEmp, vPKrequerimiento_id, vPKnroItem, vPKnroSolicitud, Vcantidad, Vfecha, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.codEmp = vPKcodEmp.Value
                    Item.requerimiento_id = vPKrequerimiento_id.Value
                    Item.nroItem = vPKnroItem.Value
                    Item.nroSolicitud = vPKnroSolicitud.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMREQUERIMIENTOBIONEXO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comRequerimientoBionexo_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMREQUERIMIENTOBIONEXO
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.requerimiento_id = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.nroItem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.nroSolicitud = IIf(Convert.IsDBNull(dr("nroSolicitud")), Nothing, dr("nroSolicitud"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOBIONEXO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOBIONEXO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMREQUERIMIENTOBIONEXO) As Boolean

            Try
                _commandText = "_comRequerimientoBionexo_REMOVE"
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim Vrequerimiento_id As New SQLParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.requerimiento_id)
                Dim VnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem)
                Dim VnroSolicitud As New SQLParameter("@nroSolicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroSolicitud)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VcodEmp, Vrequerimiento_id, VnroItem, VnroSolicitud, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comRequerimientoBionexo_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMREQUERIMIENTOBIONEXO) As Boolean

            Try
                _commandText = "_comRequerimientoBionexo_UPDATE"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim Vrequerimiento_id As New SQLParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.requerimiento_id)
                Dim VnroItem As New SQLParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroItem)
                Dim VnroSolicitud As New SQLParameter("@nroSolicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.nroSolicitud)
                Dim Vcantidad As New SQLParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidad)
                Dim Vfecha As New SQLParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.minvalue, Nothing, Item.fecha))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {VcodEmp, Vrequerimiento_id, VnroItem, VnroSolicitud, Vcantidad, Vfecha, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMREQUERIMIENTOBIONEXO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMREQUERIMIENTOBIONEXO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMREQUERIMIENTOBIONEXO
        ''' Fecha de Creación  : miércoles, 28 de octubre de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMREQUERIMIENTOBIONEXO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const NROSOLICITUD As String = "NROSOLICITUD"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const FECHA As String = "FECHA"
        End Class ' ColumnNames
    End Class ' COMREQUERIMIENTOBIONEXO

    Public Class TESFACTURASRECIBIDAS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            letra
            puntoDeVenta
            numeroComprobante
            codigoProveed
            fechaRecepcion
            fechaContable
            razonSocial
            importe
            usuarioRecibe
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TESFACTURASRECIBIDAS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TESFACTURASRECIBIDAS) As Entities.Tables.TESFACTURASRECIBIDAS
            Dim result As Boolean

            Try
                _commandText = "_TESFACTURASRECIBIDAS_ADD"
                Dim vPKcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim vPKletra As New SQLParameter("@letra", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.letra)
                Dim vPKpuntoDeVenta As New SQLParameter("@puntoDeVenta", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.puntoDeVenta)
                Dim vPKnumeroComprobante As New SQLParameter("@numeroComprobante", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.numeroComprobante)
                Dim vPKcodigoProveed As New SQLParameter("@codigoProveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codigoProveed)
                Dim VfechaRecepcion As New SQLParameter("@fechaRecepcion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaRecepcion = Date.minvalue, Nothing, Item.fechaRecepcion))
                Dim VfechaContable As New SQLParameter("@fechaContable", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaContable = Date.minvalue, Nothing, Item.fechaContable))
                Dim VrazonSocial As New SQLParameter("@razonSocial", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.razonSocial)
                Dim Vimporte As New SQLParameter("@importe", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.importe)
                Dim VusuarioRecibe As New SQLParameter("@usuarioRecibe", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuarioRecibe)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKcodEmp, vPKletra, vPKpuntoDeVenta, vPKnumeroComprobante, vPKcodigoProveed, VfechaRecepcion, VfechaContable, VrazonSocial, Vimporte, VusuarioRecibe, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.codEmp = vPKcodEmp.Value
                    Item.letra = vPKletra.Value
                    Item.puntoDeVenta = vPKpuntoDeVenta.Value
                    Item.numeroComprobante = vPKnumeroComprobante.Value
                    Item.codigoProveed = vPKcodigoProveed.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TESFACTURASRECIBIDAS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_tesFacturasRecibidas_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TESFACTURASRECIBIDAS
                    NewItem.codEmp = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.letra = IIf(Convert.IsDBNull(dr("letra")), Nothing, dr("letra"))
                    NewItem.puntoDeVenta = IIf(Convert.IsDBNull(dr("puntoDeVenta")), Nothing, dr("puntoDeVenta"))
                    NewItem.numeroComprobante = IIf(Convert.IsDBNull(dr("numeroComprobante")), Nothing, dr("numeroComprobante"))
                    NewItem.codigoProveed = IIf(Convert.IsDBNull(dr("codigoProveed")), Nothing, dr("codigoProveed"))
                    NewItem.fechaRecepcion = IIf(Convert.IsDBNull(dr("fechaRecepcion")), Nothing, dr("fechaRecepcion"))
                    NewItem.fechaContable = IIf(Convert.IsDBNull(dr("fechaContable")), Nothing, dr("fechaContable"))
                    NewItem.razonSocial = IIf(Convert.IsDBNull(dr("razonSocial")), Nothing, dr("razonSocial"))
                    NewItem.importe = IIf(Convert.IsDBNull(dr("importe")), Nothing, dr("importe"))
                    NewItem.usuarioRecibe = IIf(Convert.IsDBNull(dr("usuarioRecibe")), Nothing, dr("usuarioRecibe"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TESFACTURASRECIBIDAS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TESFACTURASRECIBIDAS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TESFACTURASRECIBIDAS) As Boolean

            Try
                _commandText = "_tesFacturasRecibidas_REMOVE"
                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim Vletra As New SQLParameter("@letra", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.letra)
                Dim VpuntoDeVenta As New SQLParameter("@puntoDeVenta", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.puntoDeVenta)
                Dim VnumeroComprobante As New SQLParameter("@numeroComprobante", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.numeroComprobante)
                Dim VcodigoProveed As New SQLParameter("@codigoProveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codigoProveed)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VcodEmp, Vletra, VpuntoDeVenta, VnumeroComprobante, VcodigoProveed, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_tesFacturasRecibidas_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TESFACTURASRECIBIDAS) As Boolean

            Try
                _commandText = "_tesFacturasRecibidas_UPDATE"

                Dim VcodEmp As New SQLParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codEmp)
                Dim Vletra As New SQLParameter("@letra", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.letra)
                Dim VpuntoDeVenta As New SQLParameter("@puntoDeVenta", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.puntoDeVenta)
                Dim VnumeroComprobante As New SQLParameter("@numeroComprobante", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.numeroComprobante)
                Dim VcodigoProveed As New SQLParameter("@codigoProveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.codigoProveed)
                Dim VfechaRecepcion As New SQLParameter("@fechaRecepcion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaRecepcion = Date.minvalue, Nothing, Item.fechaRecepcion))
                Dim VfechaContable As New SQLParameter("@fechaContable", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fechaContable = Date.minvalue, Nothing, Item.fechaContable))
                Dim VrazonSocial As New SQLParameter("@razonSocial", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.razonSocial)
                Dim Vimporte As New SQLParameter("@importe", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.importe)
                Dim VusuarioRecibe As New SQLParameter("@usuarioRecibe", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuarioRecibe)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {VcodEmp, Vletra, VpuntoDeVenta, VnumeroComprobante, VcodigoProveed, VfechaRecepcion, VfechaContable, VrazonSocial, Vimporte, VusuarioRecibe, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TESFACTURASRECIBIDAS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TESFACTURASRECIBIDAS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TESFACTURASRECIBIDAS
        ''' Fecha de Creación  : lunes, 04 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TESFACTURASRECIBIDAS. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const LETRA As String = "LETRA"
            Public Const PUNTODEVENTA As String = "PUNTODEVENTA"
            Public Const NUMEROCOMPROBANTE As String = "NUMEROCOMPROBANTE"
            Public Const CODIGOPROVEED As String = "CODIGOPROVEED"
            Public Const FECHARECEPCION As String = "FECHARECEPCION"
            Public Const FECHACONTABLE As String = "FECHACONTABLE"
            Public Const RAZONSOCIAL As String = "RAZONSOCIAL"
            Public Const IMPORTE As String = "IMPORTE"
            Public Const USUARIORECIBE As String = "USUARIORECIBE"
        End Class ' ColumnNames
    End Class ' TESFACTURASRECIBIDAS

    Public Class USUARIOXSUBRUBRO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Usuario
            artda2_Cod
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.USUARIOXSUBRUBRO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.USUARIOXSUBRUBRO) As Entities.Tables.USUARIOXSUBRUBRO
            Dim result As Boolean

            Try
                _commandText = "_USUARIOXSUBRUBRO_ADD"
                Dim vPKId_Usuario As New SQLParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Id_Usuario)
                Dim vPKartda2_Cod As New SQLParameter("@artda2_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.artda2_Cod)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKId_Usuario, vPKartda2_Cod, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.Id_Usuario = vPKId_Usuario.Value
                    Item.artda2_Cod = vPKartda2_Cod.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.USUARIOXSUBRUBRO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_UsuarioxSubRubro_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.USUARIOXSUBRUBRO
                    NewItem.Id_Usuario = IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario"))
                    NewItem.artda2_Cod = IIf(Convert.IsDBNull(dr("artda2_Cod")), Nothing, dr("artda2_Cod"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "USUARIOXSUBRUBRO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "USUARIOXSUBRUBRO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.USUARIOXSUBRUBRO) As Boolean

            Try
                _commandText = "_UsuarioxSubRubro_REMOVE"
                Dim VId_Usuario As New SQLParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Id_Usuario)
                Dim Vartda2_Cod As New SQLParameter("@artda2_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.artda2_Cod)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VId_Usuario, Vartda2_Cod, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_UsuarioxSubRubro_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.USUARIOXSUBRUBRO) As Boolean

            Try
                _commandText = "_UsuarioxSubRubro_UPDATE"

                Dim VId_Usuario As New SQLParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Id_Usuario)
                Dim Vartda2_Cod As New SQLParameter("@artda2_Cod", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.artda2_Cod)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {VId_Usuario, Vartda2_Cod, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.USUARIOXSUBRUBRO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.USUARIOXSUBRUBRO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla USUARIOXSUBRUBRO
        ''' Fecha de Creación  : viernes, 22 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla USUARIOXSUBRUBRO. </remarks>
        Public Class ColumnNames
            Public Const ID_USUARIO As String = "ID_USUARIO"
            Public Const ARTDA2_COD As String = "ARTDA2_COD"
        End Class ' ColumnNames
    End Class ' USUARIOXSUBRUBRO

    Public Class STKARTICULOMARCA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            articulo_id
            marca1
            marca2
            marca3
            marca4
            marca5
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKARTICULOMARCA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKARTICULOMARCA) As Entities.Tables.STKARTICULOMARCA
            Dim result As Boolean

            Try
                _commandText = "_STKARTICULOMARCA_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKarticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim Vmarca1 As New SqlParameter("@marca1", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA1)
                Dim Vmarca2 As New SqlParameter("@marca2", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA2)
                Dim Vmarca3 As New SqlParameter("@marca3", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA3)
                Dim Vmarca4 As New SqlParameter("@marca4", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA4)
                Dim Vmarca5 As New SqlParameter("@marca5", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA5)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKarticulo_id, Vmarca1, Vmarca2, Vmarca3, Vmarca4, Vmarca5, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.ARTICULO_ID = vPKarticulo_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKARTICULOMARCA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkArticuloMarca_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKARTICULOMARCA
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.MARCA1 = IIf(Convert.IsDBNull(dr("marca1")), Nothing, dr("marca1"))
                    NewItem.MARCA2 = IIf(Convert.IsDBNull(dr("marca2")), Nothing, dr("marca2"))
                    NewItem.MARCA3 = IIf(Convert.IsDBNull(dr("marca3")), Nothing, dr("marca3"))
                    NewItem.MARCA4 = IIf(Convert.IsDBNull(dr("marca4")), Nothing, dr("marca4"))
                    NewItem.MARCA5 = IIf(Convert.IsDBNull(dr("marca5")), Nothing, dr("marca5"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKARTICULOMARCA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKARTICULOMARCA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKARTICULOMARCA) As Boolean

            Try
                _commandText = "_stkArticuloMarca_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Varticulo_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkArticuloMarca_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKARTICULOMARCA) As Boolean

            Try
                _commandText = "_stkArticuloMarca_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim Vmarca1 As New SqlParameter("@marca1", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA1)
                Dim Vmarca2 As New SqlParameter("@marca2", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA2)
                Dim Vmarca3 As New SqlParameter("@marca3", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA3)
                Dim Vmarca4 As New SqlParameter("@marca4", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA4)
                Dim Vmarca5 As New SqlParameter("@marca5", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA5)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Varticulo_id, Vmarca1, Vmarca2, Vmarca3, Vmarca4, Vmarca5, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKARTICULOMARCA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKARTICULOMARCA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKARTICULOMARCA
        ''' Fecha de Creación  : sábado, 20 de febrero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKARTICULOMARCA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const MARCA1 As String = "MARCA1"
            Public Const MARCA2 As String = "MARCA2"
            Public Const MARCA3 As String = "MARCA3"
            Public Const MARCA4 As String = "MARCA4"
            Public Const MARCA5 As String = "MARCA5"
        End Class ' ColumnNames
    End Class ' STKARTICULOMARCA

    Public Class COMPEDIDOCOTIZACIONPROVEEDDIRECTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            NroCotizacion
            requerimiento_id
            nroItem
            articulo_id
            proveed_id
            UniMed
            cantidad
            fecha
            usuario
            Obs
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMPEDIDOCOTIZACIONPROVEEDDIRECTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMPEDIDOCOTIZACIONPROVEEDDIRECTO) As Entities.Tables.COMPEDIDOCOTIZACIONPROVEEDDIRECTO
            Dim result As Boolean

            Try
                _commandText = "_COMPEDIDOCOTIZACIONPROVEEDDIRECTO_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKNroCotizacion As New SqlParameter("@NroCotizacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROCOTIZACION)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim VUniMed As New SqlParameter("@UniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VObs As New SqlParameter("@Obs", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKNroCotizacion, Vrequerimiento_id, VnroItem, Varticulo_id, Vproveed_id, VUniMed, Vcantidad, Vfecha, Vusuario, VObs, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.NROCOTIZACION = vPKNroCotizacion.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMPEDIDOCOTIZACIONPROVEEDDIRECTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comPedidoCotizacionProveedDirecto_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMPEDIDOCOTIZACIONPROVEEDDIRECTO
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.NROCOTIZACION = IIf(Convert.IsDBNull(dr("NroCotizacion")), Nothing, dr("NroCotizacion"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.PROVEED_ID = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("UniMed")), Nothing, dr("UniMed"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.FECHA = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.USUARIO = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("Obs")), Nothing, dr("Obs"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMPEDIDOCOTIZACIONPROVEEDDIRECTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMPEDIDOCOTIZACIONPROVEEDDIRECTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMPEDIDOCOTIZACIONPROVEEDDIRECTO) As Boolean

            Try
                _commandText = "_comPedidoCotizacionProveedDirecto_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VNroCotizacion As New SqlParameter("@NroCotizacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROCOTIZACION)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, VNroCotizacion, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comPedidoCotizacionProveedDirecto_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMPEDIDOCOTIZACIONPROVEEDDIRECTO) As Boolean

            Try
                _commandText = "_comPedidoCotizacionProveedDirecto_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VNroCotizacion As New SqlParameter("@NroCotizacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROCOTIZACION)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim VUniMed As New SqlParameter("@UniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VObs As New SqlParameter("@Obs", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, VNroCotizacion, Vrequerimiento_id, VnroItem, Varticulo_id, Vproveed_id, VUniMed, Vcantidad, Vfecha, Vusuario, VObs, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMPEDIDOCOTIZACIONPROVEEDDIRECTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMPEDIDOCOTIZACIONPROVEEDDIRECTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMPEDIDOCOTIZACIONPROVEEDDIRECTO
        ''' Fecha de Creación  : lunes, 22 de febrero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMPEDIDOCOTIZACIONPROVEEDDIRECTO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const NROCOTIZACION As String = "NROCOTIZACION"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const FECHA As String = "FECHA"
            Public Const USUARIO As String = "USUARIO"
            Public Const OBS As String = "OBS"
        End Class ' ColumnNames
    End Class ' COMPEDIDOCOTIZACIONPROVEEDDIRECTO

    Public Class STK_RECLAMODEMERCADERIA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            ID
            plantillaID
            sector_id
            deposito_id
            numFactura
            numRemito
            articulo_id
            cantidadFaltante
            cantidadRecibidaDeMas
            cantidadRecibidaPorError
            anotacion
            usuario_id
            fecha
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STK_RECLAMODEMERCADERIA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STK_RECLAMODEMERCADERIA) As Entities.Tables.STK_RECLAMODEMERCADERIA
            Dim result As Boolean

            Try
                _commandText = "_STK_RECLAMODEMERCADERIA_ADD"
                Dim vPKID As New SqlParameter("@ID", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VplantillaID As New SqlParameter("@plantillaID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.plantillaID)
                Dim Vsector_id As New SqlParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sector_id)
                Dim Vdeposito_id As New SqlParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.deposito_id)
                Dim VnumFactura As New SqlParameter("@numFactura", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.numFactura)
                Dim VnumRemito As New SqlParameter("@numRemito", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.numRemito)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.articulo_id)
                Dim VcantidadFaltante As New SqlParameter("@cantidadFaltante", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidadFaltante)
                Dim VcantidadRecibidaDeMas As New SqlParameter("@cantidadRecibidaDeMas", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidadRecibidaDeMas)
                Dim VcantidadRecibidaPorError As New SqlParameter("@cantidadRecibidaPorError", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidadRecibidaPorError)
                Dim Vanotacion As New SqlParameter("@anotacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.anotacion)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario_id)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.MinValue, Nothing, Item.fecha))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKID, VplantillaID, Vsector_id, Vdeposito_id, VnumFactura, VnumRemito, Varticulo_id, VcantidadFaltante, VcantidadRecibidaDeMas, VcantidadRecibidaPorError, Vanotacion, Vusuario_id, Vfecha, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID = vPKID.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STK_RECLAMODEMERCADERIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stk_ReclamoDeMercaderia_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STK_RECLAMODEMERCADERIA
                    NewItem.ID = IIf(Convert.IsDBNull(dr("ID")), Nothing, dr("ID"))
                    NewItem.plantillaID = IIf(Convert.IsDBNull(dr("plantillaID")), Nothing, dr("plantillaID"))
                    NewItem.sector_id = IIf(Convert.IsDBNull(dr("sector_id")), Nothing, dr("sector_id"))
                    NewItem.deposito_id = IIf(Convert.IsDBNull(dr("deposito_id")), Nothing, dr("deposito_id"))
                    NewItem.numFactura = IIf(Convert.IsDBNull(dr("numFactura")), Nothing, dr("numFactura"))
                    NewItem.numRemito = IIf(Convert.IsDBNull(dr("numRemito")), Nothing, dr("numRemito"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.cantidadFaltante = IIf(Convert.IsDBNull(dr("cantidadFaltante")), Nothing, dr("cantidadFaltante"))
                    NewItem.cantidadRecibidaDeMas = IIf(Convert.IsDBNull(dr("cantidadRecibidaDeMas")), Nothing, dr("cantidadRecibidaDeMas"))
                    NewItem.cantidadRecibidaPorError = IIf(Convert.IsDBNull(dr("cantidadRecibidaPorError")), Nothing, dr("cantidadRecibidaPorError"))
                    NewItem.anotacion = IIf(Convert.IsDBNull(dr("anotacion")), Nothing, dr("anotacion"))
                    NewItem.usuario_id = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STK_RECLAMODEMERCADERIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STK_RECLAMODEMERCADERIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STK_RECLAMODEMERCADERIA) As Boolean

            Try
                _commandText = "_stk_ReclamoDeMercaderia_REMOVE"
                Dim VID As New SqlParameter("@ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VID, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stk_ReclamoDeMercaderia_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STK_RECLAMODEMERCADERIA) As Boolean

            Try
                _commandText = "_stk_ReclamoDeMercaderia_UPDATE"

                Dim VID As New SqlParameter("@ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)
                Dim VplantillaID As New SqlParameter("@plantillaID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.plantillaID)
                Dim Vsector_id As New SqlParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sector_id)
                Dim Vdeposito_id As New SqlParameter("@deposito_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.deposito_id)
                Dim VnumFactura As New SqlParameter("@numFactura", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.numFactura)
                Dim VnumRemito As New SqlParameter("@numRemito", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.numRemito)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.articulo_id)
                Dim VcantidadFaltante As New SqlParameter("@cantidadFaltante", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidadFaltante)
                Dim VcantidadRecibidaDeMas As New SqlParameter("@cantidadRecibidaDeMas", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidadRecibidaDeMas)
                Dim VcantidadRecibidaPorError As New SqlParameter("@cantidadRecibidaPorError", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.cantidadRecibidaPorError)
                Dim Vanotacion As New SqlParameter("@anotacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.anotacion)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.usuario_id)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.fecha = Date.MinValue, Nothing, Item.fecha))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VID, VplantillaID, Vsector_id, Vdeposito_id, VnumFactura, VnumRemito, Varticulo_id, VcantidadFaltante, VcantidadRecibidaDeMas, VcantidadRecibidaPorError, Vanotacion, Vusuario_id, Vfecha, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STK_RECLAMODEMERCADERIA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STK_RECLAMODEMERCADERIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STK_RECLAMODEMERCADERIA
        ''' Fecha de Creación  : martes, 8 de marzo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla STK_RECLAMODEMERCADERIA. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const PLANTILLAID As String = "PLANTILLAID"
            Public Const SECTOR_ID As String = "SECTOR_ID"
            Public Const DEPOSITO_ID As String = "DEPOSITO_ID"
            Public Const NUMFACTURA As String = "NUMFACTURA"
            Public Const NUMREMITO As String = "NUMREMITO"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const CANTIDADFALTANTE As String = "CANTIDADFALTANTE"
            Public Const CANTIDADRECIBIDADEMAS As String = "CANTIDADRECIBIDADEMAS"
            Public Const CANTIDADRECIBIDAPORERROR As String = "CANTIDADRECIBIDAPORERROR"
            Public Const ANOTACION As String = "ANOTACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHA As String = "FECHA"
        End Class ' ColumnNames
    End Class ' STK_RECLAMODEMERCADERIA

    Public Class COMARTICULOSPROVISORIOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id
            CodProvisorio
            codEmp
            requerimiento_id
            nroItem
            pendienteEnBejerman
            descripcion
            presentacion
            uniMed
            marca
            embalaje
            cantidad
            usuario_id
            usuario_mail
            sub_Rubro
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMARTICULOSPROVISORIOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMARTICULOSPROVISORIOS) As Entities.Tables.COMARTICULOSPROVISORIOS
            Dim result As Boolean

            Try
                _commandText = "_COMARTICULOSPROVISORIOS_ADD"
                Dim vPKId As New SqlParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VCodProvisorio As New SqlParameter("@CodProvisorio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODPROVISORIO)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VpendienteEnBejerman As New SqlParameter("@pendienteEnBejerman", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PENDIENTEENBEJERMAN)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vpresentacion As New SqlParameter("@presentacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRESENTACION)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim Vembalaje As New SqlParameter("@embalaje", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMBALAJE)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vusuario_mail As New SqlParameter("@usuario_mail", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_MAIL)
                Dim Vsub_Rubro As New SqlParameter("@sub_Rubro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUB_RUBRO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId, VCodProvisorio, VcodEmp, Vrequerimiento_id, VnroItem, VpendienteEnBejerman, Vdescripcion, Vpresentacion, VuniMed, Vmarca, Vembalaje, Vcantidad, Vusuario_id, Vusuario_mail, Vsub_Rubro, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID = vPKId.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMARTICULOSPROVISORIOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comArticulosProvisorios_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMARTICULOSPROVISORIOS
                    NewItem.ID = IIf(Convert.IsDBNull(dr("Id")), Nothing, dr("Id"))
                    NewItem.CODPROVISORIO = IIf(Convert.IsDBNull(dr("CodProvisorio")), Nothing, dr("CodProvisorio"))
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.PENDIENTEENBEJERMAN = IIf(Convert.IsDBNull(dr("pendienteEnBejerman")), Nothing, dr("pendienteEnBejerman"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.PRESENTACION = IIf(Convert.IsDBNull(dr("presentacion")), Nothing, dr("presentacion"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.MARCA = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    NewItem.EMBALAJE = IIf(Convert.IsDBNull(dr("embalaje")), Nothing, dr("embalaje"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.USUARIO_MAIL = IIf(Convert.IsDBNull(dr("usuario_mail")), Nothing, dr("usuario_mail"))
                    NewItem.SUB_RUBRO = IIf(Convert.IsDBNull(dr("sub_Rubro")), Nothing, dr("sub_Rubro"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMARTICULOSPROVISORIOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMARTICULOSPROVISORIOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMARTICULOSPROVISORIOS) As Boolean

            Try
                _commandText = "_comArticulosProvisorios_REMOVE"
                Dim VId As New SqlParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comArticulosProvisorios_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMARTICULOSPROVISORIOS) As Boolean

            Try
                _commandText = "_comArticulosProvisorios_UPDATE"

                Dim VId As New SqlParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)
                Dim VCodProvisorio As New SqlParameter("@CodProvisorio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODPROVISORIO)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VpendienteEnBejerman As New SqlParameter("@pendienteEnBejerman", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PENDIENTEENBEJERMAN)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vpresentacion As New SqlParameter("@presentacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRESENTACION)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim Vembalaje As New SqlParameter("@embalaje", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMBALAJE)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vusuario_mail As New SqlParameter("@usuario_mail", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_MAIL)
                Dim Vsub_Rubro As New SqlParameter("@sub_Rubro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUB_RUBRO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId, VCodProvisorio, VcodEmp, Vrequerimiento_id, VnroItem, VpendienteEnBejerman, Vdescripcion, Vpresentacion, VuniMed, Vmarca, Vembalaje, Vcantidad, Vusuario_id, Vusuario_mail, Vsub_Rubro, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMARTICULOSPROVISORIOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMARTICULOSPROVISORIOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMARTICULOSPROVISORIOS
        ''' Fecha de Creación  : lunes, 24 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMARTICULOSPROVISORIOS. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const CODPROVISORIO As String = "CODPROVISORIO"
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const PENDIENTEENBEJERMAN As String = "PENDIENTEENBEJERMAN"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const PRESENTACION As String = "PRESENTACION"
            Public Const UNIMED As String = "UNIMED"
            Public Const MARCA As String = "MARCA"
            Public Const EMBALAJE As String = "EMBALAJE"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const USUARIO_MAIL As String = "USUARIO_MAIL"
            Public Const SUB_RUBRO As String = "SUB_RUBRO"
        End Class ' ColumnNames
    End Class ' COMARTICULOSPROVISORIOS

    Public Class COMEQUIVALENCIAARTICULOSPROVEED
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            articulo_id
            proveed_id
            articulo_proveed
            descrip_articulo_proveed
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMEQUIVALENCIAARTICULOSPROVEED)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMEQUIVALENCIAARTICULOSPROVEED) As Entities.Tables.COMEQUIVALENCIAARTICULOSPROVEED
            Dim result As Boolean

            Try
                _commandText = "_COMEQUIVALENCIAARTICULOSPROVEED_ADD"
                Dim vPKarticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim vPKproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim Varticulo_proveed As New SqlParameter("@articulo_proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_PROVEED)
                Dim Vdescrip_articulo_proveed As New SqlParameter("@descrip_articulo_proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIP_ARTICULO_PROVEED)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKarticulo_id, vPKproveed_id, Varticulo_proveed, Vdescrip_articulo_proveed, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ARTICULO_ID = vPKarticulo_id.Value
                    Item.PROVEED_ID = vPKproveed_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMEQUIVALENCIAARTICULOSPROVEED)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comEquivalenciaArticulosProveed_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMEQUIVALENCIAARTICULOSPROVEED
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.PROVEED_ID = IIf(Convert.IsDBNull(dr("proveed_id")), Nothing, dr("proveed_id"))
                    NewItem.ARTICULO_PROVEED = IIf(Convert.IsDBNull(dr("articulo_proveed")), Nothing, dr("articulo_proveed"))
                    NewItem.DESCRIP_ARTICULO_PROVEED = IIf(Convert.IsDBNull(dr("descrip_articulo_proveed")), Nothing, dr("descrip_articulo_proveed"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMEQUIVALENCIAARTICULOSPROVEED")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMEQUIVALENCIAARTICULOSPROVEED")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMEQUIVALENCIAARTICULOSPROVEED) As Boolean

            Try
                _commandText = "_comEquivalenciaArticulosProveed_REMOVE"
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Varticulo_id, Vproveed_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comEquivalenciaArticulosProveed_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMEQUIVALENCIAARTICULOSPROVEED) As Boolean

            Try
                _commandText = "_comEquivalenciaArticulosProveed_UPDATE"

                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim Vproveed_id As New SqlParameter("@proveed_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROVEED_ID)
                Dim Varticulo_proveed As New SqlParameter("@articulo_proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_PROVEED)
                Dim Vdescrip_articulo_proveed As New SqlParameter("@descrip_articulo_proveed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIP_ARTICULO_PROVEED)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Varticulo_id, Vproveed_id, Varticulo_proveed, Vdescrip_articulo_proveed, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMEQUIVALENCIAARTICULOSPROVEED)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMEQUIVALENCIAARTICULOSPROVEED
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMEQUIVALENCIAARTICULOSPROVEED
        ''' Fecha de Creación  : lunes, 25 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMEQUIVALENCIAARTICULOSPROVEED. </remarks>
        Public Class ColumnNames
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const PROVEED_ID As String = "PROVEED_ID"
            Public Const ARTICULO_PROVEED As String = "ARTICULO_PROVEED"
            Public Const DESCRIP_ARTICULO_PROVEED As String = "DESCRIP_ARTICULO_PROVEED"
        End Class ' ColumnNames
    End Class ' COMEQUIVALENCIAARTICULOSPROVEED

    Public Class COMUSUARIOAUTORIZAREQUERIMIENTOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Usuario
            sectorRequerimiento
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMUSUARIOAUTORIZAREQUERIMIENTOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        Public Overridable Function Items() As List(Of Entities.Tables.COMUSUARIOAUTORIZAREQUERIMIENTOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comUsuarioAutorizaRequerimientos_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMUSUARIOAUTORIZAREQUERIMIENTOS
                    NewItem.ID_USUARIO = IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario"))
                    NewItem.SECTORREQUERIMIENTO = IIf(Convert.IsDBNull(dr("sectorRequerimiento")), Nothing, dr("sectorRequerimiento"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMUSUARIOAUTORIZAREQUERIMIENTOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMUSUARIOAUTORIZAREQUERIMIENTOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMUSUARIOAUTORIZAREQUERIMIENTOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMUSUARIOAUTORIZAREQUERIMIENTOS
        ''' Fecha de Creación  : miércoles, 11 de mayo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMUSUARIOAUTORIZAREQUERIMIENTOS. </remarks>
        Public Class ColumnNames
            Public Const ID_USUARIO As String = "ID_USUARIO"
            Public Const SECTORREQUERIMIENTO As String = "SECTORREQUERIMIENTO"
        End Class ' ColumnNames
    End Class ' COMUSUARIOAUTORIZAREQUERIMIENTOS

    Public Class COMCUENTAUSUARIO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Usuario
            agr_codigo
            com_valor
            cta_nrocta
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMCUENTAUSUARIO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMCUENTAUSUARIO) As Entities.Tables.COMCUENTAUSUARIO
            Dim result As Boolean

            Try
                _commandText = "_COMCUENTAUSUARIO_ADD"
                Dim vPKId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim vPKagr_codigo As New SqlParameter("@agr_codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.AGR_CODIGO)
                Dim vPKcom_valor As New SqlParameter("@com_valor", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COM_VALOR)
                Dim vPKcta_nrocta As New SqlParameter("@cta_nrocta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CTA_NROCTA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId_Usuario, vPKagr_codigo, vPKcom_valor, vPKcta_nrocta, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_USUARIO = vPKId_Usuario.Value
                    Item.AGR_CODIGO = vPKagr_codigo.Value
                    Item.COM_VALOR = vPKcom_valor.Value
                    Item.CTA_NROCTA = vPKcta_nrocta.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMCUENTAUSUARIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comCuentaUsuario_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMCUENTAUSUARIO
                    NewItem.ID_USUARIO = IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario"))
                    NewItem.AGR_CODIGO = IIf(Convert.IsDBNull(dr("agr_codigo")), Nothing, dr("agr_codigo"))
                    NewItem.COM_VALOR = IIf(Convert.IsDBNull(dr("com_valor")), Nothing, dr("com_valor"))
                    NewItem.CTA_NROCTA = IIf(Convert.IsDBNull(dr("cta_nrocta")), Nothing, dr("cta_nrocta"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMCUENTAUSUARIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMCUENTAUSUARIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMCUENTAUSUARIO) As Boolean

            Try
                _commandText = "_comCuentaUsuario_REMOVE"
                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim Vagr_codigo As New SqlParameter("@agr_codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.AGR_CODIGO)
                Dim Vcom_valor As New SqlParameter("@com_valor", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COM_VALOR)
                Dim Vcta_nrocta As New SqlParameter("@cta_nrocta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CTA_NROCTA)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId_Usuario, Vagr_codigo, Vcom_valor, Vcta_nrocta, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comCuentaUsuario_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMCUENTAUSUARIO) As Boolean

            Try
                _commandText = "_comCuentaUsuario_UPDATE"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim Vagr_codigo As New SqlParameter("@agr_codigo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.AGR_CODIGO)
                Dim Vcom_valor As New SqlParameter("@com_valor", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COM_VALOR)
                Dim Vcta_nrocta As New SqlParameter("@cta_nrocta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CTA_NROCTA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_Usuario, Vagr_codigo, Vcom_valor, Vcta_nrocta, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMCUENTAUSUARIO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMCUENTAUSUARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMCUENTAUSUARIO
        ''' Fecha de Creación  : lunes, 25 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMCUENTAUSUARIO. </remarks>
        Public Class ColumnNames
            Public Const ID_USUARIO As String = "ID_USUARIO"
            Public Const AGR_CODIGO As String = "AGR_CODIGO"
            Public Const COM_VALOR As String = "COM_VALOR"
            Public Const CTA_NROCTA As String = "CTA_NROCTA"
        End Class ' ColumnNames
    End Class ' COMCUENTAUSUARIO

    Public Class COMLUGARENTREGA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            lugar_id
            codEmp
            descripcion
            inactivo
            Obs
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMLUGARENTREGA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMLUGARENTREGA) As Entities.Tables.COMLUGARENTREGA
            Dim result As Boolean

            Try
                _commandText = "_COMLUGARENTREGA_ADD"
                Dim vPKlugar_id As New SqlParameter("@lugar_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vinactivo As New SqlParameter("@inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim VObs As New SqlParameter("@Obs", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKlugar_id, vPKcodEmp, Vdescripcion, Vinactivo, VObs, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.LUGAR_ID = vPKlugar_id.Value
                    Item.CODEMP = vPKcodEmp.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMLUGARENTREGA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comLugarEntrega_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMLUGARENTREGA
                    NewItem.LUGAR_ID = IIf(Convert.IsDBNull(dr("lugar_id")), Nothing, dr("lugar_id"))
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.INACTIVO = IIf(Convert.IsDBNull(dr("inactivo")), Nothing, dr("inactivo"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("Obs")), Nothing, dr("Obs"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMLUGARENTREGA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMLUGARENTREGA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMLUGARENTREGA) As Boolean

            Try
                _commandText = "_comLugarEntrega_REMOVE"
                Dim Vlugar_id As New SqlParameter("@lugar_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LUGAR_ID)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vlugar_id, VcodEmp, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comLugarEntrega_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMLUGARENTREGA) As Boolean

            Try
                _commandText = "_comLugarEntrega_UPDATE"

                Dim Vlugar_id As New SqlParameter("@lugar_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LUGAR_ID)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vinactivo As New SqlParameter("@inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim VObs As New SqlParameter("@Obs", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vlugar_id, VcodEmp, Vdescripcion, Vinactivo, VObs, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMLUGARENTREGA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMLUGARENTREGA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMLUGARENTREGA
        ''' Fecha de Creación  : martes, 18 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMLUGARENTREGA. </remarks>
        Public Class ColumnNames
            Public Const LUGAR_ID As String = "LUGAR_ID"
            Public Const CODEMP As String = "CODEMP"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const INACTIVO As String = "INACTIVO"
            Public Const OBS As String = "OBS"
        End Class ' ColumnNames
    End Class ' COMLUGARENTREGA

    Public Class STK_CONTROLLIBRERIA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            Peridodo
            Anio
            articulo_id
            cant_recibida
            cant_solicitada
            usuario_id
            fecha_cierre
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STK_CONTROLLIBRERIA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STK_CONTROLLIBRERIA) As Entities.Tables.STK_CONTROLLIBRERIA
            Dim result As Boolean

            Try
                _commandText = "_STK_CONTROLLIBRERIA_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKPeridodo As New SqlParameter("@Peridodo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PERIDODO)
                Dim vPKAnio As New SqlParameter("@Anio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ANIO)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim Vcant_recibida As New SqlParameter("@cant_recibida", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANT_RECIBIDA)
                Dim Vcant_solicitada As New SqlParameter("@cant_solicitada", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANT_SOLICITADA)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vfecha_cierre As New SqlParameter("@fecha_cierre", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA_CIERRE = Date.MinValue, Nothing, Item.FECHA_CIERRE))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKPeridodo, vPKAnio, Varticulo_id, Vcant_recibida, Vcant_solicitada, Vusuario_id, Vfecha_cierre, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.PERIDODO = vPKPeridodo.Value
                    Item.ANIO = vPKAnio.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STK_CONTROLLIBRERIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stk_ControlLibreria_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STK_CONTROLLIBRERIA
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.PERIDODO = IIf(Convert.IsDBNull(dr("Peridodo")), Nothing, dr("Peridodo"))
                    NewItem.ANIO = IIf(Convert.IsDBNull(dr("Anio")), Nothing, dr("Anio"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.CANT_RECIBIDA = IIf(Convert.IsDBNull(dr("cant_recibida")), Nothing, dr("cant_recibida"))
                    NewItem.CANT_SOLICITADA = IIf(Convert.IsDBNull(dr("cant_solicitada")), Nothing, dr("cant_solicitada"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHA_CIERRE = IIf(Convert.IsDBNull(dr("fecha_cierre")), Nothing, dr("fecha_cierre"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STK_CONTROLLIBRERIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STK_CONTROLLIBRERIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STK_CONTROLLIBRERIA) As Boolean

            Try
                _commandText = "_stk_ControlLibreria_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VPeridodo As New SqlParameter("@Peridodo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PERIDODO)
                Dim VAnio As New SqlParameter("@Anio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ANIO)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, VPeridodo, VAnio, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stk_ControlLibreria_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STK_CONTROLLIBRERIA) As Boolean

            Try
                _commandText = "_stk_ControlLibreria_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VPeridodo As New SqlParameter("@Peridodo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PERIDODO)
                Dim VAnio As New SqlParameter("@Anio", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ANIO)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim Vcant_recibida As New SqlParameter("@cant_recibida", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANT_RECIBIDA)
                Dim Vcant_solicitada As New SqlParameter("@cant_solicitada", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANT_SOLICITADA)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vfecha_cierre As New SqlParameter("@fecha_cierre", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA_CIERRE = Date.MinValue, Nothing, Item.FECHA_CIERRE))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, VPeridodo, VAnio, Varticulo_id, Vcant_recibida, Vcant_solicitada, Vusuario_id, Vfecha_cierre, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STK_CONTROLLIBRERIA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STK_CONTROLLIBRERIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STK_CONTROLLIBRERIA
        ''' Fecha de Creación  : viernes, 28 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla STK_CONTROLLIBRERIA. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const PERIDODO As String = "PERIDODO"
            Public Const ANIO As String = "ANIO"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const CANT_RECIBIDA As String = "CANT_RECIBIDA"
            Public Const CANT_SOLICITADA As String = "CANT_SOLICITADA"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHA_CIERRE As String = "FECHA_CIERRE"
        End Class ' ColumnNames
    End Class ' STK_CONTROLLIBRERIA

    Public Class EVENTOUSUARIO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Usuario
            Evento_id
            Fecha
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.EVENTOUSUARIO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.EVENTOUSUARIO) As Entities.Tables.EVENTOUSUARIO
            Dim result As Boolean

            Try
                _commandText = "_EVENTOUSUARIO_ADD"
                Dim vPKId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim vPKEvento_id As New SqlParameter("@Evento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVENTO_ID)
                Dim VFecha As New SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId_Usuario, vPKEvento_id, VFecha, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_USUARIO = vPKId_Usuario.Value
                    Item.EVENTO_ID = vPKEvento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.EVENTOUSUARIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EventoUsuario_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.EVENTOUSUARIO
                    NewItem.ID_USUARIO = IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario"))
                    NewItem.EVENTO_ID = IIf(Convert.IsDBNull(dr("Evento_id")), Nothing, dr("Evento_id"))
                    NewItem.FECHA = IIf(Convert.IsDBNull(dr("Fecha")), Nothing, dr("Fecha"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EVENTOUSUARIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EVENTOUSUARIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.EVENTOUSUARIO) As Boolean

            Try
                _commandText = "_EventoUsuario_REMOVE"
                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim VEvento_id As New SqlParameter("@Evento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId_Usuario, VEvento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EventoUsuario_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.EVENTOUSUARIO) As Boolean

            Try
                _commandText = "_EventoUsuario_UPDATE"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim VEvento_id As New SqlParameter("@Evento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVENTO_ID)
                Dim VFecha As New SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_Usuario, VEvento_id, VFecha, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.EVENTOUSUARIO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.EVENTOUSUARIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EVENTOUSUARIO
        ''' Fecha de Creación  : miércoles, 28 de diciembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EVENTOUSUARIO. </remarks>
        Public Class ColumnNames
            Public Const ID_USUARIO As String = "ID_USUARIO"
            Public Const EVENTO_ID As String = "EVENTO_ID"
            Public Const FECHA As String = "FECHA"
        End Class ' ColumnNames
    End Class ' EVENTOUSUARIO

    Public Class USR_ARTICULOSUBCUENTA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            subCuenta
            Descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.USR_ARTICULOSUBCUENTA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SBDAEGESCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SBDAEGES").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.USR_ARTICULOSUBCUENTA) As Entities.Tables.USR_ARTICULOSUBCUENTA
            Dim result As Boolean

            Try
                _commandText = "_USR_ARTICULOSUBCUENTA_ADD"
                Dim vPKsubCuenta As New SqlParameter("@subCuenta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUBCUENTA)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKsubCuenta, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.SUBCUENTA = vPKsubCuenta.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.USR_ARTICULOSUBCUENTA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_USR_ArticuloSubCuenta_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.USR_ARTICULOSUBCUENTA
                    NewItem.SUBCUENTA = IIf(Convert.IsDBNull(dr("subCuenta")), Nothing, dr("subCuenta"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "USR_ARTICULOSUBCUENTA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "USR_ARTICULOSUBCUENTA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.USR_ARTICULOSUBCUENTA) As Boolean

            Try
                _commandText = "_USR_ArticuloSubCuenta_REMOVE"
                Dim VsubCuenta As New SqlParameter("@subCuenta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUBCUENTA)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VsubCuenta, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_USR_ArticuloSubCuenta_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.USR_ARTICULOSUBCUENTA) As Boolean

            Try
                _commandText = "_USR_ArticuloSubCuenta_UPDATE"

                Dim VsubCuenta As New SqlParameter("@subCuenta", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUBCUENTA)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VsubCuenta, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.USR_ARTICULOSUBCUENTA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.USR_ARTICULOSUBCUENTA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla USR_ARTICULOSUBCUENTA
        ''' Fecha de Creación  : miércoles, 18 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla USR_ARTICULOSUBCUENTA. </remarks>
        Public Class ColumnNames
            Public Const SUBCUENTA As String = "SUBCUENTA"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' USR_ARTICULOSUBCUENTA

    Public Class COMREQUERIMIENTOINTERNO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            requerimiento_id
            fecha
            sectorRequerimiento_id
            estado_id
            obs
            usuario
            usuarioAutoriza
            fechaAutorizacion
            motivoAnulacion
            pedidoDiario
            sectorEntrega_id
            fechaFinalizacion
            motivoFinalizacion
            usuarioFinaliza
            depositoOrigen_id
            sectorDepositoOrigen_id
            depositoDestino_id
            sectorDepositoDestino_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMREQUERIMIENTOINTERNO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMREQUERIMIENTOINTERNO) As Entities.Tables.COMREQUERIMIENTOINTERNO
            Dim result As Boolean

            Try
                _commandText = "_COMREQUERIMIENTOINTERNO_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
                Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
                Dim VmotivoAnulacion As New SqlParameter("@motivoAnulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOANULACION)
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
                Dim VsectorEntrega_id As New SqlParameter("@sectorEntrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORENTREGA_ID)
                Dim VfechaFinalizacion As New SqlParameter("@fechaFinalizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAFINALIZACION = Date.MinValue, Nothing, Item.FECHAFINALIZACION))
                Dim VmotivoFinalizacion As New SqlParameter("@motivoFinalizacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOFINALIZACION)
                Dim VusuarioFinaliza As New SqlParameter("@usuarioFinaliza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOFINALIZA)
                Dim VdepositoOrigen_id As New SqlParameter("@depositoOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITOORIGEN_ID)
                Dim VsectorDepositoOrigen_id As New SqlParameter("@sectorDepositoOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORDEPOSITOORIGEN_ID)
                Dim VdepositoDestino_id As New SqlParameter("@depositoDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITODESTINO_ID)
                Dim VsectorDepositoDestino_id As New SqlParameter("@sectorDepositoDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORDEPOSITODESTINO_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKrequerimiento_id, Vfecha, VsectorRequerimiento_id, Vestado_id, Vobs, Vusuario, VusuarioAutoriza, VfechaAutorizacion, VmotivoAnulacion, VpedidoDiario, VsectorEntrega_id, VfechaFinalizacion, VmotivoFinalizacion, VusuarioFinaliza, VdepositoOrigen_id, VsectorDepositoOrigen_id, VdepositoDestino_id, VsectorDepositoDestino_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.REQUERIMIENTO_ID = vPKrequerimiento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMREQUERIMIENTOINTERNO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comRequerimientoInterno_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMREQUERIMIENTOINTERNO
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.FECHA = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.SECTORREQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("sectorRequerimiento_id")), Nothing, dr("sectorRequerimiento_id"))
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.OBS = IIf(Convert.IsDBNull(dr("obs")), Nothing, dr("obs"))
                    NewItem.USUARIO = IIf(Convert.IsDBNull(dr("usuario")), Nothing, dr("usuario"))
                    NewItem.USUARIOAUTORIZA = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.FECHAAUTORIZACION = IIf(Convert.IsDBNull(dr("fechaAutorizacion")), Nothing, dr("fechaAutorizacion"))
                    NewItem.MOTIVOANULACION = IIf(Convert.IsDBNull(dr("motivoAnulacion")), Nothing, dr("motivoAnulacion"))
                    NewItem.PEDIDODIARIO = IIf(Convert.IsDBNull(dr("pedidoDiario")), Nothing, dr("pedidoDiario"))
                    NewItem.SECTORENTREGA_ID = IIf(Convert.IsDBNull(dr("sectorEntrega_id")), Nothing, dr("sectorEntrega_id"))
                    NewItem.FECHAFINALIZACION = IIf(Convert.IsDBNull(dr("fechaFinalizacion")), Nothing, dr("fechaFinalizacion"))
                    NewItem.MOTIVOFINALIZACION = IIf(Convert.IsDBNull(dr("motivoFinalizacion")), Nothing, dr("motivoFinalizacion"))
                    NewItem.USUARIOFINALIZA = IIf(Convert.IsDBNull(dr("usuarioFinaliza")), Nothing, dr("usuarioFinaliza"))
                    NewItem.DEPOSITOORIGEN_ID = IIf(Convert.IsDBNull(dr("depositoOrigen_id")), Nothing, dr("depositoOrigen_id"))
                    NewItem.SECTORDEPOSITOORIGEN_ID = IIf(Convert.IsDBNull(dr("sectorDepositoOrigen_id")), Nothing, dr("sectorDepositoOrigen_id"))
                    NewItem.DEPOSITODESTINO_ID = IIf(Convert.IsDBNull(dr("depositoDestino_id")), Nothing, dr("depositoDestino_id"))
                    NewItem.SECTORDEPOSITODESTINO_ID = IIf(Convert.IsDBNull(dr("sectorDepositoDestino_id")), Nothing, dr("sectorDepositoDestino_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOINTERNO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOINTERNO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMREQUERIMIENTOINTERNO) As Boolean

            Try
                _commandText = "_comRequerimientoInterno_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comRequerimientoInterno_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMREQUERIMIENTOINTERNO) As Boolean

            Try
                _commandText = "_comRequerimientoInterno_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim VsectorRequerimiento_id As New SqlParameter("@sectorRequerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORREQUERIMIENTO_ID)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim Vobs As New SqlParameter("@obs", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBS)
                Dim Vusuario As New SqlParameter("@usuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO)
                Dim VusuarioAutoriza As New SqlParameter("@usuarioAutoriza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA)
                Dim VfechaAutorizacion As New SqlParameter("@fechaAutorizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZACION = Date.MinValue, Nothing, Item.FECHAAUTORIZACION))
                Dim VmotivoAnulacion As New SqlParameter("@motivoAnulacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOANULACION)
                Dim VpedidoDiario As New SqlParameter("@pedidoDiario", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIDODIARIO)
                Dim VsectorEntrega_id As New SqlParameter("@sectorEntrega_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORENTREGA_ID)
                Dim VfechaFinalizacion As New SqlParameter("@fechaFinalizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAFINALIZACION = Date.MinValue, Nothing, Item.FECHAFINALIZACION))
                Dim VmotivoFinalizacion As New SqlParameter("@motivoFinalizacion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOFINALIZACION)
                Dim VusuarioFinaliza As New SqlParameter("@usuarioFinaliza", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOFINALIZA)
                Dim VdepositoOrigen_id As New SqlParameter("@depositoOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITOORIGEN_ID)
                Dim VsectorDepositoOrigen_id As New SqlParameter("@sectorDepositoOrigen_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORDEPOSITOORIGEN_ID)
                Dim VdepositoDestino_id As New SqlParameter("@depositoDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEPOSITODESTINO_ID)
                Dim VsectorDepositoDestino_id As New SqlParameter("@sectorDepositoDestino_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTORDEPOSITODESTINO_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, Vfecha, VsectorRequerimiento_id, Vestado_id, Vobs, Vusuario, VusuarioAutoriza, VfechaAutorizacion, VmotivoAnulacion, VpedidoDiario, VsectorEntrega_id, VfechaFinalizacion, VmotivoFinalizacion, VusuarioFinaliza, VdepositoOrigen_id, VsectorDepositoOrigen_id, VdepositoDestino_id, VsectorDepositoDestino_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMREQUERIMIENTOINTERNO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMREQUERIMIENTOINTERNO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMREQUERIMIENTOINTERNO
        ''' Fecha de Creación  : miércoles, 11 de octubre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMREQUERIMIENTOINTERNO. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const FECHA As String = "FECHA"
            Public Const SECTORREQUERIMIENTO_ID As String = "SECTORREQUERIMIENTO_ID"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const OBS As String = "OBS"
            Public Const USUARIO As String = "USUARIO"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const FECHAAUTORIZACION As String = "FECHAAUTORIZACION"
            Public Const MOTIVOANULACION As String = "MOTIVOANULACION"
            Public Const PEDIDODIARIO As String = "PEDIDODIARIO"
            Public Const SECTORENTREGA_ID As String = "SECTORENTREGA_ID"
            Public Const FECHAFINALIZACION As String = "FECHAFINALIZACION"
            Public Const MOTIVOFINALIZACION As String = "MOTIVOFINALIZACION"
            Public Const USUARIOFINALIZA As String = "USUARIOFINALIZA"
            Public Const DEPOSITOORIGEN_ID As String = "DEPOSITOORIGEN_ID"
            Public Const SECTORDEPOSITOORIGEN_ID As String = "SECTORDEPOSITOORIGEN_ID"
            Public Const DEPOSITODESTINO_ID As String = "DEPOSITODESTINO_ID"
            Public Const SECTORDEPOSITODESTINO_ID As String = "SECTORDEPOSITODESTINO_ID"
        End Class ' ColumnNames
    End Class ' COMREQUERIMIENTOINTERNO


    Public Class COMREQUERIMIENTOINTERNOITEM
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            requerimiento_id
            nroItem
            articulo_id
            uniMed
            cantidad
            nivelAut_id
            fechaEntrega
            marca
            excluido
            motivoExclusion
            usuarioExcluye
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMREQUERIMIENTOINTERNOITEM)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMREQUERIMIENTOINTERNOITEM) As Entities.Tables.COMREQUERIMIENTOINTERNOITEM
            Dim result As Boolean

            Try
                _commandText = "_COMREQUERIMIENTOINTERNOITEM_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID)
                Dim VfechaEntrega As New SqlParameter("@fechaEntrega", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA = Date.MinValue, Nothing, Item.FECHAENTREGA))
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim Vexcluido As New SqlParameter("@excluido", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EXCLUIDO)
                Dim VmotivoExclusion As New SqlParameter("@motivoExclusion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOEXCLUSION)
                Dim VusuarioExcluye As New SqlParameter("@usuarioExcluye", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOEXCLUYE)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKrequerimiento_id, vPKnroItem, Varticulo_id, VuniMed, Vcantidad, VnivelAut_id, VfechaEntrega, Vmarca, Vexcluido, VmotivoExclusion, VusuarioExcluye, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.REQUERIMIENTO_ID = vPKrequerimiento_id.Value
                    Item.NROITEM = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMREQUERIMIENTOINTERNOITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comRequerimientoInternoItem_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMREQUERIMIENTOINTERNOITEM
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.NIVELAUT_ID = IIf(Convert.IsDBNull(dr("nivelAut_id")), Nothing, dr("nivelAut_id"))
                    NewItem.FECHAENTREGA = IIf(Convert.IsDBNull(dr("fechaEntrega")), Nothing, dr("fechaEntrega"))
                    NewItem.MARCA = IIf(Convert.IsDBNull(dr("marca")), Nothing, dr("marca"))
                    NewItem.EXCLUIDO = IIf(Convert.IsDBNull(dr("excluido")), Nothing, dr("excluido"))
                    NewItem.MOTIVOEXCLUSION = IIf(Convert.IsDBNull(dr("motivoExclusion")), Nothing, dr("motivoExclusion"))
                    NewItem.USUARIOEXCLUYE = IIf(Convert.IsDBNull(dr("usuarioExcluye")), Nothing, dr("usuarioExcluye"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOINTERNOITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMREQUERIMIENTOINTERNOITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMREQUERIMIENTOINTERNOITEM) As Boolean

            Try
                _commandText = "_comRequerimientoInternoItem_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comRequerimientoInternoItem_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMREQUERIMIENTOINTERNOITEM) As Boolean

            Try
                _commandText = "_comRequerimientoInternoItem_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VnivelAut_id As New SqlParameter("@nivelAut_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUT_ID)
                Dim VfechaEntrega As New SqlParameter("@fechaEntrega", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAENTREGA = Date.MinValue, Nothing, Item.FECHAENTREGA))
                Dim Vmarca As New SqlParameter("@marca", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MARCA)
                Dim Vexcluido As New SqlParameter("@excluido", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EXCLUIDO)
                Dim VmotivoExclusion As New SqlParameter("@motivoExclusion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOEXCLUSION)
                Dim VusuarioExcluye As New SqlParameter("@usuarioExcluye", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOEXCLUYE)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, Vrequerimiento_id, VnroItem, Varticulo_id, VuniMed, Vcantidad, VnivelAut_id, VfechaEntrega, Vmarca, Vexcluido, VmotivoExclusion, VusuarioExcluye, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMREQUERIMIENTOINTERNOITEM)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMREQUERIMIENTOINTERNOITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMREQUERIMIENTOINTERNOITEM
        ''' Fecha de Creación  : martes, 31 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMREQUERIMIENTOINTERNOITEM. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const NIVELAUT_ID As String = "NIVELAUT_ID"
            Public Const FECHAENTREGA As String = "FECHAENTREGA"
            Public Const MARCA As String = "MARCA"
            Public Const EXCLUIDO As String = "EXCLUIDO"
            Public Const MOTIVOEXCLUSION As String = "MOTIVOEXCLUSION"
            Public Const USUARIOEXCLUYE As String = "USUARIOEXCLUYE"
        End Class ' ColumnNames
    End Class ' COMREQUERIMIENTOINTERNOITEM

    Public Class STKVENCIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id
            codEmp
            comprobante
            articulo_id
            cantidad
            enStock
            vto
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKVENCIMIENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKVENCIMIENTO) As Entities.Tables.STKVENCIMIENTO
            Dim result As Boolean

            Try
                _commandText = "_STKVENCIMIENTO_ADD"
                Dim vPKId As New SqlParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VenStock As New SqlParameter("@enStock", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENSTOCK)
                Dim Vvto As New SqlParameter("@vto", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.VTO = Date.MinValue, Nothing, Item.VTO))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId, VcodEmp, Vcomprobante, Varticulo_id, Vcantidad, VenStock, Vvto, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID = vPKId.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKVENCIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkVencimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKVENCIMIENTO
                    NewItem.ID = IIf(Convert.IsDBNull(dr("Id")), Nothing, dr("Id"))
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.COMPROBANTE = IIf(Convert.IsDBNull(dr("comprobante")), Nothing, dr("comprobante"))
                    NewItem.ARTICULO_ID = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    NewItem.ENSTOCK = IIf(Convert.IsDBNull(dr("enStock")), Nothing, dr("enStock"))
                    NewItem.VTO = IIf(Convert.IsDBNull(dr("vto")), Nothing, dr("vto"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKVENCIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKVENCIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKVENCIMIENTO) As Boolean

            Try
                _commandText = "_stkVencimiento_REMOVE"
                Dim VId As New SqlParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkVencimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKVENCIMIENTO) As Boolean

            Try
                _commandText = "_stkVencimiento_UPDATE"

                Dim VId As New SqlParameter("@Id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vcomprobante As New SqlParameter("@comprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTE)
                Dim Varticulo_id As New SqlParameter("@articulo_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARTICULO_ID)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim VenStock As New SqlParameter("@enStock", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENSTOCK)
                Dim Vvto As New SqlParameter("@vto", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.VTO = Date.MinValue, Nothing, Item.VTO))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId, VcodEmp, Vcomprobante, Varticulo_id, Vcantidad, VenStock, Vvto, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKVENCIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKVENCIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKVENCIMIENTO
        ''' Fecha de Creación  : jueves, 9 de marzo de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKVENCIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const CODEMP As String = "CODEMP"
            Public Const COMPROBANTE As String = "COMPROBANTE"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const CANTIDAD As String = "CANTIDAD"
            Public Const ENSTOCK As String = "ENSTOCK"
            Public Const VTO As String = "VTO"
        End Class ' ColumnNames
    End Class ' STKVENCIMIENTO

    Public Class COMORDENCOMPRADETALLE
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmp
            ordenCompra_id
            nroItem
            nivelAuto_id
            importe
            detalle
            cantidad
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.COMORDENCOMPRADETALLE)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.COMORDENCOMPRADETALLE) As Entities.Tables.COMORDENCOMPRADETALLE
            Dim result As Boolean

            Try
                _commandText = "_COMORDENCOMPRADETALLE_ADD"
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VnivelAuto_id As New SqlParameter("@nivelAuto_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUTO_ID)
                Dim Vimporte As New SqlParameter("@importe", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IMPORTE)
                Dim Vdetalle As New SqlParameter("@detalle", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DETALLE)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmp, vPKordenCompra_id, vPKnroItem, VnivelAuto_id, Vimporte, Vdetalle, Vcantidad, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMP = vPKcodEmp.Value
                    Item.ORDENCOMPRA_ID = vPKordenCompra_id.Value
                    Item.NROITEM = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.COMORDENCOMPRADETALLE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_comOrdenCompraDetalle_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.COMORDENCOMPRADETALLE
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.ORDENCOMPRA_ID = IIf(Convert.IsDBNull(dr("ordenCompra_id")), Nothing, dr("ordenCompra_id"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.NIVELAUTO_ID = IIf(Convert.IsDBNull(dr("nivelAuto_id")), Nothing, dr("nivelAuto_id"))
                    NewItem.IMPORTE = IIf(Convert.IsDBNull(dr("importe")), Nothing, dr("importe"))
                    NewItem.DETALLE = IIf(Convert.IsDBNull(dr("detalle")), Nothing, dr("detalle"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRADETALLE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "COMORDENCOMPRADETALLE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.COMORDENCOMPRADETALLE) As Boolean

            Try
                _commandText = "_comOrdenCompraDetalle_REMOVE"
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_comOrdenCompraDetalle_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.COMORDENCOMPRADETALLE) As Boolean

            Try
                _commandText = "_comOrdenCompraDetalle_UPDATE"

                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim VordenCompra_id As New SqlParameter("@ordenCompra_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ORDENCOMPRA_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VnivelAuto_id As New SqlParameter("@nivelAuto_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NIVELAUTO_ID)
                Dim Vimporte As New SqlParameter("@importe", SqlDbType.Float, 15, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IMPORTE)
                Dim Vdetalle As New SqlParameter("@detalle", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DETALLE)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmp, VordenCompra_id, VnroItem, VnivelAuto_id, Vimporte, Vdetalle, Vcantidad, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.COMORDENCOMPRADETALLE)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.COMORDENCOMPRADETALLE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla COMORDENCOMPRADETALLE
        ''' Fecha de Creación  : miércoles, 13 de septiembre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla COMORDENCOMPRADETALLE. </remarks>
        Public Class ColumnNames
            Public Const CODEMP As String = "CODEMP"
            Public Const ORDENCOMPRA_ID As String = "ORDENCOMPRA_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const NIVELAUTO_ID As String = "NIVELAUTO_ID"
            Public Const IMPORTE As String = "IMPORTE"
            Public Const DETALLE As String = "DETALLE"
            Public Const CANTIDAD As String = "CANTIDAD"
        End Class ' ColumnNames
    End Class ' COMORDENCOMPRADETALLE

    Public Class STKMOVIREQINTERNO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            codEmpStk
            comprobanteStk
            nroItemStk
            codEmp
            requerimiento_id
            nroItem
            uniMed
            cantEnviada
            remSucursal
            remComprobante
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.STKMOVIREQINTERNO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("STACATALINACommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("STACATALINA").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.STKMOVIREQINTERNO) As Entities.Tables.STKMOVIREQINTERNO
            Dim result As Boolean

            Try
                _commandText = "_STKMOVIREQINTERNO_ADD"
                Dim vPKcodEmpStk As New SqlParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPSTK)
                Dim vPKcomprobanteStk As New SqlParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTESTK)
                Dim vPKnroItemStk As New SqlParameter("@nroItemStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEMSTK)
                Dim vPKcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim vPKrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim VcantEnviada As New SqlParameter("@cantEnviada", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTENVIADA)
                Dim VremSucursal As New SqlParameter("@remSucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REMSUCURSAL)
                Dim VremComprobante As New SqlParameter("@remComprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REMCOMPROBANTE)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcodEmpStk, vPKcomprobanteStk, vPKnroItemStk, vPKcodEmp, vPKrequerimiento_id, vPKnroItem, VuniMed, VcantEnviada, VremSucursal, VremComprobante, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CODEMPSTK = vPKcodEmpStk.Value
                    Item.COMPROBANTESTK = vPKcomprobanteStk.Value
                    Item.NROITEMSTK = vPKnroItemStk.Value
                    Item.CODEMP = vPKcodEmp.Value
                    Item.REQUERIMIENTO_ID = vPKrequerimiento_id.Value
                    Item.NROITEM = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.STKMOVIREQINTERNO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_stkMoviReqInterno_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.STKMOVIREQINTERNO
                    NewItem.CODEMPSTK = IIf(Convert.IsDBNull(dr("codEmpStk")), Nothing, dr("codEmpStk"))
                    NewItem.COMPROBANTESTK = IIf(Convert.IsDBNull(dr("comprobanteStk")), Nothing, dr("comprobanteStk"))
                    NewItem.NROITEMSTK = IIf(Convert.IsDBNull(dr("nroItemStk")), Nothing, dr("nroItemStk"))
                    NewItem.CODEMP = IIf(Convert.IsDBNull(dr("codEmp")), Nothing, dr("codEmp"))
                    NewItem.REQUERIMIENTO_ID = IIf(Convert.IsDBNull(dr("requerimiento_id")), Nothing, dr("requerimiento_id"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.UNIMED = IIf(Convert.IsDBNull(dr("uniMed")), Nothing, dr("uniMed"))
                    NewItem.CANTENVIADA = IIf(Convert.IsDBNull(dr("cantEnviada")), Nothing, dr("cantEnviada"))
                    NewItem.REMSUCURSAL = IIf(Convert.IsDBNull(dr("remSucursal")), Nothing, dr("remSucursal"))
                    NewItem.REMCOMPROBANTE = IIf(Convert.IsDBNull(dr("remComprobante")), Nothing, dr("remComprobante"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIREQINTERNO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "STKMOVIREQINTERNO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.STKMOVIREQINTERNO) As Boolean

            Try
                _commandText = "_stkMoviReqInterno_REMOVE"
                Dim VcodEmpStk As New SqlParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPSTK)
                Dim VcomprobanteStk As New SqlParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTESTK)
                Dim VnroItemStk As New SqlParameter("@nroItemStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEMSTK)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcodEmpStk, VcomprobanteStk, VnroItemStk, VcodEmp, Vrequerimiento_id, VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_stkMoviReqInterno_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.STKMOVIREQINTERNO) As Boolean

            Try
                _commandText = "_stkMoviReqInterno_UPDATE"

                Dim VcodEmpStk As New SqlParameter("@codEmpStk", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMPSTK)
                Dim VcomprobanteStk As New SqlParameter("@comprobanteStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COMPROBANTESTK)
                Dim VnroItemStk As New SqlParameter("@nroItemStk", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEMSTK)
                Dim VcodEmp As New SqlParameter("@codEmp", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CODEMP)
                Dim Vrequerimiento_id As New SqlParameter("@requerimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REQUERIMIENTO_ID)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim VuniMed As New SqlParameter("@uniMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIMED)
                Dim VcantEnviada As New SqlParameter("@cantEnviada", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTENVIADA)
                Dim VremSucursal As New SqlParameter("@remSucursal", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REMSUCURSAL)
                Dim VremComprobante As New SqlParameter("@remComprobante", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.REMCOMPROBANTE)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcodEmpStk, VcomprobanteStk, VnroItemStk, VcodEmp, Vrequerimiento_id, VnroItem, VuniMed, VcantEnviada, VremSucursal, VremComprobante, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.STKMOVIREQINTERNO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.STKMOVIREQINTERNO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla STKMOVIREQINTERNO
        ''' Fecha de Creación  : lunes, 9 de octubre de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla STKMOVIREQINTERNO. </remarks>
        Public Class ColumnNames
            Public Const CODEMPSTK As String = "CODEMPSTK"
            Public Const COMPROBANTESTK As String = "COMPROBANTESTK"
            Public Const NROITEMSTK As String = "NROITEMSTK"
            Public Const CODEMP As String = "CODEMP"
            Public Const REQUERIMIENTO_ID As String = "REQUERIMIENTO_ID"
            Public Const NROITEM As String = "NROITEM"
            Public Const UNIMED As String = "UNIMED"
            Public Const CANTENVIADA As String = "CANTENVIADA"
            Public Const REMSUCURSAL As String = "REMSUCURSAL"
            Public Const REMCOMPROBANTE As String = "REMCOMPROBANTE"
        End Class ' ColumnNames
    End Class ' STKMOVIREQINTERNO
End Namespace 'Tables 